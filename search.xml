<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于docker的nextcloud+aria2离线下载联动解决方案</title>
      <link href="/2022/10/23/nextcloud-with-aria2-on-docker/"/>
      <url>/2022/10/23/nextcloud-with-aria2-on-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>前几天，在 <a href="/2021/04/08/nextcloud-on-docker/">使用docker-compose搭建nextcloud+Nginx+MySQL+Redis</a> 这篇文章中的 <a href="https://github.com/ChenSmallX/ChenSmallX.github.io/issues/67#issuecomment-1283605433">这条评论</a> 引起了我的好奇心。这位兄弟的评论内容大致是想要将 Nextcloud 与 Aria2 联动实现网盘上的离线下载功能。</p><p>在看到这个主意后，转念一想，就目前市面上来看，离线下载不是已经成为一个网盘应用的基础功能了吗？我这 Nextcloud 那也必须整上啊 🤣 ！二话不说就开整。</p><p>经过几次尝试后，大致找到了一个能够与 <a href="/2021/04/08/nextcloud-on-docker/">使用docker-compose搭建nextcloud+Nginx+MySQL+Redis</a> 这篇文章中的 nextcloud 整体方案能够完美兼容，并实现部署后简单配置即可使用的效果。</p><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>套方案是基于 <a href="/2021/04/08/nextcloud-on-docker/">使用docker-compose搭建nextcloud+Nginx+MySQL+Redis</a> 这篇文章中搭建好的 Nextcloud 整体解决方案实现的，所以在部署上是沿用了 docker-compose 这种简单快速且方便迁移的基本方法。</p><p>而就 Nextcloud 与 Aria2 的交互方法采用的是目前已经成熟了且完美兼容 Nextcloud 的插件 ocDownload。这款插件支持 aria2、youtube-dl、curl 等网络下载组件，但我们这里仅使用 aira2 这一个功能，其他的下载组件看以后是否有充分的需求再去折腾吧 😂 。ocDownloader 与 Aria2 交互的方式是传统的 Aria2-RPC 协议，与 AriaNG 类似，也是一个可独立运行的前端，有效与否取决于 Aria2 的服务端是否正常工作。</p><p>在使用的过程中，发现 ocDownloader 在连接 Aria2 这方面几乎没有可配置的地方，只能选择在 HTTP 和磁力下载时使用 Aria2 还是 cURL，其余的类似 Aria2 的地址、端口等都找不到配置的地方。所以初步怀疑是 ocDownloader 将 Aria2 的地址和端口写死了，目标连接很可能就是经典的 <code>127.0.0.1:6800</code>。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023005412.png" alt="ocDownloader 的使用页面">  </p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023005622.png" alt="ocDownloader 的配置页面">  </p><p>经过以上的分析，这套操作的主要思路分为以下几步：</p><ol><li><a href="#%E9%85%8D%E7%BD%AE-Aria2-%E5%AE%B9%E5%99%A8">配置 Aria2 容器</a></li><li><a href="#%E5%AE%89%E8%A3%85-ocDownloader-%E6%8F%92%E4%BB%B6">安装 ocDownloader 插件</a></li><li><a href="#%E4%BF%AE%E6%94%B9-ocDownloader-%E6%8F%92%E4%BB%B6%E4%BB%A3%E7%A0%81">修改 ocDownloader 插件代码以使之能连上 Aria2 服务端</a></li></ol><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="配置-Aria2-容器"><a href="#配置-Aria2-容器" class="headerlink" title="配置 Aria2 容器"></a>配置 Aria2 容器</h3><p>由于之前的 nextcloud 的 docker 是使用了 docker-compose 来组织容器，所以这次也使用 docker-compose 的形式呈现。</p><p>由于 docker-compose 强依赖于 docker-compose.yml 文件中的参数配置，如果 yml 文件中的参数配置在 compose 运行过程中发生了变化，会导致 down 和 up 都发生错误。所以在开始之前，我们先将容器都 down 掉（就是删除容器的意思）。</p><blockquote><p>注意，这里要确保所有重要的数据都映射到了本地磁盘空间中，否则在重启这份 compose 后造成数据丢失。当然，按照我之前文章的映射方法映射后，就不会有问题，重要数据都是映射到本地了。</p></blockquote><ul><li><p>这里我们可以使用常规的 down 来关闭 compose，并在配置完成后常规 up</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭 compose</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="comment"># 重新构建 compose</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>也可以在全部配置完成后，强行使用新的配置重新构建 compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --force-recreate -d</span><br></pre></td></tr></table></figure></li></ul><p>这里我将 Aria2 的容器命名为 downloader，以下是容器的启动参数。镜像使用的是他人专门给 nextcloud 配置过的 <code>wahyd4/aria2-ui:nextcloud</code> 版本，当然也可以使用其他版本的，例如使用次数最多的 <code>p3terx/aria2-pro</code>，只要是能够配置 uid 和 gid 的就足够了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">downloader:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">wahyd4/aria2-ui:nextcloud</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  <span class="attr">expose:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&quot;6800&quot;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">./app/data:/var/www/html/data</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">PUID=33</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">PGID=33</span></span><br></pre></td></tr></table></figure><ul><li>这里使用 expose 将 6800 端口暴露在 docker 的网络中而不是宿主机的网络中，是因为我们后面要将 downloader 容器连接到 nextcloud 的容器中，只需要这两个容器可以数据交互即可，无需将多余的端口暴露给外部而增加安全风险。</li><li>这里使用 volumes 将 nextcloud 的 <code>/var/www/html/data</code> 以相同路径映射到 aria2 容器中，是因为 ocDownloader 会自动将每个用户创建的下载任务的下载目的路径拼接到 nextcloud 本地的路径中，以实现单个用户下载的数据只能由当前用户使用。</li><li>配置 PUID 和 PGID 为 33，是因为 nextcloud 容器中运行 nextcloud 进程的用户是 <code>www-data</code>，而这个用户的用户 ID 和组 ID 是 <code>33:33</code>，配置了相同的用户 ID 和组 ID 后，就可以让 Aria2 容器中的下载器下载下来的文件的所属权限与 nextcloud 完全相同，并使得两边的进程对这些文件都能操作。</li><li>不在 environment 中给 Aria2 配置用户名和密码主要也是因为这个容器并不对外暴露，唯一能够接触到这个容器的方式只有通过 nextcloud 容器间接接触，加之不配置认证选项可以降低配置的难度。</li></ul><hr><p>配置好 Aria2 的容器后，还需要修改一下 nextcloud 容器的配置，使得两个容器从网络上和数据上做到互通：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nextcloud:fpm</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">./app/data:/var/www/html/data</span></span><br><span class="line">   <span class="comment"># 这里只需要确保 data 的路径也同样映射到 aria2 中即可</span></span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">links:</span></span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">downloader:downloader</span></span><br><span class="line">   <span class="comment"># 这里将 downloader 容器以 downloader 的名字映射到 nextcloud 的容器中</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">downloader</span></span><br><span class="line">   <span class="comment"># 这里设置 nextcloud 容器依赖于 downloader 容器，使 nextcloud 容器启动顺序在 aria2 容器之后。其实这条配不配都是可以的</span></span><br></pre></td></tr></table></figure><h3 id="安装-ocDownloader-插件"><a href="#安装-ocDownloader-插件" class="headerlink" title="安装 ocDownloader 插件"></a>安装 ocDownloader 插件</h3><p>直接从应用商店安装与自己 nextcloud 匹配的 ocDownloader，或者从 <a href="https://apps.nextcloud.com/apps/ocdownloader">ocDownloader - Apps - App Store - Nextcloud</a> 下载与自己 nextcloud 版本匹配的拓展包上传到服务器后解压安装到 <code>/var/www/html/apps</code> 中。</p><p>并启用 ocDownloader。在设置中的“其他设置”中能够看到 ocDownloader 的配置选项，即为安装并启用完成。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023124318.png" alt="点击 ocDownloader 右侧的启用，使其操作按钮名称变为禁用，即为开启状态">  </p><p>此时已经可以可以看到导航栏中的 ocDownloader 图标了，并且可以进入它的页面。但是此时大家会发现，<strong>它其实是无法使用的</strong>，因为它根本连不上 Aria2 的 RPC。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023124843.png" alt="ocDownloader 图标">  </p><h3 id="修改-ocDownloader-插件代码"><a href="#修改-ocDownloader-插件代码" class="headerlink" title="修改 ocDownloader 插件代码"></a>修改 ocDownloader 插件代码</h3><p>之前在<a href="#%E5%A4%A7%E8%87%B4%E6%80%9D%E8%B7%AF">大致思路</a>中也讲到过，ocDownloader 在插件代码中将连接 Aria2 的地址写死了，导致除了 <code>127.0.0.1:6800</code>，其他地址一律不认。好在整个 nextcloud 体系是建立在 php 语言的基础上的，所有代码都是可以修改后直接运行的，不需要重新编译。</p><p>虽然我是做 c++&#x2F;python 后端开发的，不会 php，但是万变不离其宗，编码的中心思想基本都是通用的。依托于我那蹩脚阅读代码的能力，最后也还是找到了配置 Aria2 连接地址的位置，这里就不卖关子了，直接把文件路径放这里。</p><blockquote><p>容器内的代码路径为 <code>/var/www/html/apps/ocdownloader/controller/lib/aria2.php</code>，如果使用跟我的 docker-compose.yml 一样的映射方式，那么此时在宿主机中的位置就是 <code>./app/html/apps/ocdownloader/controller/lib/aria2.php</code></p></blockquote><p>先进入这个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> html/apps/ocdownloader/controller/lib/</span><br></pre></td></tr></table></figure><p>备份一下原文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> aria2.php aria2.php.bak</span><br></pre></td></tr></table></figure><p>然后使用编辑器编辑这个文件的第 34 行，或者搜索 <code>self::$Server</code> ，将其赋值的数据从 <code>&quot;127.0.0.1&quot;</code> 改为 <code>&quot;downloader&quot;</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aria2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$Name</span>, <span class="variable">$Args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$Settings</span> = <span class="keyword">new</span> <span class="title class_">Settings</span>();</span><br><span class="line">        <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">setKey</span>(<span class="string">&#x27;AriaAddress&#x27;</span>);</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$Server</span> = <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">getValue</span>() ? <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">getValue</span>() : <span class="string">&#x27;downloader&#x27;</span>;  <span class="comment">// 修改这里</span></span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$Server</span> .= <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">        <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">setKey</span>(<span class="string">&#x27;AriaPort&#x27;</span>);</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$Server</span> .= <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">getValue</span>() ? <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">getValue</span>() : <span class="string">&#x27;6800&#x27;</span>;</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$Server</span> .= <span class="string">&#x27;/jsonrpc&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里改为 <code>&quot;downloader&quot;</code> 是因为我在 docker-compose.yml 中将 Aria2 的容器以 <code>downloader</code> 的名称映射到了 nextcloud 的容器 host 列表中，这样就可以直接通过 downloader 这个地址解析到 Aria2 容器在 docker 网桥内的内网地址。</p><p>保存这个文件。</p><p>重启重新构建 docker-compose 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>等待容器完全启动，页面服务可以访问后，就可以在 nextcloud 中使用 ocDownloader 与 Aria2 容器进行交互了！</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="日志排障"><a href="#日志排障" class="headerlink" title="日志排障"></a>日志排障</h3><p>因为这个方法有点骚，每个人在环境中面对的情况可能不一样，所以这里提供一些基本的排障手段。</p><p>持续监控查看某个容器的服务日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [容器名/容器ID] -f</span><br></pre></td></tr></table></figure><p>这里我们尝试从页面上的 ocDownloader 下载一个<a href="https://4e2f5ebe7c93af6dc2c7943c2576e19b.rdt.tfogc.com:49156/dldir1.qq.com/weixin/Windows/WeChatSetup.exe?mkey=6354e8e6d23746820ea3b4fecf66d684&arrive_key=1218989679613&cip=58.61.50.191&proto=https">微信的 windows 端安装包</a>。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023131732.png" alt="下载微信 windows 安装包">  </p><p>可以看到，下载是可以正常启动，并可以看到历史的下载记录的：</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023131827.png" alt="下载中与历史下载任务情况">  </p><p>从 Aria2 容器的日志中也可以看到下载的创建、进行情况：</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023132257.png" alt="Aria2 的日志">  </p><h3 id="ocDownloader-配置项"><a href="#ocDownloader-配置项" class="headerlink" title="ocDownloader 配置项"></a>ocDownloader 配置项</h3><p>打字太麻烦了，贴张图把</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023133530.png" alt="ocDownloader 配置项">  </p><p>在默认下载文件夹参数中配置了目录后，就会在个人的文件页面中创建对应的目录，并下载到这里面。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023133818.png" alt="下载目录配置">  </p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机协会 </tag>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> nextcloud&#39; </tag>
            
            <tag> mysql </tag>
            
            <tag> nginx </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Timsort算法Python实现</title>
      <link href="/2022/05/19/python-timsort/"/>
      <url>/2022/05/19/python-timsort/</url>
      
        <content type="html"><![CDATA[<p>Timsort 算法是一个以人名命名的，工业级、稳定型排序算法。Python 中内置<code>sorted</code>函数和各类中的<code>sort</code>方法都是用的 Timesort。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><img src="/../img/timsort.png" alt="各种算法性能对比图"></p><p>最好的情况下可以达到 O(n)，最差情况下也不过 O(n log(n))，这属于是排序算法中最好的情况了。和堆排序的优劣在于，最好情况下堆排序为O(n log(n))（比timsort慢）,空间上堆排为 O(1)，timsort为 O(n)。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>Timsort的大致步骤可以分为3步：</p><ol><li>将数据按照单调递增或单调递减分割为多个独立的切片，每个切片称作一个<code>run</code>，并将单调递减的 run 翻转。</li><li>定义一个长度阈值，将长度低于这个阈值的 run 与相邻的 run 合并，以提高后续归并的效率。</li><li>将所有的 run 依次压入栈中，并使得在压入栈的过程中，三个连续的 run <code>[X, Y, Z] </code>始终满足 <code>len(X) + len(Y) &lt; len(Z)</code> 和 <code>len(X) &lt; len(Y)</code> 的条件。如果不满足以上条件，则将 Y run 与 X, Z 中较短的 run 通过归并排序合并。</li></ol><p>以上三个步骤为 timsort 算法的核心思想，每个步骤的实现会因人而异，总体的核心代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MIN_SORT_LEN = <span class="number">32</span>  <span class="comment"># 可以根据数据的规模规定长度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_timsort</span>(<span class="params">data</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤1：</span></span><br><span class="line">    <span class="comment"># 将数据按照单调递增或单调递减分割为多个数据切片，每个切片称作run</span></span><br><span class="line">    <span class="comment"># 其中，单调递减的切片会被反转为单调递增的</span></span><br><span class="line">    runs = splite_runs(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤2：</span></span><br><span class="line">    <span class="comment"># 将过短的run跟相邻的run通过插入排序合并，</span></span><br><span class="line">    <span class="comment"># 需要定义一个数值来判定run是否过短</span></span><br><span class="line">    runs = merge_short_runs(runs, MIN_SORT_LEN)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤3：</span></span><br><span class="line">    <span class="comment"># 将所有的run，依次压入栈中，</span></span><br><span class="line">    <span class="comment"># 使得栈中的任意三个连续的run [X, Y, Z] 满足：</span></span><br><span class="line">    <span class="comment"># 1. len(X) + len(Y) &lt; len(Z)</span></span><br><span class="line">    <span class="comment"># 2. len(X) &lt; len(Y)</span></span><br><span class="line">    <span class="comment"># 如果不满足以上条件，则 Y 与 X, Z 中较小的一个run通过归并排序合并</span></span><br><span class="line">    sorted_data = merge_runs(runs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted_data</span><br></pre></td></tr></table></figure><h3 id="分割-run"><a href="#分割-run" class="headerlink" title="分割 run"></a>分割 <code>run</code></h3><p>将数据按照单调递增或单调递减分割为多个独立的切片，每个切片称作一个<code>run</code>，并将单调递减的 run 翻转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">splite_runs</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    分割 run</span></span><br><span class="line"><span class="string">    将数据按照单调递增或单调递减分割为多个独立的切片，</span></span><br><span class="line"><span class="string">    每个切片称作一个run，并将单调递减的 run 翻转。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    runs = []</span><br><span class="line">    curr_run = []</span><br><span class="line">    need_reverse = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(curr_run) &lt; <span class="number">2</span>:</span><br><span class="line">            curr_run.append(i)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(curr_run) == <span class="number">2</span>:</span><br><span class="line">            need_reverse = <span class="literal">True</span> <span class="keyword">if</span> curr_run[<span class="number">0</span>] &gt; curr_run[<span class="number">1</span>] <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># start_a_new_run = False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> need_reverse <span class="keyword">and</span> i &lt; curr_run[-<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 单调递增时遇到了比最后一个元素小的元素</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> need_reverse <span class="keyword">and</span> i &gt; curr_run[-<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 单调递减时遇到了比最后一个元素大的元素</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr_run.append(i)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始下一个 run</span></span><br><span class="line">        <span class="keyword">if</span> need_reverse:</span><br><span class="line">            curr_run.reverse()</span><br><span class="line">        runs.append(curr_run)</span><br><span class="line">        curr_run = [i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> curr_run:</span><br><span class="line">        runs.append(curr_run)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> runs</span><br></pre></td></tr></table></figure><h3 id="合并短-run"><a href="#合并短-run" class="headerlink" title="合并短 run"></a>合并短 <code>run</code></h3><p>定义一个长度阈值，将长度低于这个阈值的 run 与相邻的 run 合并，以提高后续归并的效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_bisect_pos</span>(<span class="params">data, x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;二分查找&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> data[<span class="number">0</span>] &gt; x:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    mid = <span class="built_in">round</span>(<span class="built_in">len</span>(data)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> data[mid] &lt; x:</span><br><span class="line">        <span class="keyword">return</span> mid + my_bisect_pos(data[mid:], x)</span><br><span class="line">    <span class="keyword">elif</span> x &lt; data[mid]:</span><br><span class="line">        <span class="keyword">return</span> my_bisect_pos(data[:mid], x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_insertion_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;插入排序&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    p = <span class="number">1</span></span><br><span class="line">    new_data = [data[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">while</span> p &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        new_pos = my_bisect_pos(new_data, data[p])</span><br><span class="line">        new_data = new_data[:new_pos] + [data[p]] + new_data[new_pos:]</span><br><span class="line"></span><br><span class="line">        p += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_short_runs</span>(<span class="params">runs, min_run_len</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    合并短 run</span></span><br><span class="line"><span class="string">    定义一个长度阈值，将长度低于这个阈值的 run 与相邻的 run 合并，</span></span><br><span class="line"><span class="string">    以提高后续归并的效率。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sorted_runs = []</span><br><span class="line">    curr_run = []</span><br><span class="line">    <span class="keyword">for</span> run <span class="keyword">in</span> runs:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(curr_run) &gt;= min_run_len:</span><br><span class="line">            sorted_runs.append(my_insertion_sort(curr_run))</span><br><span class="line">            curr_run = run</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr_run.extend(run)</span><br><span class="line">    sorted_runs.append(my_insertion_sort(curr_run))</span><br><span class="line">    <span class="keyword">return</span> sorted_runs</span><br></pre></td></tr></table></figure><h3 id="按规则归并-run"><a href="#按规则归并-run" class="headerlink" title="按规则归并 run"></a>按规则归并 <code>run</code></h3><p>将所有的 run 依次压入栈中，并使得在压入栈的过程中，三个连续的 run <code>[X, Y, Z] </code>始终满足 <code>len(X) + len(Y) &lt; len(Z)</code> 和 <code>len(X) &lt; len(Y)</code> 的条件。如果不满足以上条件，则将 Y run 与 X, Z 中较短的 run 通过归并排序合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_run</span>(<span class="params">run_a, run_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;归并排序&quot;&quot;&quot;</span></span><br><span class="line">    new_run = []</span><br><span class="line">    p_a = p_b = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p_a &lt; <span class="built_in">len</span>(run_a) <span class="keyword">and</span> p_b &lt; <span class="built_in">len</span>(run_b):</span><br><span class="line">        <span class="keyword">if</span> run_a[p_a] &lt;= run_b[p_b]:</span><br><span class="line">            new_run.append(run_a[p_a])</span><br><span class="line">            p_a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_run.append(run_b[p_b])</span><br><span class="line">            p_b += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> p_a &lt; <span class="built_in">len</span>(run_a):</span><br><span class="line">        new_run.extend(run_a[p_a:])</span><br><span class="line">    <span class="keyword">if</span> p_b &lt; <span class="built_in">len</span>(run_b):</span><br><span class="line">        new_run.extend(run_b[p_b:])</span><br><span class="line">    <span class="keyword">return</span> new_run</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_runs</span>(<span class="params">runs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    按规则归并 run</span></span><br><span class="line"><span class="string">    将所有的run，依次压入栈中，</span></span><br><span class="line"><span class="string">    使得栈中的任意三个连续的run [X, Y, Z] 满足：</span></span><br><span class="line"><span class="string">    1. len(X) + len(Y) &lt; len(Z)</span></span><br><span class="line"><span class="string">    2. len(X) &lt; len(Y)</span></span><br><span class="line"><span class="string">    如果不满足以上条件，则 Y 与 X, Z 中较小的一个run通过归并排序合并</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    run_stack = []</span><br><span class="line">    <span class="keyword">for</span> run <span class="keyword">in</span> runs:</span><br><span class="line">        run_stack.append(run)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(run_stack) &gt;= <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">            Z = run_stack.pop()</span><br><span class="line">            Y = run_stack.pop()</span><br><span class="line">            X = run_stack.pop()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(X) + <span class="built_in">len</span>(Y) &lt; <span class="built_in">len</span>(Z) <span class="keyword">and</span> <span class="built_in">len</span>(X) &lt; <span class="built_in">len</span>(Y):</span><br><span class="line">                run_stack.append(X)</span><br><span class="line">                run_stack.append(Y)</span><br><span class="line">                run_stack.append(Z)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(Z) &lt; <span class="built_in">len</span>(X):</span><br><span class="line">                    run_stack.append(X)</span><br><span class="line">                    run_stack.append(merge_run(Y, Z))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    run_stack.append(merge_run(X, Y))</span><br><span class="line">                    run_stack.append(Z)</span><br><span class="line">    sorted_data = []</span><br><span class="line">    <span class="keyword">for</span> run <span class="keyword">in</span> run_stack:</span><br><span class="line">        sorted_data = merge_run(sorted_data, run)</span><br><span class="line">    <span class="keyword">return</span> sorted_data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fortune+cowsay+lolcat：实现彩虹色终端随机问候语</title>
      <link href="/2022/05/13/random-motd/"/>
      <url>/2022/05/13/random-motd/</url>
      
        <content type="html"><![CDATA[<p>终端永远都是折腾的主场之一。<br>每次在登陆阿里云的 ubuntu 时都会展示一段欢迎词，并且并且带有 Alibaba Cloud 的字样，于是就开始琢磨，这个欢迎词应该是有办法自定义的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-104-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">Last login: Fri May 13 11:27:32 2022 from xx.xx.xx.xx</span><br></pre></td></tr></table></figure><p>针对每次登陆都展示相同的问候语，较为简单和通用的办法为修改 <code>/etc/motd</code> 这个文件，果不其然，查看其中的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">cat</span> motd</span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br></pre></td></tr></table></figure><h2 id="随机问候"><a href="#随机问候" class="headerlink" title="随机问候"></a>随机问候</h2><p>先来看看几个效果图。</p><p><img src="/../img/random-motd-0.png" alt="随即问候效果图1"><br><img src="/../img/random-motd-1.png" alt="随即问候效果图2"></p><p>要实现这样的效果，需要用到3个组件：</p><ul><li>fortune</li><li>cowsay</li><li>lolcat</li></ul><p>其中，fortune 负责输出随机问候语，cowsay 用于套框和加入小动物形象，而 lolcat 负责对这些字符画着色。</p><p>先安装这些组件（此处为ubuntu的安装办法，其他发行版可以自行上网查找安装方法）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 fortune 和 中文库</span></span><br><span class="line">sudo apt install fortune fortunes-zh</span><br><span class="line"><span class="comment"># 安装 cowsay</span></span><br><span class="line">sudo apt install cowsay</span><br><span class="line"><span class="comment"># 安装 lolcat</span></span><br><span class="line">sudo apt install lolcat</span><br></pre></td></tr></table></figure><h3 id="每个组件的作用"><a href="#每个组件的作用" class="headerlink" title="每个组件的作用"></a>每个组件的作用</h3><p>先来看看 fortune。fortune 用于输出随机的名言、诗词或者是一些程序文档。执行几次就能够明白：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ fortune</span><br><span class="line">常羡人间琢玉郎，天应乞与点酥娘。尽道清歌传皓齿，风起，雪飞炎海变清凉。</span><br><span class="line">万里归来颜愈少，微笑，笑时犹带岭梅香。试问岭南应不好，却道：此心安处是吾乡。</span><br><span class="line">      -- 苏轼《定风波》</span><br><span class="line">❯ fortune</span><br><span class="line">Nothing so needs reforming as other people&#x27;s habits.</span><br><span class="line">                -- Mark Twain</span><br><span class="line">❯ fortune</span><br><span class="line">白发悲花落，青云羡鸟飞。</span><br><span class="line">    -- 岑参《寄左省杜拾遗》</span><br></pre></td></tr></table></figure><p>接着是 cowsay。cowsay 用于将输入的内容放到小动物的说话的框中，使其更加地有观赏性和趣味性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❯ echo abcdefg | cowsay</span><br><span class="line"> _________</span><br><span class="line">&lt; abcdefg &gt;</span><br><span class="line"> ---------</span><br><span class="line">        \   ^__^</span><br><span class="line">         \  (oo)\_______</span><br><span class="line">            (__)\       )\/\</span><br><span class="line">                ||----w |</span><br><span class="line">                ||     ||</span><br></pre></td></tr></table></figure><p>通过查看 cowsay 的 usage，可以看到，不光是有牛一种小动物，还有很多内置的形象可以使用，通过 <code>-f</code> 参数后加内置的形象即可使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">❯ cowsay -h</span><br><span class="line">cow&#123;say,think&#125; version 3.03, (c) 1999 Tony Monroe</span><br><span class="line">Usage: cowsay [-bdgpstwy] [-h] [-e eyes] [-f cowfile]</span><br><span class="line">          [-l] [-n] [-T tongue] [-W wrapcolumn] [message]</span><br><span class="line">❯ echo abcdefg | cowsay -f sheep</span><br><span class="line"> _________</span><br><span class="line">&lt; abcdefg &gt;</span><br><span class="line"> ---------</span><br><span class="line">  \</span><br><span class="line">   \</span><br><span class="line">       __</span><br><span class="line">      UooU\.&#x27;@@@@@@`.</span><br><span class="line">      \__/(@@@@@@@@@@)</span><br><span class="line">           (@@@@@@@@)</span><br><span class="line">           `YY~~~~YY&#x27;</span><br><span class="line">            ||    ||</span><br></pre></td></tr></table></figure><p>而怎么能够知道内置了多少种小动物呢？其实每种小动物都是一个配置文件，并存在 <code>/usr/share/cowsay/cows</code> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">ls</span> /usr/share/cowsay/cows</span><br><span class="line">apt.cow             elephant-in-snake.cow  luke-koala.cow    stimpy.cow</span><br><span class="line">bud-frogs.cow       elephant.cow           mech-and-cow.cow  suse.cow</span><br><span class="line">bunny.cow           eyes.cow               milk.cow          three-eyes.cow</span><br><span class="line">calvin.cow          flaming-sheep.cow      moofasa.cow       turkey.cow</span><br><span class="line">cheese.cow          fox.cow                moose.cow         turtle.cow</span><br><span class="line">cock.cow            ghostbusters.cow       pony-smaller.cow  tux.cow</span><br><span class="line">cower.cow           gnu.cow                pony.cow          unipony-smaller.cow</span><br><span class="line">daemon.cow          hellokitty.cow         ren.cow           unipony.cow</span><br><span class="line">default.cow         kangaroo.cow           sheep.cow         vader-koala.cow</span><br><span class="line">dragon-and-cow.cow  kiss.cow               skeleton.cow      vader.cow</span><br><span class="line">dragon.cow          koala.cow              snowman.cow       www.cow</span><br><span class="line">duck.cow            kosh.cow               stegosaurus.cow</span><br></pre></td></tr></table></figure><p>如此一来，既然是随机问候，为什么不随机到底呢，索性小动物的形象也随机一下吧！</p><p>可以通过以下的 shell 指令获取到一个随机的小动物配置文件，并将其的名字作为参数传入 cowsay：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">❯ cow=`<span class="built_in">ls</span> /usr/share/cowsay/cows | <span class="built_in">sort</span> -R | <span class="built_in">tail</span> -n 1`</span><br><span class="line">❯ <span class="built_in">echo</span> abcdefg | cowsay -f <span class="variable">$&#123;cow%\.*&#125;</span></span><br><span class="line"> _________</span><br><span class="line">&lt; abcdefg &gt;</span><br><span class="line"> ---------</span><br><span class="line">          \      (__)</span><br><span class="line">           \     /oo|</span><br><span class="line">            \   (_<span class="string">&quot;_)*+++++++++*</span></span><br><span class="line"><span class="string">                   //I#\\\\\\\\I\</span></span><br><span class="line"><span class="string">                   I[I|I|||||I I `</span></span><br><span class="line"><span class="string">                   I`I&#x27;///&#x27;&#x27; I I</span></span><br><span class="line"><span class="string">                   I I       I I</span></span><br><span class="line"><span class="string">                   ~ ~       ~ ~</span></span><br><span class="line"><span class="string">                     Scowleton</span></span><br></pre></td></tr></table></figure><p>最后来看看 lolcat。lolcat 的作用就简单很多，就是对终端输出的字符进行彩虹色的着色：</p><p><img src="/../img/lolcat-qwer.png" alt="lolcat着色效果"></p><h3 id="整合后放入终端配置文件"><a href="#整合后放入终端配置文件" class="headerlink" title="整合后放入终端配置文件"></a>整合后放入终端配置文件</h3><p>经过以上的分析，我们可以通过管道符将以上三个软件组合起来使用，最终整合成这样一个流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一个随机小动物</span></span><br><span class="line">cow=`<span class="built_in">ls</span> /usr/share/cowsay/cows | <span class="built_in">sort</span> -R | <span class="built_in">tail</span> -n 1`</span><br><span class="line"><span class="comment"># 根据这个小动物形象输出随机文本</span></span><br><span class="line">fortune | cowsay -f <span class="variable">$&#123;cow%\.*&#125;</span> | lolcat</span><br></pre></td></tr></table></figure><p>将其填到终端配置文件，比如 .bashrc 或者 .zshrc（我是用的是 zsh，所以是 .zshrc），然后在之后的每次启动终端，在终端读取这个配置文件的时候，就会执行到这个命令，从而输出问候语。</p><p><img src="/../img/random-motd-2.png" alt="连续开启三个终端，都是不同的问候"></p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 集合(set) 创建实例效率</title>
      <link href="/2022/05/12/python-set-performance/"/>
      <url>/2022/05/12/python-set-performance/</url>
      
        <content type="html"><![CDATA[<h2 id="set创建方式"><a href="#set创建方式" class="headerlink" title="set创建方式"></a>set创建方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字面值创建方式</span></span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造方法创建方式</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="两种创建实例方式反汇编"><a href="#两种创建实例方式反汇编" class="headerlink" title="两种创建实例方式反汇编"></a>两种创建实例方式反汇编</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis(<span class="string">&#x27;&#123;1&#125;&#x27;</span>)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">              <span class="number">2</span> BUILD_SET                <span class="number">1</span></span><br><span class="line">              <span class="number">4</span> RETURN_VALUE</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis(<span class="string">&#x27;set([1])&#x27;</span>)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> LOAD_NAME                <span class="number">0</span> (<span class="built_in">set</span>)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">              <span class="number">4</span> BUILD_LIST               <span class="number">1</span></span><br><span class="line">              <span class="number">6</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">              <span class="number">8</span> RETURN_VALUE</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>可以看出，通过字面值去创建一个集合，在解释器实现上是通过调用了一个叫做 <code>BUILD_SET</code> 的方法直接创建；</p><p>而使用 <code>set()</code> 方法创建集合，解释器实现上会先通过 set 的名字去寻找构造方法，并且调用 <code>BUILD_LIST</code> 方法去创建一个 list 传入 set 构造方法，从而创建一个集合。</p><hr><p>所以结论为：使用字面值直接创建集合要比使用 set 构造方法效率更高。</p><hr><p>同理地，<code>list()</code> 构造方法和 <code>[]</code> 字面值创建列表的效率也很容易得出高低：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis(<span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">              <span class="number">2</span> RETURN_VALUE</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis(<span class="string">&#x27;list()&#x27;</span>)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> LOAD_NAME                <span class="number">0</span> (<span class="built_in">list</span>)</span><br><span class="line">              <span class="number">2</span> CALL_FUNCTION            <span class="number">0</span></span><br><span class="line">              <span class="number">4</span> RETURN_VALUE</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python random.choice 实现之数据模型魔术方法</title>
      <link href="/2022/03/08/python-random-choice-implement/"/>
      <url>/2022/03/08/python-random-choice-implement/</url>
      
        <content type="html"><![CDATA[<blockquote><p>起因自《流畅的python》1.1 一摞Python风格的纸牌</p></blockquote><p>自实现类要支持 <code>random.choice</code> 方法只需要支持两个魔术方法即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__len__</span><br><span class="line">__getitem__</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(mc))  <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(mc[<span class="number">15</span>])  <span class="comment"># 4</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="built_in">print</span>(choice(mc))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>进入python内置库 <code>random</code> 中查看<code>choice</code> 的实现，可以看到实现正是使用了序列的 <code>__len__</code> 方法和 <code>__getitem__</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> seq[random.random() * <span class="built_in">len</span>(seq)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次云主机硬盘扩容操作</title>
      <link href="/2021/08/26/record-a-disk-expansion-on-alicloud-ubuntu/"/>
      <url>/2021/08/26/record-a-disk-expansion-on-alicloud-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>由于在折腾<code>青龙面板+XDD</code>的时候配置了一套 Golang 的环境，导致为数不多的硬盘空间被吃干净了（没错，剩余量就是这么少）。考虑到机器还会用很长一段时间，所以决定增加一块硬盘对机器进行扩容。</p><span id="more"></span><h2 id="增加硬盘"><a href="#增加硬盘" class="headerlink" title="增加硬盘"></a>增加硬盘</h2><p>在阿里云页面购买了硬盘并挂载到 ecs 实例上之后，在系统中出现了一个新的设备——<code>/dev/vdb</code>，表明新增的是一块 <code>virtio</code> 磁盘，和我们常见的 <code>sd*</code> 不同，<code>sd*</code> 表示的是 <code>SCSI</code> 类型的设备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">ls</span> /dev</span><br><span class="line">... vda vda1 vdb ...</span><br></pre></td></tr></table></figure><h2 id="确认磁盘信息"><a href="#确认磁盘信息" class="headerlink" title="确认磁盘信息"></a>确认磁盘信息</h2><p>通过 <code>ls</code> 查看代表硬件的文件还是比较粗糙的办法，而且无法查看关于硬件的更详细的内容。<br>对于磁盘类的设备，可以通过 <code>lshw -C disk</code> 查看硬盘信息和通过 <code>fdisk -l</code> 来查看各个分区信息。</p><ul><li>使用 <code>lshw</code> 查看硬盘信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">❯ lshw -C disk</span><br><span class="line">  *-virtio1                 </span><br><span class="line">       description: Virtual I/O device</span><br><span class="line">       physical <span class="built_in">id</span>: 0</span><br><span class="line">       bus info: virtio@1</span><br><span class="line">       logical name: /dev/vda</span><br><span class="line">       size: 20GiB (21GB)</span><br><span class="line">       capabilities: partitioned partitioned:dos</span><br><span class="line">       configuration: driver=virtio_blk logicalsectorsize=512 sectorsize=512 signature=13be70fb</span><br><span class="line">  *-virtio4</span><br><span class="line">       description: Virtual I/O device</span><br><span class="line">       physical <span class="built_in">id</span>: 0</span><br><span class="line">       bus info: virtio@4</span><br><span class="line">       logical name: /dev/vdb</span><br><span class="line">       size: 100GiB (107GB)</span><br><span class="line">       capabilities: partitioned partitioned:dos</span><br><span class="line">       configuration: driver=virtio_blk logicalsectorsize=512 sectorsize=512 signature=2681d385</span><br></pre></td></tr></table></figure><ul><li>使用 <code>fdisk</code> 查看硬盘分区信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">❯ fdisk -l</span><br><span class="line">Disk /dev/vda: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x13be70fb</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/vda1  *     2048 41940991 41938944  20G 83 Linux</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br></pre></td></tr></table></figure><h2 id="分区和格式化"><a href="#分区和格式化" class="headerlink" title="分区和格式化"></a>分区和格式化</h2><p>在着手分区之前，首先最重要的是确定分区方案。</p><h3 id="分区方案"><a href="#分区方案" class="headerlink" title="分区方案"></a>分区方案</h3><p>我的这台阿里云 ecs 自带的硬盘是 20G 的“高效云盘”（估计就是一般的 HDD），这次发生硬盘空间不足主要是 <code>home</code> 目录和 <code>var</code> 目录，所以本次扩容+迁移的主要目标也是这两个目录。</p><p>参考 n 个经典 linux 分区方案，另外一个可以纳入考虑的是 <code>swap</code> 分区，使用 <code>free -h</code> 查看当前系统中内存的使用情况，可以看到本机物理内存只有 2G，加之之前在运行 docker 的时候忘记开了性能限制，脚本逻辑导致机器内存吃满导致 ssh 都登录不上的情况，所以适当添加虚拟内存 <code>swap</code> 分区在本次是一个可取的方案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          1.8Gi       648Mi       204Mi       2.0Mi       1.0Gi       1.0Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><p>由于添加的是一个 100G 的硬盘，所以我决定的分配方案为：</p><table><thead><tr><th align="left">序号</th><th align="center">挂载点</th><th align="right">大小</th><th align="center">拓展分区</th></tr></thead><tbody><tr><td align="left">0</td><td align="center">swap</td><td align="right">16G</td><td align="center"></td></tr><tr><td align="left">1</td><td align="center">&#x2F;var</td><td align="right">20G</td><td align="center">√</td></tr><tr><td align="left">2</td><td align="center">&#x2F;home</td><td align="right">64G</td><td align="center">√</td></tr><tr><td align="left">总合</td><td align="center"></td><td align="right">100G</td><td align="center"></td></tr></tbody></table><p>因为 swap 分区的灵活性比较强，所以单独划分一个主分区给它，以备不时之需的时候划分用作其他用途（虽然分配 16G 对于这台机器来说着实是绰绰有余了）。</p><p>而 var 和 home 分区意义上都属于是数据区，所以可以放在一起，由一个逻辑拓展分区分出来。</p><p>以上只是我自己不成熟的理解，如果看到这篇文章的大佬有更好的见解，希望可以在评论区给予指导，谢谢！</p><h3 id="分区操作"><a href="#分区操作" class="headerlink" title="分区操作"></a>分区操作</h3><p>为了以防万一，即使系统中没有使用 swap 分区，也手动显式地关闭一下 swap 功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ swapoff -a  <span class="comment"># 关闭所有的 swap</span></span><br><span class="line">❯ swapoff /dev/xxx  <span class="comment"># 关闭某个 swap 分区</span></span><br></pre></td></tr></table></figure><p>如之前所说，添加的是一块 virtio 类型磁盘，所以显示的是<code>/dev/vdb</code>，使用 fdisk 对磁盘分区，分区具体步骤在下面，如果太长了看不下去，可以直接跳到 <a href="#%E6%A0%BC%E5%BC%8F%E5%8C%96">格式化操作</a>。分区操作我尽量加入注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">❯ fdisk /dev/vdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.34).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p  <span class="comment"># 查看当前硬盘分区结构</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot Start       End   Sectors  Size Id Type</span><br><span class="line">/dev/vdb1        2048 209715199 209713152  100G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): d  <span class="comment"># 删除分区，因为原来只有一个分区，所以默认删除了第一个分区</span></span><br><span class="line">Selected partition 1</span><br><span class="line">Partition 1 has been deleted.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p  <span class="comment"># 再次查看分区结构，显示已经没有分区</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment"># (new)新建分区，提示要选择分区类型，主分区或者逻辑分区。</span></span><br><span class="line">Partition <span class="built_in">type</span>              <span class="comment"># 逻辑分区也是一种主分区，占用一个主分区名额。</span></span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)      <span class="comment"># 主分区一共只能有4个。</span></span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): p       <span class="comment"># 选择新建一个主分区</span></span><br><span class="line">Partition number (1-4, default 1):      <span class="comment"># 直接&lt;回车&gt;使用默认给的1号分区号</span></span><br><span class="line">First sector (2048-209715199, default 2048):    <span class="comment"># 直接回车使用起始扇区</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-209715199, default 209715199): +16G <span class="comment"># 输入“+16G”表示分配16G的空间</span></span><br><span class="line"></span><br><span class="line">Created a new partition 1 of <span class="built_in">type</span> <span class="string">&#x27;Linux&#x27;</span> and of size 16 GiB.</span><br><span class="line">Partition <span class="comment">#1 contains a ext4 signature.</span></span><br><span class="line"></span><br><span class="line">Do you want to remove the signature? [Y]es/[N]o: Y  <span class="comment"># 移除原有分区标志</span></span><br><span class="line"></span><br><span class="line">The signature will be removed by a write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t     <span class="comment"># 输入t表示修改分区类型</span></span><br><span class="line">Selected partition 1        <span class="comment"># 因为当前只有一个分区，所以fdisk默认选择了这个</span></span><br><span class="line">Hex code (<span class="built_in">type</span> L to list all codes): 82     <span class="comment"># 输入82，表示swap分区的id类型</span></span><br><span class="line">Changed <span class="built_in">type</span> of partition <span class="string">&#x27;Linux&#x27;</span> to <span class="string">&#x27;Linux swap / Solaris&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p     <span class="comment"># 查看当前分区表</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/vdb1        2048 33556479 33554432  16G 82 Linux swap / Solaris</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 1 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment"># 新建分区</span></span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): e       <span class="comment"># 新建拓展分区</span></span><br><span class="line">Partition number (2-4, default 2):                      <span class="comment"># 直接回车使用默认起始扇区</span></span><br><span class="line">First sector (33556480-209715199, default 33556480):    <span class="comment"># 直接回车使用默认结束扇区</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (33556480-209715199, default 209715199): </span><br><span class="line"></span><br><span class="line">Created a new partition 2 of <span class="built_in">type</span> <span class="string">&#x27;Extended&#x27;</span> and of size 84 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p     <span class="comment"># 查看当前分区表</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot    Start       End   Sectors Size Id Type</span><br><span class="line">/dev/vdb1           2048  33556479  33554432  16G 82 Linux swap / Solaris</span><br><span class="line">/dev/vdb2       33556480 209715199 176158720  84G  5 Extended</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 1 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment"># 新建分区</span></span><br><span class="line">All space <span class="keyword">for</span> primary partitions is <span class="keyword">in</span> use.     <span class="comment"># fdisk提示目前所有空间都被主分区使用了</span></span><br><span class="line">Adding logical partition 5                      <span class="comment"># 所以在拓展分区中添加逻辑分区</span></span><br><span class="line">First sector (33558528-209715199, default 33558528):    <span class="comment"># 直接回车使用默认起始扇区</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (33558528-209715199, default 209715199): +20G     <span class="comment"># 输入“+20G”表示限制当前分区大小20G</span></span><br><span class="line"></span><br><span class="line">Created a new partition 5 of <span class="built_in">type</span> <span class="string">&#x27;Linux&#x27;</span> and of size 20 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p     <span class="comment"># 查看当前分区表</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot    Start       End   Sectors Size Id Type</span><br><span class="line">/dev/vdb1           2048  33556479  33554432  16G 82 Linux swap / Solaris</span><br><span class="line">/dev/vdb2       33556480 209715199 176158720  84G  5 Extended</span><br><span class="line">/dev/vdb5       33558528  75501567  41943040  20G 83 Linux</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 1 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment"># 新建分区</span></span><br><span class="line">All space <span class="keyword">for</span> primary partitions is <span class="keyword">in</span> use.     <span class="comment"># fdisk提示目前所有空间都被主分区使用了</span></span><br><span class="line">Adding logical partition 6                      <span class="comment"># 所以在拓展分区中添加逻辑分区</span></span><br><span class="line">First sector (75503616-209715199, default 75503616):    <span class="comment"># 直接回车使用默认起始扇区</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (75503616-209715199, default 209715199): <span class="comment"># 直接回车使用默认结束扇区，使用所有剩余空间新建分区</span></span><br><span class="line"></span><br><span class="line">Created a new partition 6 of <span class="built_in">type</span> <span class="string">&#x27;Linux&#x27;</span> and of size 64 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p     <span class="comment"># 查看当前分区表</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot    Start       End   Sectors Size Id Type</span><br><span class="line">/dev/vdb1           2048  33556479  33554432  16G 82 Linux swap / Solaris</span><br><span class="line">/dev/vdb2       33556480 209715199 176158720  84G  5 Extended</span><br><span class="line">/dev/vdb5       33558528  75501567  41943040  20G 83 Linux</span><br><span class="line">/dev/vdb6       75503616 209715199 134211584  64G 83 Linux</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 1 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w     <span class="comment"># (write)写入改动，使得分区表生效</span></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><p>退出后使用<code>fdisk -l</code>查看分区结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">❯ fdisk -l</span><br><span class="line">Disk /dev/vda: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x13be70fb</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/vda1  *     2048 41940991 41938944  20G 83 Linux</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot    Start       End   Sectors Size Id Type</span><br><span class="line">/dev/vdb1           2048  33556479  33554432  16G 82 Linux swap / Solaris</span><br><span class="line">/dev/vdb2       33556480 209715199 176158720  84G  5 Extended</span><br><span class="line">/dev/vdb5       33558528  75501567  41943040  20G 83 Linux</span><br><span class="line">/dev/vdb6       75503616 209715199 134211584  64G 83 Linux</span><br></pre></td></tr></table></figure><p>使用 lsblk 查看块硬件信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❯ lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    252:0    0   20G  0 disk </span><br><span class="line">└─vda1 252:1    0   20G  0 part /</span><br><span class="line">vdb    252:16   0  100G  0 disk </span><br><span class="line">├─vdb1 252:17   0   16G  0 part [SWAP]</span><br><span class="line">├─vdb2 252:18   0    1K  0 part </span><br><span class="line">├─vdb5 252:21   0   20G  0 part </span><br><span class="line">└─vdb6 252:22   0   64G  0 part</span><br></pre></td></tr></table></figure><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><h4 id="swap-分区"><a href="#swap-分区" class="headerlink" title="swap 分区"></a>swap 分区</h4><p>格式化 swap 分区可以使用 mkswap。这里需要注意的是，swap 分区需要在分区的时候给分区 ID 注册为 82，这样在系统启动的时候才可以正常挂载分区为 swap（具体步骤在 <a href="#%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%89%E7%AB%A0%E8%8A%82">分区</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ mkswap /dev/vdb1  <span class="comment"># 格式化为 swap</span></span><br><span class="line">Setting up swapspace version 1, size = 16 GiB (17179865088 bytes)</span><br><span class="line">no label, UUID=220e512a-12a9-4a92-9668-24268004d8ab</span><br><span class="line">❯ swapon /dev/vdb1  <span class="comment"># 启用 swap 分区</span></span><br><span class="line">❯ free -h  <span class="comment"># 查看 swap 启用情况</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          1.8Gi       652Mi       201Mi       2.0Mi       1.0Gi       1.0Gi</span><br><span class="line">Swap:          15Gi          0B        15Gi</span><br></pre></td></tr></table></figure><p>swapon 是手动执行挂载 swap 的操作，关机重启会丢失挂载，所以我们还需要将挂载 swap 的操作添加到开机挂载目录的流程中。使用编辑器编辑<code>/etc/fstab</code>，加入下面这行内容即可，当然，开头的设备文件映射符要换成实际的设备映射符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ vim /etc/fstab  <span class="comment"># 添加下面这行</span></span><br><span class="line">/dev/vdb1  swap  swap  defaults  0  0</span><br></pre></td></tr></table></figure><h4 id="x2F-var-和-x2F-home-等数据分区"><a href="#x2F-var-和-x2F-home-等数据分区" class="headerlink" title="&#x2F;var 和&#x2F;home 等数据分区"></a>&#x2F;var 和&#x2F;home 等数据分区</h4><p>将 &#x2F;dev&#x2F;vdb5 和 &#x2F;dev&#x2F;vdb6 格式化为 ext4 格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">❯ mkfs.ext4 /dev/vdb5</span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Creating filesystem with 5242880 4k blocks and 1310720 inodes</span><br><span class="line">Filesystem UUID: 0d80f6eb-ac15-4bdf-8e03-d97508495618</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">    4096000</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span>   </span><br><span class="line"></span><br><span class="line">❯ mkfs.ext4 /dev/vdb6</span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Creating filesystem with 16776448 4k blocks and 4194304 inodes</span><br><span class="line">Filesystem UUID: 3fbc870d-3f3a-4182-86c2-690bcf1273b5</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">    4096000, 7962624, 11239424</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (65536 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span>   </span><br></pre></td></tr></table></figure><h4 id="转移数据和挂载"><a href="#转移数据和挂载" class="headerlink" title="转移数据和挂载"></a>转移数据和挂载</h4><p>将 &#x2F;dev&#x2F;vdb6 挂载到 &#x2F;mnt&#x2F;tmp 下，使用 rsync 同步 &#x2F;home 目录下内容到 vdb6 中。<br>rsync 据说是可以代替 cp 和 mv 指令的，具体使用情况可以看看 <a href="https://www.ruanyifeng.com/blog/2020/08/rsync.html">阮一峰的 rsync 教程</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">mkdir</span> /mnt/tmp                   <span class="comment"># 创建临时目录</span></span><br><span class="line">❯ mount /dev/vdb6 /mnt/tmp         <span class="comment"># 挂载 vdb6</span></span><br><span class="line">❯ rsync -ax /home/* /mnt/tmp       <span class="comment"># 同步文件</span></span><br><span class="line">❯ <span class="built_in">rm</span> -rf /home/*                   <span class="comment"># 删除原始目录下的文件</span></span><br><span class="line">❯ mount /dev/vdb6 /home            <span class="comment"># 将 vdb6 挂载到/home 上</span></span><br><span class="line">❯ umount /mnt/tmp                  <span class="comment"># 卸载临时目录的挂载</span></span><br><span class="line">❯ <span class="built_in">ls</span> /home                         <span class="comment"># 使用 ls 查看文件情况</span></span><br><span class="line">docker  download  go  lost+found  scripts</span><br></pre></td></tr></table></figure><p>可以看到，文件已经转移过来了，但是多了一个 <code>lost+found</code> 目录，这是因为在格式化分区时自动生成的目录，这次是新增的磁盘分区，所以无需理会直接删掉即可。</p><p>之后还需要将分区挂载流程像 swap 一样加入到&#x2F;etc&#x2F;fstab 文件中，使得开机自动挂载。</p><p>先使用 blkid 获取到每个分区的 id。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ blkid</span><br><span class="line">/dev/vda1: LABEL=<span class="string">&quot;/&quot;</span> UUID=<span class="string">&quot;abf381e7-98ce-491f-85d5-f16aa9b23811&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;13be70fb-01&quot;</span></span><br><span class="line">/dev/vdb1: UUID=<span class="string">&quot;220e512a-12a9-4a92-9668-24268004d8ab&quot;</span> TYPE=<span class="string">&quot;swap&quot;</span> PARTUUID=<span class="string">&quot;2681d385-01&quot;</span></span><br><span class="line">/dev/vdb5: UUID=<span class="string">&quot;0d80f6eb-ac15-4bdf-8e03-d97508495618&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;2681d385-05&quot;</span></span><br><span class="line">/dev/vdb6: UUID=<span class="string">&quot;3fbc870d-3f3a-4182-86c2-690bcf1273b5&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;2681d385-06&quot;</span></span><br></pre></td></tr></table></figure><p>像我这里因为是用 &#x2F;dev&#x2F;vdb6 挂载到 &#x2F;home，所以 UUID 是<code>3fbc870d-3f3a-4182-86c2-690bcf1273b5</code>，获取到了 UUID 之后，在&#x2F;etc&#x2F;fstab 添加下面一行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ vim /etc/fstab</span><br><span class="line">UUID=3fbc870d-3f3a-4182-86c2-690bcf1273b5 /home           ext4    defaults      0       2</span><br></pre></td></tr></table></figure><p>接着如法炮制 &#x2F;dev&#x2F;vdb5 挂载到 &#x2F;var 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ mount /dev/vdb5 /mnt/tmp</span><br><span class="line">❯ rsync -ax /var/* /mnt/tmp</span><br><span class="line">❯ <span class="built_in">rm</span> -rf /var/*</span><br><span class="line">❯ mount /dev/vdb5 /var</span><br><span class="line">❯ blkid</span><br><span class="line">/dev/vda1: LABEL=<span class="string">&quot;/&quot;</span> UUID=<span class="string">&quot;abf381e7-98ce-491f-85d5-f16aa9b23811&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;13be70fb-01&quot;</span></span><br><span class="line">/dev/vdb1: UUID=<span class="string">&quot;220e512a-12a9-4a92-9668-24268004d8ab&quot;</span> TYPE=<span class="string">&quot;swap&quot;</span> PARTUUID=<span class="string">&quot;2681d385-01&quot;</span></span><br><span class="line">/dev/vdb5: UUID=<span class="string">&quot;0d80f6eb-ac15-4bdf-8e03-d97508495618&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;2681d385-05&quot;</span></span><br><span class="line">/dev/vdb6: UUID=<span class="string">&quot;3fbc870d-3f3a-4182-86c2-690bcf1273b5&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;2681d385-06&quot;</span></span><br><span class="line">❯ vim /etc/fstab</span><br><span class="line">UUID=0d80f6eb-ac15-4bdf-8e03-d97508495618 /var           ext4    defaults      0       2</span><br></pre></td></tr></table></figure><p>最后，使用 df 查看，一切目录挂载占用正常即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">df</span> -hT</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">udev           devtmpfs  914M     0  914M   0% /dev</span><br><span class="line">tmpfs          tmpfs     189M  1.2M  188M   1% /run</span><br><span class="line">/dev/vda1      ext4       20G  7.1G   12G  38% /</span><br><span class="line">tmpfs          tmpfs     943M     0  943M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs          tmpfs     943M     0  943M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs          tmpfs     189M  4.0K  189M   1% /run/user/0</span><br><span class="line">/dev/vdb6      ext4       63G  5.9G   54G  10% /home</span><br><span class="line">/dev/vdb5      ext4       20G  6.9G   12G  37% /var</span><br></pre></td></tr></table></figure><h3 id="x2F-etc-x2F-fstab-文件填写要素"><a href="#x2F-etc-x2F-fstab-文件填写要素" class="headerlink" title="&#x2F;etc&#x2F;fstab 文件填写要素"></a>&#x2F;etc&#x2F;fstab 文件填写要素</h3><p>在编辑 fstab 的过程中对每个参数的意义产生了疑惑，所以查找了一些资料并且总结一下：</p><p>例如下面这条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=3fbc870d-3f3a-4182-86c2-690bcf1273b5  /home  ext4  defaults  0  2</span><br></pre></td></tr></table></figure><p>我们从 fstab 的文件的头部注释中可以获取到一些信息，例如第一个参数是能够代表挂载点的硬件文件系统，第二个是挂载点，第三个是硬件分区类型，第四个是挂载选项，但是还是很难明确最后两个数字的意义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># /etc/fstab: static file system information.</span><br><span class="line"># </span><br><span class="line"># Use &#x27;blkid&#x27; to print the universally unique identifier for a</span><br><span class="line"># device; this may be used with UUID= as a more robust way to name devices</span><br><span class="line"># that works even if disks are added and removed. See fstab(5).</span><br><span class="line">#</span><br><span class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line"># / was on /dev/vda1 during installation</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对于六个参数的意义的明确：</p><ol><li><p>设备</p><blockquote><p>意义：要挂载的设备<br>输入类型：</p><ul><li>设备文件</li><li>LABEL&#x3D;</li><li>UUID&#x3D;</li></ul></blockquote></li><li><p>挂载点</p><blockquote><p>swap 没有挂载点，挂载点为 swap<br>其余可以填写为目录名称，例如&#x2F;home</p></blockquote></li><li><p>文件系统类型</p><blockquote><p>ext2、ext3、ext4、xfs、nfs、smb、iso9660 等</p></blockquote></li><li><p>挂载选项</p><blockquote><p>async、sync、_netdev<br>defaults（ rw,  suid, dev, exec, auto, nouser, async, and relatime.）</p></blockquote></li><li><p>转储频度</p><blockquote><p>0：从不备份<br>1：每日备份<br>2：每隔一天备份</p></blockquote></li><li><p>自检次序</p><blockquote><p>0: 不自检<br>1：首先自检，通常只能被&#x2F;使用；<br>2：等数字为 1 的自检完成后，再进行自检</p></blockquote></li></ol><hr><p>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/5c12289dbcd1">简书 - Ubuntu 挂载新硬盘并把 home 目录迁移到新硬盘</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 磁盘扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose搭建nextcloud+Nginx+MySQL+Redis</title>
      <link href="/2021/04/08/nextcloud-on-docker/"/>
      <url>/2021/04/08/nextcloud-on-docker/</url>
      
        <content type="html"><![CDATA[<p>需要配置可以直接跳到<a href="/2021/04/08/nextcloud-on-docker/#docker-compose%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">docker-compose</a></p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年使用闲置的阿里云小鸡给协会搭建了一个公用的网盘，采用的是nextcloud作为框架，选择nextcloud的原因主要是因为它可以使用docker进行部署，而且又是开源的，没有免费版、捐赠版或者企业版之类的版本区别，只要能够部署，那就能用。</p><p>之前部署的时候匆匆忙忙，单纯为了抓紧时间上线就赶鸭子上架，搭建了一个最简陋的docker版nextcloud，虽然用起来没有什么问题，但是每次自己访问都会感觉到性能捉急，想要改善一下现状，利用有限的硬件资源发挥最大的性能。</p><p>所以最近，挑了一个大家不咋使用的时间把网盘下线了一个星期，升级了网盘的部署方式和添加了一些功能。</p><h3 id="稍微带过一下安装docker的方法"><a href="#稍微带过一下安装docker的方法" class="headerlink" title="稍微带过一下安装docker的方法"></a>稍微带过一下安装docker的方法</h3><p>以Ubuntu 20.04为例，其他操作系统可以自行查找资料。</p><ul><li><p>首先是卸载原有的Docker。这里要讲一个题外话，就是docker在老版本中是叫做Docker的，新版就把大写D改为了小写的d。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove docker \</span><br><span class="line">              docker-engine \</span><br><span class="line">              docker.io \</span><br><span class="line">              containerd \</span><br><span class="line">              runc</span><br></pre></td></tr></table></figure></li><li><p>安装新Docker</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方脚本 使用阿里云源</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"><span class="comment"># 或国内daocloud源</span></span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure></li><li><p>而本文需要使用docker-compose，所以这里还要安装一下，也比较简单，执行脚本就行了。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Docker Compose 的当前稳定版本</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 下载 Docker Compose 的当前稳定版本</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 创建软链</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>  但是使用以上方法安装比较繁琐，也比较难以管理，所以我推荐使用python的pip安装。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 pip 安装 docker-compose</span></span><br><span class="line">sudo pip install docker-compose</span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></li></ul><h3 id="原有的单容器nextcloud搭建方法"><a href="#原有的单容器nextcloud搭建方法" class="headerlink" title="原有的单容器nextcloud搭建方法"></a>原有的单容器nextcloud搭建方法</h3><p>docker的优越性想必都比较清楚了，独立运维、即开即用、不影响原有环境等等。</p><p>如果本地机器性能比较高，并且使用的人数、压力都没有太大的话，那么使用nextcloud独立容器的安装就足够了。</p><p>nextcloud独立容器版本使用的是apache做web服务器，自带SQLite作为数据库，也算是够用。</p><p>下面给一下单容器安装nextcloud的运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name nextcloud \</span><br><span class="line">  -p 7788:80 \</span><br><span class="line">  -v ~/nextcloud:/var/www/html \</span><br><span class="line">  docker.io/nextcloud</span><br></pre></td></tr></table></figure><p>稍微解释一下这几个参数：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">run</span><span class="language-bash">                   <span class="comment"># 运行镜像创建容器示例，后面跟着创建容器参数</span></span></span><br><span class="line">-d                    <span class="comment"># 在后台运行</span></span><br><span class="line">--restart=always      <span class="comment"># 总是随着宿主机重启而启动</span></span><br><span class="line">--name nextcloud      <span class="comment"># 容器的名字，可以不用解释吧 </span></span><br><span class="line">-p <span class="number">7788</span>:<span class="number">80</span>            <span class="comment"># 将容器的80端口映射到宿主机的7788端口</span></span><br><span class="line">-v ~/nextcloud:/var/www/html  <span class="comment"># 将容器的/var/www/html映射到宿主机的~/nextcloud</span></span><br><span class="line">docker.io/nextcloud   <span class="comment"># 创建容器需要用到的镜像</span></span><br></pre></td></tr></table></figure><p>等待docker执行创建容器实例完成后，则可以通过<u><code>http://ip:7788</code></u>来访问nextcloud了。但是这不是本文的重点，本文的目标是一台<strong>满血的nextcloud</strong>。</p><hr><h2 id="所谓满血"><a href="#所谓满血" class="headerlink" title="所谓满血"></a>所谓满血</h2><p>自己搭建过nextcloud的人可能都知道，nextcloud不仅可以在默认配置下使用，还可以通过加入各种各样的底层组件来提高它运行的性能。</p><p>而这次搭建的这台nextcloud则是与单镜像搭建不同，采用了：</p><ol><li>fpm——fastCgi作为呈现层——版本的nextcloud</li><li>nginx作为前置反向代理服务器提供https安全</li><li>mysql&#x2F;mariadb作为数据库，提高数据可靠性以及读写性能</li><li>redis作为热点数据缓存服务器以及文件锁管理器</li></ol><p>通过加入这些组件可以提高在多用户处理场景时系统的处理能力。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>由于这个搭建思路并不是nextcloud官方提供的解决方案（本身也不应该官方去解决这种事情），所以需要自己配置多个容器并将其连接起来，使其之间可以互相访问和操作，运用每个组件的优势提高整体系统的性能。</p><p>本次一共会使用到以下几个镜像：</p><ol><li>mariadb（目前mysql都过渡到mariadb了）</li><li>redis</li><li>nextcloud:fpm</li><li>nginx</li></ol><p>建议提前挂代理通过<code>docker pull</code>来下载，以免搭建的时候还要去拉去镜像而占用过多时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置代理</span></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080 <span class="comment"># 前提是在1080端口运行了你自己配置的代理服务，不然的话建议使用国内的镜像源</span></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull mariadb redis nextcloud:fpm nginx</span><br></pre></td></tr></table></figure><p>更换镜像源可以看看这篇<a href="https://www.jianshu.com/p/405fe33b9032">Docker中国源 - 简书</a>。</p><p>其中需要明确一下每个容器在这一套系统中扮演的角色。</p><blockquote><p>nextcloud作为此次的主角，也就是主体业务（app），它在存取数据的时候是会用到数据库（db）和缓存（cache）系统的，那么可以得出nextcloud依赖于mysql和redis。</p></blockquote><blockquote><p>而mysql和redis之间各司其职，其中一个挂了不会影响到另一个，所以优先级相同，之间没有依赖关系。</p></blockquote><blockquote><p>nginx作为代理业务和用户之间沟通的主体，首先是需要业务（app）正常运行才能够正常提供它自己本身的服务，所以nginx依赖于nextcloud。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 依赖关系如下</span><br><span class="line">                     /-&gt; mysql</span><br><span class="line">nginx -&gt; nextcloud -|</span><br><span class="line">                     \-&gt; redis</span><br><span class="line"></span><br><span class="line"># 启动顺序则需要反过来</span><br><span class="line">redix&amp;mysql -&gt; nextcloud -&gt; nginx</span><br></pre></td></tr></table></figure><h3 id="docker-compose配置文件"><a href="#docker-compose配置文件" class="headerlink" title="docker-compose配置文件"></a>docker-compose配置文件</h3><p>docker-compose是一个代理用户去管理docker的一个工具，使用docker-compose.yml配置文件就可以系统、方便地部署多容器项目，因为我们这次搭建的nextcloud也是基于多容器的，所以使用docker-compose进行部署和调试以及重建最为方便。</p><p>完整的docker-compose配置参数文档可以参考下面的这个文档，讲的还是比较细致，推荐给要深入docker-compose的同学学习。</p><blockquote><p><a href="https://www.jianshu.com/p/2217cfed29d7">Docker Compose 配置文件详解 - 简书</a></p></blockquote><p>以下就是本文输出的docker-compose配置文件。</p><blockquote><p><strong>注：</strong>参数的解释会通过备注的形式写在配置中</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.4&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span> <span class="comment"># 这里只是给每个容器单独配置一个名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span> <span class="comment"># 具体的镜像名称，可以使用“:”指定镜像的版本</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span> <span class="comment"># 重启的选项，分为no、on-failure、on-failure:x、always、unless-stopped，具体可以自行搜索查看区别</span></span><br><span class="line">    <span class="attr">expose:</span> </span><br><span class="line">    <span class="comment"># expose仅将指定的端口暴露给links的容器，而不对宿主机开放。</span></span><br><span class="line">    <span class="comment"># 和ports的区别在于，ports可以映射宿主机别的端口到容器中。</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># volumes指的是将宿主机的路径映射到容器中的指定位置</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="comment"># environment可以对容器创建指定多个环境变量</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root_password</span> <span class="comment"># 这里配置root密码</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">MYSQL_USER=user_name</span> <span class="comment"># 这里配置一个非root账户给nextcloud使用</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=user_password</span> <span class="comment"># 这里配置上面那个账号的密码</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./cache:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="string">&#x27;redis_password&#x27;</span> <span class="comment"># 这里的redis_password换成你要配置的redis密码</span></span><br><span class="line">    <span class="comment"># command指的是启动容器后代替默认启动指令来启动服务的指令</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nextcloud:fpm</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/html:/var/www/html</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/data:/var/www/html/data</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/config:/var/www/html/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/custom_apps:/var/www/html/custom_apps</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">    <span class="comment"># links将容器与当前容器链接起来，以使得当前容器可以访问目标容器expose的端口</span></span><br><span class="line">    <span class="comment"># 格式为 容器的原名:映射到当前容器中的名称</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">db:db</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">cache:cache</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="comment"># 依赖的容器列表，只有这些容器都成功启动了，才会启动当前容器</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">cache</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">proxy:</span> <span class="comment"># 叫做proxy是因为是作为代理来提供服务</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># ports可将容器内的端口映射到宿主机上</span></span><br><span class="line">    <span class="comment"># 这里是将容器的443端口映射到宿主机的7788端口</span></span><br><span class="line">     <span class="bullet">-</span> <span class="number">7788</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/html:/var/www/html</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./proxy/conf.d:/etc/nginx/conf.d:ro</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./proxy/ssl_certs:/etc/nginx/ssl_certs:ro</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">app:app</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">app</span></span><br></pre></td></tr></table></figure><p>把这些内容保存到<code>docker-compose.yml</code>文件中，然后将其放置在某个文件夹中，例如<code>~/super_nextcloud/</code>，我们之后就在这个路径下做后续的操作。</p><h3 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h3><p>接着我们要准备一下nginx的配置。需要创建两个文件夹，一个是<code>./proxy/conf.d</code>，一个是<code>./proxy/ssl_certs</code>。<br>其中<code>conf.d</code>放置nginx的配置文件，可以起名叫做<code>nextcloud.conf</code>，<code>ssl_certs</code>放置域名对应的SSL证书的pem和key文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ./proxy/conf.d ./proxy/ssl_certs</span><br></pre></td></tr></table></figure><p>具体可以参考以下的配置来写nextcloud.conf，其中域名和SSL证书文件的名字需要替换成你自己的。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> php-handler &#123;</span><br><span class="line">    <span class="attribute">server</span> app:<span class="number">9000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> 这里填写自己的域名;</span><br><span class="line">    <span class="comment"># enforce https</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>:443<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> 这里填写自己的域名;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use Mozilla&#x27;s guidelines for SSL/TLS settings</span></span><br><span class="line">    <span class="comment"># https://mozilla.github.io/server-side-tls/ssl-config-generator/</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> some settings below might be redundant</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl_certs/这里填写SSL证书的名字.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl_certs/这里填写SSL证书的名字.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add headers to serve security related headers</span></span><br><span class="line">    <span class="comment"># Before enabling Strict-Transport-Security headers please read into this</span></span><br><span class="line">    <span class="comment"># topic first.</span></span><br><span class="line">    <span class="comment">#add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># WARNING: Only add the preload option once you read about</span></span><br><span class="line">    <span class="comment"># the consequences in https://hstspreload.org/. This option</span></span><br><span class="line">    <span class="comment"># will add the domain to a hardcoded list that is shipped</span></span><br><span class="line">    <span class="comment"># in all major browsers and getting removed from this list</span></span><br><span class="line">    <span class="comment"># could take several months.</span></span><br><span class="line">    <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">    <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Robots-Tag <span class="literal">none</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Download-Options noopen;</span><br><span class="line">    <span class="attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="literal">none</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Referrer-Policy <span class="literal">no</span>-referrer;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security  <span class="number">15552000</span>;</span><br><span class="line">    <span class="comment">#add_header X-Frame-Options SAMEORIGIN;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Remove X-Powered-By, which is an information leak</span></span><br><span class="line">    <span class="attribute">fastcgi_hide_header</span> X-Powered-By;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Path to the root of your installation</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class="line">    <span class="comment"># Uncomment it if you&#x27;re planning to use this app.</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following rule is only needed for the Social app.</span></span><br><span class="line">    <span class="comment"># Uncomment it if you&#x27;re planning to use this app.</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/webfinger /public.php?service=webfinger last;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> = /.well-known/carddav &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://<span class="variable">$host</span>:<span class="variable">$server_port</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> = /.well-known/caldav &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://<span class="variable">$host</span>:<span class="variable">$server_port</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set max upload size</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">512M</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffers</span> <span class="number">64</span> <span class="number">4K</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enable gzip but do not remove ETag headers</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line">    <span class="attribute">gzip_proxied</span> expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private no_last_modified no_etag auth;</span><br><span class="line">    <span class="attribute">gzip_types</span> application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class="line">    <span class="comment"># This module is currently not supported.</span></span><br><span class="line">    <span class="comment">#pagespeed off;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^\/(?:\.|autotest|occ|issue|indie|db_|console)</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/)</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+?\.php)(\/.*|)$</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> HTTPS <span class="literal">on</span>;</span><br><span class="line">        <span class="comment"># Avoid sending the security headers twice</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span> modHeadersAvailable <span class="literal">true</span>;</span><br><span class="line">        <span class="comment"># Enable pretty urls</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span> front_controller_active <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> php-handler;</span><br><span class="line">        <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">fastcgi_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^\/(?:updater|oc[ms]-provider)(?:$|\/)</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">        <span class="attribute">index</span> index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adding the cache control header for js, css and map files</span></span><br><span class="line">    <span class="comment"># Make sure it is BELOW the PHP block</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.(?:css|js|woff2?|svg|gif|map)$</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=15778463&quot;</span>;</span><br><span class="line">        <span class="comment"># Add headers to serve security related headers (It is intended to</span></span><br><span class="line">        <span class="comment"># have those duplicated to the ones above)</span></span><br><span class="line">        <span class="comment"># Before enabling Strict-Transport-Security headers please read into</span></span><br><span class="line">        <span class="comment"># this topic first.</span></span><br><span class="line">        <span class="comment">#add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># WARNING: Only add the preload option once you read about</span></span><br><span class="line">        <span class="comment"># the consequences in https://hstspreload.org/. This option</span></span><br><span class="line">        <span class="comment"># will add the domain to a hardcoded list that is shipped</span></span><br><span class="line">        <span class="comment"># in all major browsers and getting removed from this list</span></span><br><span class="line">        <span class="comment"># could take several months.</span></span><br><span class="line">        <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">        <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> X-Robots-Tag <span class="literal">none</span>;</span><br><span class="line">        <span class="attribute">add_header</span> X-Download-Options noopen;</span><br><span class="line">        <span class="attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="literal">none</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Referrer-Policy <span class="literal">no</span>-referrer;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to other assets</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>文件都准备好之后，文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">super_nextcloud</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── proxy</span><br><span class="line">    ├── conf.d</span><br><span class="line">    │   └── nextcloud.conf</span><br><span class="line">    └── ssl_certs</span><br><span class="line">        ├── SSL证书.key</span><br><span class="line">        └── SSL证书.pem</span><br></pre></td></tr></table></figure><h3 id="创建-amp-启动容器"><a href="#创建-amp-启动容器" class="headerlink" title="创建&amp;启动容器"></a>创建&amp;启动容器</h3><p>此时准备工作已经完成。使用docker-compose代理对docker的容器进行操作可以使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d    <span class="comment"># 创建所有容器并按顺序启动</span></span><br><span class="line">docker-compose down     <span class="comment"># 停止所有容器并删除</span></span><br><span class="line">docker-compose stop     <span class="comment"># 停止所有容器</span></span><br><span class="line">docker-compose start    <span class="comment"># 按顺序启动所有容器</span></span><br><span class="line">docker-compose restart  <span class="comment"># 停止所有容器并按顺序启动所有容器</span></span><br></pre></td></tr></table></figure><p>所以这里我们使用<code>docker-compose up -d</code>启动我们的服务。在docker-compose输出的提示中，所有目标都显示为<code>done</code>后，我们可以使用<code>netstat</code>查看nginx容器是否在监听7788端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ netstat -tnlp | grep 7788</span><br><span class="line">tcp6    0     0     :::7788     :::*    LISTEN    5155/docker-proxy</span><br></pre></td></tr></table></figure><p>如果没有输出，那就是创建容器有问题。可以通过<code>docker ps -a</code>查看哪些容器在疯狂重启，然后通过<code>docker logs [容器名or容器ID]</code>进到这个容器中查看容器服务日志，自行排障。</p><p>如果有输出，并且和上面的内容大致相同，那么恭喜你，构建已经成功大半了。</p><hr><h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><h4 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h4><p>从地址和端口进入站点，通常是https+域名+端口，如果是内网搭建并且不在意域名以及https的小锁头的话，则可以直接通过ip来访问，但是需要注意的是，在nginx中配置了特定域名后，它会检查访问时是否是正确的域名，如果不是正确的域名，那么就会拒绝访问网盘资源。</p><p>进入后，我们就需要进行网盘首次配置的一些操作，包括管理员的配置、数据库的配置、应用程序的配置等等。<br>其中需要注意的是，在数据库配置部分，数据库的地址需要填写我们在docker的links中映射marindb的主机名称，即<code>db</code>；而账号密码则是在配置数据库时制定的数据库用户密码以及数据库名称。</p><p>使用上一步配置好的管理员账号和密码登录网盘，点击头像进入设置，现将站点的参数配置好后再配置本账号的参数。</p><h4 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h4><p>由于在网站上线后，需要配置一系列安全参数，所以需要我们再次去修改一下Nginx的配置文件。</p><p>在<code>proxy/conf.d/nextcloud.conf</code>中找到这行（也就是上面那个nginx配置的41行），将前面的注释解开，然后重启nginx容器即可（也可以直接使用<code>docker-compose restart</code>重启整个项目）。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#add_header X-Frame-Options SAMEORIGIN;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要使用手机APP来访问的话，还需要将54 54 59行解开注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class="line"><span class="comment">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rewrite ^/.well-known/webfinger /public.php?service=webfinger last;</span></span><br></pre></td></tr></table></figure><h4 id="配置缓存"><a href="#配置缓存" class="headerlink" title="配置缓存"></a>配置缓存</h4><p>由于nextcloud默认使用的缓存机制是<code>APCu</code>，我们需要到配置中修改其使用Redis作为缓存。</p><p>将<code>app/config/config.php</code>中的内容按照如下方法改动：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x27;memcache.local&#x27; =&gt; &#x27;\\OC\\Memcache\\APCu&#x27; // 用本地式缓存使用APCu // 注释这行 </span></span><br><span class="line"><span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\Redis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;memcache.distributed&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\Redis&#x27;</span>, <span class="comment">// 分布式缓存使用Redis</span></span><br><span class="line"><span class="string">&#x27;memcache.locking&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\Redis&#x27;</span>, <span class="comment">// 启用Redis缓存的文件锁</span></span><br><span class="line"><span class="string">&#x27;redis&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;cache&#x27;</span>, <span class="comment">// 这里和mariadb的逻辑相同，填写容器links时映射的主机名</span></span><br><span class="line">  <span class="string">&#x27;port&#x27;</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">  <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;redis_password&#x27;</span> <span class="comment">// 这是之前在配置docker-compose时配置的redis密码</span></span><br><span class="line">),</span><br><span class="line"><span class="string">&#x27;filelocking.enabled&#x27;</span> =&gt; <span class="string">&#x27;true&#x27;</span>,</span><br></pre></td></tr></table></figure><p>使用以下命令进入nextcloud的docker容器，并将文件归属确认改为www-data：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [nextcloud容器的容器ID] /bin/bash</span><br><span class="line"><span class="comment"># 进入docker容器之后</span></span><br><span class="line"><span class="built_in">ls</span> -l /var/www/html/config/config.php</span><br><span class="line">-rw-r----- 1 www-data www-data 1646 Mar 30 07:27 /var/www/html/config/config.php</span><br><span class="line"><span class="comment"># 如果提示所有权不是www-data，那么就要改回www-data</span></span><br><span class="line"><span class="built_in">chown</span> www-data:www-data /var/www/html/config/config.php</span><br></pre></td></tr></table></figure><p>这时候再去访问nextcloud的页面，就是在使用redis做缓存了。</p><h4 id="配置cron定时任务"><a href="#配置cron定时任务" class="headerlink" title="配置cron定时任务"></a>配置cron定时任务</h4><p>由于nextcloud内部的文件和配置会在用户操作过程中产生变化，所以需要启用一个定时任务去定期整理和归档这些数据到数据库或者应用到配置中。</p><p>先确定自己的nextcloud容器的容器ID或者容器名字，可以使用<code>docker ps -a</code>查看。</p><p>然后使用<code>crontab -e</code>或<code>vim /etc/crontab</code>打开crontab的配置进行编辑，加入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># run nextcloud cron task every 5 min</span><br><span class="line">*/5 * * * * docker exec -u 33 [容器ID或容器名] php -f /var/www/html/cron.php 2&gt;&amp;1 /dev/null</span><br></pre></td></tr></table></figure><p>建议两个地方都加一次，避免配置不生效。</p><hr><p>至此，站点的基本内容已经配置完毕，可以满足个人用于网盘、webdav等使用场景了。</p><h3 id="手动安装拓展"><a href="#手动安装拓展" class="headerlink" title="手动安装拓展"></a>手动安装拓展</h3><p>nextcloud另一个吸引人的地方就是可以安装很多拓展，但是由于nextcloud是从github上安装<strong>拓展</strong>，国内的网络连接github又有许许多多的<strong>困难</strong>，所以直接在页面上点击安装按钮是绝对会报cURL的错的。</p><p>所以我想出了一个曲线救国的方法，虽然比直接点击安装要多了几步，但着实可行，实施起来也没有什么阻碍。（反倒是之前为了实现直接点页面安装而各种配置代理浪费了不少时间，而且还有搞不出来…）</p><p>手动安装拓展程序的步骤大致可以分为下面几个步骤：</p><ol><li>确保当前客户机环境可通过代理访问github；</li><li>进入nextcloud的应用页面，找到自己想装的拓展应用；</li><li>点击想要安装的应用展开详情，进入“访问网站”链接，此时一般会去到插件的<strong>github页面</strong>或者<strong>nextcloud官方发布插件页面</strong>；</li><li>进入github项目的release页面，下载最新的插件更新版本到当前本机。按照nextcloud的插件发布标准应该是一个<code>tar.gz</code>文件；</li><li>将下载下来的文件从nextcloud个人文件页面上传到网盘中；</li><li>进入nextcloud容器。<code>docker exec -u 33 -it [container ID or container name] /bin/bash</code>，其中[container ID or container name]要换成真实容器的ID或名字；</li><li>到路径下找到自己上传的拓展插件。例如<code>/var/www/html/data/[username]/files/nextcloud_extension/metadata.tar.gz</code>，其中[username]要换成用户的名字。这里装的是matadata插件，用于查看图片各种元数据的；</li><li>将其复制到<code>/var/www/html/apps</code>。<code>cp /var/www/html/data/[username]/files/nextcloud_extension/metadata.tar.gz /var/www/html/apps</code>；</li><li>解压后删除源压缩文件<code>cd /var/www/html/apps &amp;&amp; tar -xzf metadata.tar.gz &amp;&amp; rm metadata.tar.gz</code>；</li><li>进入nextcloud页面的【应用】-【已禁用的应用】页面，将其启用。</li></ol><p>按照以上步骤来操作就可以做到实现手动安装插件的目的了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经历了这次搭建网盘，算是初级入门了docker容器的部署，以及docker-compose的配置入门。</p><p>只能说，在开始一个项目之前，还有许多东西需要实现考虑和准备好，做好缺陷预防。这样在真正上手做的时候，才会尽可能的少出差错，以及处变不惊。</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>原版后记：本来以为这个网盘搭好之后可以养老地给自己和协会使用几年，结果最近阿里云发了续费通知，上去一看发现之前的轻量级应用服务器学生机已经不在学生优惠计划中了（只剩下了一个OSS，基本没啥用），续费一年得1k多，所以只能另寻他处或者项目搁浅了，哎。。</p></blockquote><p>后来的后来，在迁移原项目到阿里云的按量付费 ECS 后，自购了扩容云磁盘，并做了<a href="/2021/08/26/record-a-disk-expansion-on-alicloud-ubuntu/">扩容的记录</a>，感兴趣的同学也可以看看。</p><h2 id="更新-2022-10-23"><a href="#更新-2022-10-23" class="headerlink" title="更新 2022.10.23"></a>更新 2022.10.23</h2><p>更新了使用 docker-compose 组织的 nextcloud 与 aria2 配合实现的离线下载方案。<br>前往链接：<a href="/2022/10/23/nextcloud-with-aria2-on-docker/">基于docker的nextcloud+aria2离线下载联动解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
          <category> 计算机协会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机协会 </tag>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> nextcloud&#39; </tag>
            
            <tag> mysql </tag>
            
            <tag> nginx </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K2P代理MAN端设备上网</title>
      <link href="/2021/04/06/route-by-modem/"/>
      <url>/2021/04/06/route-by-modem/</url>
      
        <content type="html"><![CDATA[<p>近日入坑了pt站点，并在NAS上新增了一个12T的希捷银河氦气盘，在闲暇之余下载一些大包刷刷上传量之外，总是逮着喜欢的资源就肆无忌惮的下载（上传量能刷得很快哈哈哈），不得不说，pt站的资源确实是优质，和普罗大众共用的bt确实不同，种子资源、做种量根本都是不能比拟的。</p><p>然而随之而来的问题就是，优质的资源它总得要播放才能看才能听吧？而播放过程中某个环节出了问题，则会影响整体的观感体验，没错，我就遇到了。</p><h2 id="原有网络拓扑"><a href="#原有网络拓扑" class="headerlink" title="原有网络拓扑"></a>原有网络拓扑</h2><p>下载的资源大多都是1080P、2K、4K的视频格式文件，而后两者大多还是蓝光原盘的ios或者是BDMV包，1080P的视频一两个小时可以从2G到10多G不等，而到了2K、4K级别的资源，少说也是一个多小时得有个20G到80G不等，这样就对NAS这种网络存储设备使用场景产生一定的考验，或者说是整条网络链路质量的考验。</p><p>现在手上的涉及到这一套基于网络的播放、网络设备就这么几个，电信给的普通光猫，K2P，蜗牛星际A款，小米电视E55A。</p><p>为啥要说是普通光猫呢？因为它就是最典型的单千兆+三百兆配置，其中千兆桥接出来给K2P拨号上网代理家庭网络上网，其他接口暂时没有使用。</p><p>K2P这么一款经典的全千兆良心路由器就没有什么好多说的了，刷了padavan（老毛子），更新了hiboy的v5驱动版本。而作为经典矿渣的蜗牛，我的这个蜗牛星际A款是第一批上的车，里头还是原装绿色主板，J1900，16G内存，单千兆网口，刷了黑群晖6.1.7（DS3617xs）。</p><p>小米电视和K2P之间使用5G wifi连接，使用小米自带的测速功能，测试与公网之间的速度可以达到20MB&#x2F;S，算是还行的程度，但是尚未知电视和NAS之间的速度，并且公网与内网之间的差别还有延迟等各种问题，以及延迟对小量数据的随机读取的影响等等。</p><p>总览一下，原来的网络拓扑如下图所示：</p><p><img src="/../img/NAS/route-by-modem-origin-topo.png" alt="原有网络拓扑"></p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>基于以上这一套网络拓扑，在通过小米电视观看1080P视频文件的时候就还好，而如果是观看2K以上清晰度视频的时候，就会出现播放一会，就要转圈圈读取一会的情况，频率大概是<strong>10s</strong>一次，非常影响观影体验。遇到这种情况，就算不是强迫症，也会想要去改善一番。</p><p>在尝试过将蓝光原盘拷贝到U盘中插入电视进行本地播放，并且非常顺畅之后，基本上就确认问题出现在视频文件数据传输到电视上这个环节了。</p><p>而影响视频文件从NAS通过wifi传输到电视上速度的因素也有很多，比如硬盘读速度、NAS到路由器的传输速率、路由器到电视之间的wifi传输速率、路由器各网口之间的交换速率，都有可能影响，所以我又开始了漫漫的排错之路。</p><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>在排错的策略上，我采取的是由易到难的顺序进行的。每个环节按照排错难易度来排序，以我个人的理解，可以排成下面这样：</p><ol><li>路由器到NAS（或者其他有线连接的终端）</li><li>路由器网口之间的交换性能</li><li>NAS中的硬盘读取速度</li><li>路由器通过wifi到电视（这基本没法测，因为电视的操作系统没法进入后台，只能直接放电影来观察现象）</li></ol><h3 id="路由器到NAS"><a href="#路由器到NAS" class="headerlink" title="路由器到NAS"></a>路由器到NAS</h3><p>测试链路带宽质量，最方便也最普适的方法应该就是iperf了吧。</p><p>Padavan虽说是华硕自家的系统，但是也内置了opkg，opkg是一个开源的包管理系统，是<code>Open PacKaGe management</code>的缩写。直接进入K2P的后台使用opkg安装iperf3即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install iperf3</span><br><span class="line"><span class="comment"># 这里需要注意的是，安装的路径是在tmpfs中的，也就是内存盘</span></span><br><span class="line"><span class="comment"># 所以重启会丢失安装的内容，以避免闪存被占满</span></span><br></pre></td></tr></table></figure><p>而在群晖上使用iperf3就更加简单了。只需要从docker套件中，安装iperf3的镜像，然后在配置容器的时候按照iperf3的语法规则配置启动命令即可。附上一个张大妈的参考文章：</p><blockquote><p><a href="https://post.smzdm.com/p/ag89wxk7/">如何快速测试网卡性能——群晖Docker 安装使用Iperf3教程 - 什么值得买</a></p></blockquote><p>运行iperf3。iperf3和iperf相同，有服务端和客户端两种运行模式，在测试的时候需要自己确定哪个设备是服务端，哪个设备是客户端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端启动</span></span><br><span class="line">iperf3 -s</span><br><span class="line"><span class="comment"># 客户端启动</span></span><br><span class="line">iperf3 -c [服务端IP]</span><br><span class="line"><span class="comment"># 其他更多选项，典型的也就下面这些</span></span><br><span class="line">iperf3 -c [服务端IP] -l 1024M -t 60 -i 5 -P 4 -u</span><br><span class="line"><span class="comment"># -l length   代表每个buffer的长度，可以跟kKmM单位</span></span><br><span class="line"><span class="comment"># -t time     是测试的总共时长，单位是秒</span></span><br><span class="line"><span class="comment"># -i interval 是每次测试发起的时间间隔</span></span><br><span class="line"><span class="comment"># -P parallel 并行数，一般写1或者CPU核心数</span></span><br><span class="line"><span class="comment"># -u udp      使用UDP进行测试，一般指定UDP之后客户端的带宽测试结果会大很多，两到三倍不等。</span></span><br><span class="line">iperf3 --<span class="built_in">help</span> <span class="comment"># 查询其他命令使用方法</span></span><br></pre></td></tr></table></figure><p>测试之后，只能说，很遗憾，问题也不是出在路由器到NAS之间的链路上。</p><h3 id="路由器网口之间的交换性能"><a href="#路由器网口之间的交换性能" class="headerlink" title="路由器网口之间的交换性能"></a>路由器网口之间的交换性能</h3><p>由于每个厂商的路由器设计不同，每个网口的工作行为虽然在用户侧看来是相同的，但是在内部实现上却是不同的。</p><p>例如大部分家用路由器只需要支持单WAN口，+N个LAN口的工作模式，这时候路由器厂商在设计时，是在CPU后方接一个带网管的交换机，通过不同的vLAN来区分WAN、LAN、DMZ等。在这种设计模式下，同属于LAN区域或者DMZ区域的流量会直接经过交换机里头的交换芯片，而不通过CPU，这样交换效率就会比较高。</p><p>而另一些工业级、企业级的路由器上，由于需要满足自定义网口配置（例如多WAN口、自定义WAN口、自定义vLAN等），这时候则可能将路由器内部实现为每个网口都是一个独立的网卡，每个网卡都直接接通CPU，在配置LAN区是某几个网口时，CPU会在系统内建立一个虚拟网卡（例如eth0）去桥接每个需要绑定在LAN区的网口（例如ge0、ge3、ge4），将其上的流量在CPU上模拟出来的交换机（虚拟网卡）上进行交换。在这种设计模式下，由于没有硬件交换机芯片，交换机功能是通过CPU模拟出来的，这时候同区域的网络流量的交换在经过CPU的时候就会产生性能的损失。</p><p>基于这种情况，所以需要看看是否是这一环节出了问题。为了排查这个影响因素，我还去专门买了一个USB3.0转2.5G RJ45口的网卡【捂脸】。</p><p>结果一顿操作猛如虎，一测，路由器到电脑有线连接跑iperf3可以跑满千兆，NAS到电脑中间经过路由器有线连接跑iperf3还是可以跑满千兆。</p><p>哦豁，这一波，白亏一个USB网卡。</p><h3 id="NAS中的硬盘读取速度"><a href="#NAS中的硬盘读取速度" class="headerlink" title="NAS中的硬盘读取速度"></a>NAS中的硬盘读取速度</h3><p>由于具备了上面的条件，就可以直接通过电脑拷贝NAS上的文件到本地来测试NAS上硬盘的读取速度了。</p><p>拷贝一个3G的文件到本地，速度可以维持在100到130MB&#x2F;S之间，这样的速度测试，反正看下来也是没啥问题，千兆极限妥妥的。</p><blockquote><p>一个题外话，使用windows电脑就可以跑满速度，而使用mac就跑不满，估计这mac系统也有问题，mmp…</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>到了这里，大概可以确定问题就出现在数据到达电视的“最后一公里”——接入网络的介质——上了。</p><p>本来是想着换一个牛批一点的路由器比如华硕AC86U或者小米AX3600这种以通过高功率wifi信号传输更大的带宽稳定性到电视。但是经过仔细分析，K2P原先号称千元最强不仅仅是因为它性价比、0元薅、全千兆，更是因为K2P的wifi信号的强大。有大佬拆机分析之后发现，K2P的硬件系统，对2.4G和5G wifi模块都有各自独立的功放，我的一个朋友甚至说在一楼都能收到K2P在6楼发出的信号，连上之后还能上网，不可谓牛哉。所以，在当下有如此强大的无线信号下，还是有这样的问题，那么通过更换路由器来改善网络的程度是非常不确定的。</p><p>放弃了走无线的思路后，我把目光转向了有线连接。但是再来看看这个难顶的网络拓扑结构和户型图：</p><p><img src="/../img/NAS/route-by-modem-origin-topo.png" alt="网络拓扑&amp;户型图"></p><p>在这样的户型结构下，光猫啥的还可以放在电视柜后面或者弱电箱中，而想要把K2P挪到客厅几乎是不可能的，因为客厅还有猫（真·猫，一只豹猫，一只橘猫，一只英短），把路由器搞挂了那就是真的挂了，毕竟影响到全家的上网。</p><p>那么现在只能寄希望于光猫。光猫除了一个千兆（LAN）口桥接给到K2P做PPPoE之外，还有三个百兆口。其中一个绑定了IPTV的vlan没法改（也不是没法改，就是怕改了出问题），剩下两个可以用于光猫的LAN区域。</p><p>电视接入光猫剩余的两个网口，此时对于光猫的LAN端和K2P的WAN端以及电视的网口之间，组成了一个无外网权限，也无K2P内网权限的局域网，或者可以说是城域网（MAN）。以下是对MAN城域网的一些定义：</p><blockquote><p><a href="https://zh.wikipedia.org/zh-hans/%E5%9F%8E%E5%9F%9F%E7%BD%91">wikipedia</a><br>都会网域（Metropolitan Area Network，MAN）指大型的计算机网络，属于IEEE802.6标准，是介于LAN和WAN之间能传输语音与资料的公用网络。MAN是改进LAN（局域网）中的传输介质，扩大局域网的范围，达到包含一个大学校园、城市或都会区。它是较大型的局域网，需要的成本较高，但可以提供更快的传输速率。例如：某一家企业把在一个城市或同一国家内的服务据点连接起来，就可以称为一个或多个城域网。一些常用于城市区网的技术包括：以太网（10Gbps&#x2F;100Gbps）、WiMAX（全球互通微波访问）。</p><p><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=199086&extra=page=1&page=1&mobile=no">PPPoE协议和MAN访问 这个是什么东西? - 恩山</a><br>BYFAN:</p><blockquote><p>man是一个网络工程术语，全称是Metropolitan Area Network，意思是城域网，指大型的计算机网络，属于IEEE802.6标准，是介于LAN和WAN之间能传输语音与数据的公用网络。<br>光猫会给你分配一个光猫的IP，然后你的路由PPPOE拨号会拿到运营商给你的外网IP<br>man网关是光猫分配的地址。</p></blockquote></blockquote><p>在组成WAN和LAN之间的中间网络MAN城域网之后，此时就形成了同网段下，电视需要使用K2P做网关，也就是熟知的旁路由场景，但是这个旁路由又有那么点不一样。</p><p><img src="/../img/NAS/route-by-modem-new-topo.png" alt="现在的网络拓扑成了这样"></p><p>既然说这个旁路由不那么一样，那它究竟不一样在哪里呢？</p><blockquote><p>传统旁路由并非是接入广域网的最后一关，而是旁路由自身还有一个指向的网关，用于旁路由的流量的下一跳，而旁路由自己则负责同网段内其他设备流量的加密解密以及各种转发策略等。</p></blockquote><ol><li>K2P要充当拨号上网的总网关来代理它自己LAN端的流量上网。</li><li>K2P要参与MAN端的组网，充当MAN端的旁路由代理电视流量上网以及访问K2P的LAN端设备（NAS）。</li></ol><p>所以说K2P一个设备既要做流量出口，又要做旁路由，这就给K2P的配置带来了一些纠结。K2P在刷了Padavan后，是有做AP的功能的，也就是可以在这个模式下用于做旁路由，但又要K2P运行pppd来拨号上网，那么又需要它运行在网关模式下。</p><p>本着优先不影响环境上网的原则，K2P是肯定要配置在网关模式下拨号上网的。基于这个原则，就开始折腾了。</p><h2 id="配置思路-amp-方法"><a href="#配置思路-amp-方法" class="headerlink" title="配置思路&amp;方法"></a>配置思路&amp;方法</h2><p><strong>注：以下提及的MAN、WAN、LAN都是从K2P的角度来讨论的。</strong></p><h3 id="MAN端需要访问LAN端"><a href="#MAN端需要访问LAN端" class="headerlink" title="MAN端需要访问LAN端"></a>MAN端需要访问LAN端</h3><p><strong>需求：</strong></p><blockquote><p>MAN端需要访问LAN端设备。<br>MAN端网段为192.168.1.0&#x2F;24，而LAN端网段为192.168.2.0&#x2F;24，需要满足192.168.1.4&#x2F;24之间192.168.2.65&#x2F;24互访。</p></blockquote><p><strong>思路：</strong></p><p>实现电视可以访问NAS，总体思路就无非以下几点，电视访问NAS的请求可以正确到达K2P，而K2P又能正确转发请求到NAS，并且反向可通。</p><p>其一，请求可达网关。这一点由于电视和K2P都属于MAN网段，即同一个广播域，电视发出的请求自然可以到达K2P，但是为了不被光猫转发到它的外部（因为我们不知道光猫外部的网络环境是什么样的），则需要手动指派发往LAN端的流量到K2P，也就是配置一个静态路由。</p><p>其二，K2P能够转发MAN端的流量到LAN端。这一点则需要手动放通防火墙规则，因为在默认情况下，路由器固件编写者是不会放通MAN到LAN的转发的，这样的场景实在是少之又少。而我们做的放通，也并非是完全放通，而是仅针对MAN端地址进行放通，因为我们不知道运营商PPPoE给到K2P的网段中是否有图谋不轨的人，对同网段进行端口扫描或者网络扫描等不良行为。毕竟安全大过天。</p><p><strong>配置步骤：</strong></p><p>光猫配置静态路由将MAN端（192.168.1.0&#x2F;24）中目的地址为LAN端（192.168.2.0&#x2F;24）的流量定向转发到K2P。</p><blockquote><ol><li>使用光猫的运营商管理员账号登录光猫后台，像电信的运营商管理员账号为<code>telecomadmin</code>，密码或者其他的运营商可以去网上搜索。</li><li>进入用户侧网络配置 - 静态路由配置</li><li>添加静态路由：</li></ol></blockquote><blockquote><table><thead><tr><th align="left">目的地址</th><th align="left">下一跳地址</th><th align="center">网络接口</th></tr></thead><tbody><tr><td align="left">192.168.2.65&#x2F;24<br>（NAS）</td><td align="left">192.168.1.2&#x2F;24<br>（K2P）</td><td align="center">LAN<br>（这里的LAN代表光猫的LAN，就是K2P的MAN）</td></tr><tr><td align="left">192.168.2.1&#x2F;24<br>（K2P - LAN IP）</td><td align="left">192.168.1.2&#x2F;24<br>（K2P - MAN IP）</td><td align="center">LAN</td></tr></tbody></table></blockquote><p>配置K2P开放MAN端到LAN端流量的转发</p><blockquote><p>在Padavan的自定义设置 - 脚本配置中 - <code>在防火墙规则启动后执行:</code>中添加以下iptables规则：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 放通FORWARD放通K2P的流量转发，可让电视访问nas</span></span><br><span class="line">iptables -A FORWARD -s 192.168.1.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="代理MAN端设备上网"><a href="#代理MAN端设备上网" class="headerlink" title="代理MAN端设备上网"></a>代理MAN端设备上网</h3><p><strong>需求：</strong></p><blockquote><p>K2P要代理MAN端设备上网。<br>MAN端设备需要配置网关和DNS为K2P地址。</p></blockquote><p><strong>思路：</strong></p><p>基于这个需求，可以看出MAN端设备的请求不仅需要能够被K2P转发，还需要能够进入K2P。为什么要进入K2P呢？因为：</p><ol><li>需要使用K2P作DNS服务器，也就是请求K2P本身的服务。</li><li>需要通过K2P代理上网。</li></ol><blockquote><p>这里明确一下，请求被转发和被代理是不同的概念，转发是将请求报文原封不动地再发出去，而代理则是将请求报文中的源地址从原来真实的地址换成自身的地址之后，再发出去，以起到“代理”的作用。<br>这里的<u><strong>能够进入</strong></u>，指的就是请求进到K2P中，被K2P接收之后处理完成后再发出去。在这个场景中就是我们常说的NAT——网络地址转换——也是一种代理方式。</p></blockquote><p>明确了以上的定义之后，也就明确了，为什么需要满足流量可以进入K2P了。</p><p><strong>配置步骤：</strong></p><p>有了上面光猫的配置之后，我们就只需要配置电视和K2P即可。</p><blockquote><p>电视配置以下网络参数：</p><table><thead><tr><th align="right">键</th><th align="left">值</th></tr></thead><tbody><tr><td align="right">IP</td><td align="left">192.168.1.4</td></tr><tr><td align="right">掩码</td><td align="left">255.255.255.0</td></tr><tr><td align="right">网关</td><td align="left">192.168.2.1<br>或者是<br>192.168.1.2</td></tr><tr><td align="right">DNS</td><td align="left">192.168.2.1</td></tr></tbody></table></blockquote><p>K2P还是在Padavan的自定义设置 - 脚本配置中 - <code>在防火墙规则启动后执行:</code>中添加以下iptables规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 放通INPUT 和OUTPUT 可以让MAN端的电视访问K2P做DNS代理</span></span><br><span class="line">iptables -A INPUT -s 192.168.1.0/24 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -s 192.168.1.0/24 -j ACCEPT</span><br><span class="line"><span class="comment">## 配置SNAT可以让K2P正确代理MAN端终端的流量</span></span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o ppp0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>至此，已经全部实现MAN端的电视可以访问LAN端的NAS以及通过K2P代理上网了。并且访问NAS播放蓝光原盘也可以没有卡顿得播放了。所以说这一套操作还是对了的。</p><h2 id="后记-amp-展望"><a href="#后记-amp-展望" class="headerlink" title="后记&amp;展望"></a>后记&amp;展望</h2><p>需求被满足了，但是新的需求永远都会产生。例如如果说我以后需要在K2P的LAN端网络中添加一个旁路由用于代理全网流量出国留学，那么就只需要配置电视的网关为旁路由的IP即可，而不是需要配置更多的参数。</p><p>所以说这一套方案实际上是已经考虑到了未来的拓展性的。</p><p>而另外一个因素，还记得前面说的电视通过wifi进行广域网测速可以跑到20M&#x2F;S吧？20MB&#x2F;S，也就是200Mbps（二百兆比特每秒）而接入光猫的接口只有100Mbps（百兆比特每秒），带宽整整小了一半。但是文件播放的顺畅程度却提高了，所以可以断言，影响NAS上文件的播放的因素不仅仅只是带宽，更多的可能是时延和抖动。</p><p>如果我采取了将K2P挪到客厅，将电视连接到K2P的LAN端的方案，将来添加旁路由的时候又需要在K2P上插一个设备，而在宠物猫眼底下多添加一个设备就是多一份危险。当然，除去使用交换机的场景（我认为家里的网络设备规模还打不到使用交换机的地步哈哈哈）。</p><p>如果有大佬朋友也有这样的需求，又正好看到了我的这个记录，那么在看到有纰漏的地方，请指出，感谢！</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K2P </tag>
            
            <tag> iptables </tag>
            
            <tag> network </tag>
            
            <tag> MAN </tag>
            
            <tag> modem </tag>
            
            <tag> 网络 </tag>
            
            <tag> 城域网 </tag>
            
            <tag> 光猫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO博客实现多端同步</title>
      <link href="/2020/06/30/hexo-all-files-sync-by-github/"/>
      <url>/2020/06/30/hexo-all-files-sync-by-github/</url>
      
        <content type="html"><![CDATA[<p>马上要去入职了，难免要碰到换电脑或者是在多台设备上写博文的场景。<br>就比如在家要用台式机，在出租屋要用笔记本，在公司要用公司的台式机，Hexo又是基于静态的pages，没有typecho那样可以在线写博文的后台系统，所以今天就把MacBook上的Hexo源文件做了多端同步。</p><p>本博文仅作记录。</p><h2 id="源文件同步"><a href="#源文件同步" class="headerlink" title="源文件同步"></a>源文件同步</h2><p>在博客源文件目录生成git配置和与github远端关联。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 仓库链接</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;设置同步&quot;</span></span><br><span class="line">git push --set-upstream origin master  <span class="comment"># 以后就可以直接git push了</span></span><br></pre></td></tr></table></figure><p>这里我用了另一个仓库做博客源文件存放地，因为如果使用另一个分支来存放的话，难免有命令输错的时候，比如<code>git push origin hexo</code>不小心顺手打成<code>git push</code>或者<code>git push origin master</code>（这都是有可能的，毕竟这些都是熟手操作了），这样子就全盘覆灭。再者就是在github被微软收购之后，每个帐号下的仓库个数已经没有限制了（private仓库也一样），所以这样做更安全，更方便。</p><p>还有一点是Hexo在创建博客之初即为支持git仓库同步，最好的证据就是在博客根目录下有一个<code>.gitignore</code>文件用于非必须文件的忽略。</p><h2 id="第三方主题同步"><a href="#第三方主题同步" class="headerlink" title="第三方主题同步"></a>第三方主题同步</h2><p>我用的主题是<a href="https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/">Melody</a>，采用了Hexo的data files特性，只用在<code>source/_data/melody.yml</code>中对主题配置进行改动，而不用改动主题本身文件，所以支持主题平滑升级，具体可以直接到melody官方文档里看看。</p><p>因为修改主题配置无需改动文件，已经升级主题只需要在主题目录中<code>git pull</code>即可，这样索性就讲主题设置为git仓库的一个submodule即可。无需像其他的主题一样要fork一份主题文件到自己的账号下。</p><p>首先删除原来的melody主题文件（这里无需担心出问题，因为还会下回来），然后以submodule的形式将melody的文件下载到主题路径下即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf theme/melody</span><br><span class="line">git submodule add https://github.com/Molunerfinn/hexo-theme-melody themes/melody</span><br></pre></td></tr></table></figure><p>等待它下好即可重新使用博客。以下命令测试一下能不能用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo g; hexo s</span><br><span class="line"><span class="comment"># 然后浏览器登录 http://127.0.0.1:4000 查看结果</span></span><br></pre></td></tr></table></figure><hr><h2 id="在新的机器上配置博客环境"><a href="#在新的机器上配置博客环境" class="headerlink" title="在新的机器上配置博客环境"></a>在新的机器上配置博客环境</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p><strong>MacOS</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node  <span class="comment"># 高版本node.js自带npm</span></span><br></pre></td></tr></table></figure><p><strong>Linux</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p><strong>Windows</strong><br>前往<a href="https://nodejs.org/zh-cn/">Mode.js</a>官网下载安装包安装。</p><p><strong>可选操作：npm换源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org  <span class="comment"># 更换淘宝源</span></span><br></pre></td></tr></table></figure><h3 id="搭建Hexo环境"><a href="#搭建Hexo环境" class="headerlink" title="搭建Hexo环境"></a>搭建Hexo环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g  <span class="comment"># 安装hexo脚手架</span></span><br></pre></td></tr></table></figure><h3 id="克隆仓库和同步主题子模块"><a href="#克隆仓库和同步主题子模块" class="headerlink" title="克隆仓库和同步主题子模块"></a>克隆仓库和同步主题子模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 仓库链接 dir_name  <span class="comment"># 克隆本仓库</span></span><br><span class="line"><span class="built_in">cd</span> dir_name</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h3 id="安装Hexo配置和主题所需依赖"><a href="#安装Hexo配置和主题所需依赖" class="headerlink" title="安装Hexo配置和主题所需依赖"></a>安装Hexo配置和主题所需依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在博客目录下运行</span></span><br><span class="line">npm i  <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><h3 id="每次写完博客同步到仓库"><a href="#每次写完博客同步到仓库" class="headerlink" title="每次写完博客同步到仓库"></a>每次写完博客同步到仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;新增XXX文章&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><hr><p>这样即可完成博客在多个终端中的同步问题了。<br>当然，这篇博文就是在家里头的台式机上写好并部署、同步到github上的~<br>美汁汁</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决MacOS上mail.app自动弹出的另一种办法</title>
      <link href="/2019/10/25/solve-mac-mail-pop-up-bug/"/>
      <url>/2019/10/25/solve-mac-mail-pop-up-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-发现问题"><a href="#0x00-发现问题" class="headerlink" title="0x00 发现问题"></a>0x00 发现问题</h2><p>因为平时都使用mac自带的mail.app来对邮箱进行管理，所以使用习惯基本就是不会关闭，最多是用command+W暂时的关闭窗口。<br>但是最近出现了一个问题：正常关闭mail的窗口之后，会时不时自动弹出mail的窗口；如果是在桌面还好，如果是正在全屏使用软件，突然被mail弹出占用半个屏幕，那可太难受了。</p><h2 id="0x01-初步解决方法"><a href="#0x01-初步解决方法" class="headerlink" title="0x01 初步解决方法"></a>0x01 初步解决方法</h2><p>在逛v2ex的时候看到一位仁兄提到使用command+H来隐藏窗口，通过这样“关闭”的mail窗口就不会自动弹出，测试之后发现的确不会弹出来。此事到此就告一段落，但是…</p><h2 id="0x02-符合习惯的终极解决方法"><a href="#0x02-符合习惯的终极解决方法" class="headerlink" title="0x02 符合习惯的终极解决方法"></a>0x02 符合习惯的终极解决方法</h2><p>在习惯中，其他软件都是使用command+W来关闭窗口，只有mail是用command+H来关闭，有时候总是记不住，还是手贱使用了command+W，这样一来，还是时常会被“半屏”打扰。</p><p>今天闲来无事，看了一下mac上快捷键修改的问题，这一看就发现了转机。</p><p>下面教程正式开始：</p><ol><li> &gt; System Preference &gt; Keyboard &gt; Shortcuts &gt; App shortcuts</li><li>点击加号添加一个新的选项</li><li>输入配置如下：<blockquote><p>Application: Mail.app &#x2F;&#x2F; 列表中手动选择<br>Menu Title: Hide Mail &#x2F;&#x2F; mail中顶栏菜单中的实际操作名称<br>Keyboard Shortcut: ⌘W &#x2F;&#x2F; 直接在键盘使用command+W就可以设定了</p></blockquote></li><li>点击add</li><li>关闭 System Preference</li><li>重新启动 Mail.app（其实关闭没必要，过一会就会改过来）</li></ol><p>现在就能开心的使用command+W来“关闭”mail的窗口也不会被“半屏”打扰到啦~</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> mail.app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记-206.反转链表</title>
      <link href="/2019/09/07/leetcode-206-reverseList/"/>
      <url>/2019/09/07/leetcode-206-reverseList/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>反转一个单链表。</p><p>示例:</p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote><p>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>来源：<a href="https://leetcode-cn.com/problems/reverse-linked-list">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">register</span> ListNode *prev = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">register</span> ListNode* curr = head;</span><br><span class="line">        <span class="keyword">register</span> ListNode* temp;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            temp = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 16 ms, 在所有 C++ 提交中击败了53.05%的用户<br>内存消耗 : 9.2 MB, 在所有 C++ 提交中击败了28.08%的用户</p></blockquote><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* p = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 12 ms, 在所有 C++ 提交中击败了85.51%的用户<br>内存消耗 : 9.1 MB, 在所有 C++ 提交中击败了47.27%的用户</p></blockquote><p>这个递归法有点意思，看了很久才赚过弯来。<br>在读代码+一步步画图解析之后，终于明白了其中的原理。<br>一行一行的讲解吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br></pre></td></tr></table></figure><p>第一行是每个递归都需要的开始返回的条件。<br>第一个条件<code>head == NULL</code> 是处理<code>[]</code>这样的链表的特殊条件，并且在第二个条件<code>head-&gt;next == NULL</code>之前进行运算是为了防止在<code>[]</code>这样的空链表中运行<code>head-&gt;next</code>导致内存访问错误。<br>第二个条件是正常的递归跳出。搭配第2句、第5句就可以将尾节点不断的往上层调用栈返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListNode* p = <span class="built_in">reverseList</span>(head-&gt;next);</span><br></pre></td></tr></table></figure><p>使用一个临时指针将第一句返回的尾节点存起来，以便最后返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head-&gt;next-&gt;next = head;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>这两句要一起看，我们先来看看每一次递归调用栈运行的时候链表的情况吧，以链表<code>[1,2,3,4,null]</code>为例。n在那个节点下面就代表那个节点的next指向null，h代表head指向，p代表临时指针p指向（最后返回的p也是这个）。</p><p>初始状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1-&gt;2-&gt;3-&gt;4</span><br><span class="line">         n</span><br></pre></td></tr></table></figure><p>第3层调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      h  p</span><br><span class="line">1-&gt;2-&gt;3&lt;-4</span><br><span class="line">      n</span><br></pre></td></tr></table></figure><p>第2层调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   h     p</span><br><span class="line">1-&gt;2&lt;-3&lt;-4</span><br><span class="line">   n</span><br></pre></td></tr></table></figure><p>第1层调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h        p</span><br><span class="line">1&lt;-2&lt;-3&lt;-4</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p>可以看出在head指向的那个节点处运算过后就会将后一个节点的next指向本节点，以此往复就会将整条链表都换向。<br>而将本节点的next指向null我觉得是加强算法完整性来做的，因为是一个函数自己递归，所以要保证最后返回的链表最后一个节点要指向null，所以需要这一步。<br>可以看出p指针永远都是指向尾节点，并且一层一层的往上返回，感觉这一点设计很巧妙就是了。</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++模板类多文件编译 无定义 解决办法</title>
      <link href="/2019/09/07/C-template-multi-files-compile/"/>
      <url>/2019/09/07/C-template-multi-files-compile/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-实现模板类"><a href="#0x01-实现模板类" class="headerlink" title="0x01 实现模板类"></a>0x01 实现模板类</h2><p>通常在C&#x2F;C++中实现一个类，都是将声明放在.h文件中，将定义（实现）放在.c或者.cpp文件中，例如：</p><h3 id="通常示例多文件编译"><a href="#通常示例多文件编译" class="headerlink" title="通常示例多文件编译"></a>通常示例多文件编译</h3><p>myClass.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_CLASS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_CLASS_H</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myClass</span>();</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>myClass.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myClass.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">myClass::<span class="built_in">myClass</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>myClass.main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myClass.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">myClass <span class="title">mClass</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译的时候直接运行makefile或者执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g++ -c myClass.cpp</span><br><span class="line">g++ -c myClass.main.cpp</span><br><span class="line">g++ myClass.o myClass.main.o -o main</span><br><span class="line">./main</span><br></pre></td></tr></table></figure><p>就可以运行了。这在没有设计模板类的时候一切都会很顺利，但是只要涉及到了模板类就…</p><h3 id="模板类多文件遇到的问题"><a href="#模板类多文件遇到的问题" class="headerlink" title="模板类多文件遇到的问题"></a>模板类多文件遇到的问题</h3><p>就拿一个循环队列来举例子吧。</p><p>cycleQueue.hpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CYCLE_QUEUE_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CYCLE_QUEUE_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cycleQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> front;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tail;</span><br><span class="line">    T* data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">cycleQueue</span>(<span class="type">unsigned</span> <span class="type">int</span> nsize);</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>cycleQueue.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cycleQueue.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">cycleQueue&lt;T&gt;::<span class="built_in">cycleQueue</span>(<span class="type">unsigned</span> <span class="type">int</span> nsize)</span><br><span class="line">    :<span class="built_in">size</span>(nsize + <span class="number">1</span>),</span><br><span class="line">    <span class="built_in">front</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">tail</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">int</span> cycleQueue&lt;T&gt;::<span class="built_in">length</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len = (<span class="type">int</span>)tail - (<span class="type">int</span>)front;</span><br><span class="line">    <span class="keyword">return</span> len &gt;= <span class="number">0</span> ? len : -len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cycleQueue.main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cycleQueue.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">cycleQueue&lt;<span class="type">int</span>&gt; <span class="title">queue</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照常理，正常使用g++编译即可生成main可执行文件，但是在执行最后一步链接的时候会出现问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -c cycleQueue.cpp</span><br><span class="line">$ g++ -c cycleQueue.main.cpp</span><br><span class="line">$ g++ cycleQueue.o cycleQueue.main.o -o main</span><br><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::isFull()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::length()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::deQueue()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::enQueue(int)&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::isEmpty()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::cycleQueue(unsigned int)&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::~cycleQueue()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br></pre></td></tr></table></figure><p>可以看到，单独编译实现代码的时候是可以通过的，但是在两个文件链接起来的时候出现了问题。经过查找资料，貌似是因为实现文件中实现的是<code>cycleQueue&lt;T&gt;</code>这个类型，但是main中使用了<code>cycleQueue&lt;int&gt;</code>这个类型，所以编译器找不到这个类型的定义。</p><p>想了想，这好办啊，只要把实现的定义也加进去就好了呀。</p><p>于是乎，cycleQueue.hpp就成了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CYCLE_QUEUE_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CYCLE_QUEUE_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cycleQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cycleQueue.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>而为了解决include重复问题，cycleQueue.cpp也变成了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CYCLE_QUEUE_CPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CYCLE_QUEUE_CPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cycleQueue.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>于是乎，搭配makefile就可以快速实现编译了</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">cycleQueue: cycleQueue.o cycleQueue.main.o</span></span><br><span class="line">    g++ cycleQueue.o cycleQueue.main.o -o cycleQueue</span><br><span class="line">    make clean</span><br><span class="line"></span><br><span class="line"><span class="section">cycleQueue.o: cycleQueue.cpp</span></span><br><span class="line">    g++ -c cycleQueue.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">cycleQueue.main.o: cycleQueue.main.cpp</span></span><br><span class="line">    g++ -c cycleQueue.main.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm *.o</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -la</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x  6 chenke  staff  192 Sep  7 13:50 .</span><br><span class="line">drwxr-xr-x  3 chenke  staff   96 Sep  7 14:10 ..</span><br><span class="line">-rw-r--r--  1 chenke  staff  956 Sep  7 13:40 cycleQueue.cpp</span><br><span class="line">-rw-r--r--  1 chenke  staff  403 Sep  7 13:32 cycleQueue.hpp</span><br><span class="line">-rw-r--r--  1 chenke  staff  695 Sep  7 13:43 cycleQueue.main.cpp</span><br><span class="line">-rw-r--r--  1 chenke  staff  242 Sep  7 13:01 makefile</span><br><span class="line"></span><br><span class="line">$ make</span><br><span class="line">g++ -c cycleQueue.cpp</span><br><span class="line">g++ -c cycleQueue.main.cpp</span><br><span class="line">g++ cycleQueue.o cycleQueue.main.o -o cycleQueue</span><br><span class="line">make clean</span><br><span class="line"><span class="built_in">rm</span> *.o</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> -la</span><br><span class="line">total 80</span><br><span class="line">drwxr-xr-x  7 chenke  staff    224 Sep  7 14:12 .</span><br><span class="line">drwxr-xr-x  3 chenke  staff     96 Sep  7 14:10 ..</span><br><span class="line">-rwxr-xr-x  1 chenke  staff  20512 Sep  7 14:12 cycleQueue</span><br><span class="line">-rw-r--r--  1 chenke  staff    956 Sep  7 13:40 cycleQueue.cpp</span><br><span class="line">-rw-r--r--  1 chenke  staff    403 Sep  7 13:32 cycleQueue.hpp</span><br><span class="line">-rw-r--r--  1 chenke  staff    695 Sep  7 13:43 cycleQueue.main.cpp</span><br><span class="line">-rw-r--r--  1 chenke  staff    242 Sep  7 13:01 makefile</span><br></pre></td></tr></table></figure><hr><p>一顿操作猛如虎23333</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> template </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记-557.反转字符串中的单词III</title>
      <link href="/2019/09/07/leetcode-557-reverseWord/"/>
      <url>/2019/09/07/leetcode-557-reverseWord/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p>示例 1:</p><p>输入: “Let’s take LeetCode contest”<br>输出: “s’teL ekat edoCteeL tsetnoc”</p><p>来源：<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题以另一题作为基础，就是上一篇<a href="https://hexo.chensmallx.top/2019/09/06/leetcode-344-reverseString/">leetcode题记-344.反转字符串</a>。</p><p>这里要注意的就是，这是一个“双指针法”，在运行的过程中会有一个头指针固定，尾指针不断向前移动，遇到空格即为头指针和尾指针之间为一个单词，对这个单词进行反转即可。而使用的交换算法是反转字符串中最快速的异或交换法，实际上还是一个双指针法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(<span class="type">int</span> front, <span class="type">int</span> tail, string&amp; str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (front &lt; tail) &#123;</span><br><span class="line">            str[front] ^= str[tail];</span><br><span class="line">            str[tail] ^= str[front];</span><br><span class="line">            str[front++] ^= str[tail--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> front = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">reverseString</span>(front, i - <span class="number">1</span>, s);</span><br><span class="line">                front = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverseString</span>(front, s.<span class="built_in">length</span>() - <span class="number">1</span>, s);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 : 16 ms, 在所有 C++ 提交中击败了98.24%的用户<br>内存消耗 : 11.6 MB, 在所有 C++ 提交中击败了95.48%的用户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记-344.反转字符串</title>
      <link href="/2019/09/06/leetcode-344-reverseString/"/>
      <url>/2019/09/06/leetcode-344-reverseString/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例 1：</p><blockquote><p>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p></blockquote><p>示例 2：</p><blockquote><p>输入：[“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/reverse-string">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="解法一（辣鸡解法）直接下标交换"><a href="#解法一（辣鸡解法）直接下标交换" class="headerlink" title="解法一（辣鸡解法）直接下标交换"></a>解法一（辣鸡解法）直接下标交换</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> length = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            c = s[i];</span><br><span class="line">            s[i] = s[length - <span class="number">1</span> - i];</span><br><span class="line">            s[length - <span class="number">1</span> - i] = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 72 ms, 在所有 C++ 提交中击败了54.97%的用户<br>内存消耗 : 15.2 MB, 在所有 C++ 提交中击败了79.02%的用户</p></blockquote><h3 id="解法二-双指针法"><a href="#解法二-双指针法" class="headerlink" title="解法二 双指针法"></a>解法二 双指针法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">char</span>&amp; x, <span class="type">char</span>&amp; y)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> c = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">            i++, j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 64 ms, 在所有 C++ 提交中击败了85.40%的用户<br>内存消耗 : 15.1 MB, 在所有 C++ 提交中击败了90.38%的用户</p></blockquote><p>双指针的确比直接诶计算下标快了不少，毕竟在算加减的时候双指针法只用了两个基本的加减，而直接计算下标（算上改变i）则需要5此加减法，消耗了两倍多的计算量。</p><h3 id="优化的双指针"><a href="#优化的双指针" class="headerlink" title="优化的双指针"></a>优化的双指针</h3><h4 id="优化一-C-swap"><a href="#优化一-C-swap" class="headerlink" title="优化一 C++ swap"></a>优化一 C++ swap</h4><p>这里使用了c++自带的<code>swap()</code>函数，在底层上应该是有改进的，并且在使用的时候将自增运算运用得淋漓尽致，于是乎又加快了不少。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i++], s[j--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 60 ms, 在所有 C++ 提交中击败了94.45%的用户<br>内存消耗 : 15 MB, 在所有 C++ 提交中击败了94.68%的用户</p></blockquote><h4 id="优化二-位运算"><a href="#优化二-位运算" class="headerlink" title="优化二 位运算"></a>优化二 位运算</h4><p>这算是奇技淫巧的一种了，就是两个变量来回异或就可以交换数据，而且是从bit层面进行运算的，可以说是速度特别的快了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            s[i] ^= s[j];</span><br><span class="line">            s[j] ^= s[i];</span><br><span class="line">            s[i++] ^= s[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 52 ms, 在所有 C++ 提交中击败了99.76%的用户<br>内存消耗 : 15.3 MB, 在所有 C++ 提交中击败了75.25%的用户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 292.Nim游戏</title>
      <link href="/2019/09/05/leetcode-292-canWinNum/"/>
      <url>/2019/09/05/leetcode-292-canWinNum/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。</p><p>你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p><p>示例:</p><blockquote><p>输入: 4<br>输出: false<br>解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；<br>因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/nim-game">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>刚开始看到这道题的难度为“简单”，我怀疑了一下，甚至无从下手。</p><p>看到题解的时候才发现，这是一个数学推理题，或者说是一道小学生做的“找规律”题目。</p><p>在条件中，有一个关键点——你作为先手。这一点重要在于之后的推理都有一个前提。</p><p>Leetcode 官方题解：</p><blockquote><p>如果石头堆中只有一块、两块、或是三块石头，那么在你的回合，你就可以把全部石子拿走，从而在游戏中取胜。而如果就像题目描述那样，堆中恰好有四块石头，你就会失败。因为在这种情况下不管你取走多少石头，总会为你的对手留下几块，使得他可以在游戏中打败你。因此，要想获胜，在你的回合中，必须避免石头堆中的石子数为 4 的情况。</p><p>同样地，如果有五块、六块、或是七块石头，你可以控制自己拿取的石头数，总是恰好给你的对手留下四块石头，使他输掉这场比赛。但是如果石头堆里有八块石头，你就不可避免地会输掉，因为不管你从一堆石头中挑出一块、两块还是三块，你的对手都可以选择三块、两块或一块，以确保在再一次轮到你的时候，你会面对四块石头。</p></blockquote><p>看看 ooolize 的回答中的表格：</p><blockquote><table><thead><tr><th>who\times</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>…</th></tr></thead><tbody><tr><td>us</td><td>√</td><td>√</td><td>√</td><td>×</td><td>√</td><td>√</td><td>√</td><td>×</td><td>√</td><td>···</td></tr><tr><td>enemy</td><td>×</td><td>×</td><td>×</td><td>√</td><td>×</td><td>×</td><td>×</td><td>√</td><td>×</td><td>···</td></tr></tbody></table></blockquote><p>所以说，想要获胜，那就必须使得存在的石子数量不为4的倍数。既然获得了这一步重要的推理结论，那么代码就不是问题了。</p><h3 id="模4法"><a href="#模4法" class="headerlink" title="模4法"></a>模4法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canWinNim</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果:</p><p>其实是会在0~8ms之间浮动的，所以不够稳定的算法，leetcode的判定机状况对结果会有影响。</p><blockquote><p>执行用时 : 0 ms, 在所有 C++ 提交中击败了100.00%的用户<br>内存消耗 : 8 MB, 在所有 C++ 提交中击败了52.50%的用户</p></blockquote><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>算法题做着做着就有点丢了初心了。算法题归根结底还是数学题，问题还是要从数学的角度出发去解决，而找规律就是数学上最基本的一种解题思路。基础多了高大上的算法之后，拿到一道题脑海里面冒出来的思路很少就是很简单的解法了。</p><p>只能说，千里之行始于足下，好吧。</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记-46.全排列</title>
      <link href="/2019/08/22/leetcode-46-permute/"/>
      <url>/2019/08/22/leetcode-46-permute/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p><p>示例:</p><blockquote><p>输入: [1,2,3]<br>输出:[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/permutations">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>解这道题主要用了通过递归实现回溯的办法。<br>在处理数组的过程中，先确定当前正在遍历的位，例如第一位，那么就将每一位和第一位互换，然后在下一个递归过程中将第二位和其他数字依次替换，这样的过程和人类的思维几乎一样。</p><p>具体可以看这个<a href="https://leetcode-cn.com/problems/permutations/solution/quan-pai-lie-by-leetcode/">leetcode 官方题解</a>，讲的还是很具体的，还有动图可以看。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[<span class="number">0</span>]&#125;);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">process</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> front)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == nums.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(nums);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = front; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; _nums = nums;</span><br><span class="line">            <span class="type">int</span> temp = _nums[front];</span><br><span class="line">            _nums[front] = _nums[i];</span><br><span class="line">            _nums[i] = temp;</span><br><span class="line">            <span class="built_in">process</span>(_nums, front + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 16 ms, 在所有 C++ 提交中击败了86.15%的用户<br>内存消耗 : 10.2 MB, 在所有 C++ 提交中击败了13.65%的用户</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记-1114.按序打印</title>
      <link href="/2019/08/21/leetcode-1114-Foo-Bar/"/>
      <url>/2019/08/21/leetcode-1114-Foo-Bar/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>我们提供了一个类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123; <span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123; <span class="built_in">print</span>(<span class="string">&quot;two&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">three</span><span class="params">()</span> </span>&#123; <span class="built_in">print</span>(<span class="string">&quot;three&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个不同的线程将会共用一个 Foo 实例。</p><p>线程 A 将会调用 <code>one()</code> 方法<br>线程 B 将会调用 <code>two()</code> 方法<br>线程 C 将会调用 <code>three()</code> 方法<br>请设计修改程序，以确保 <code>two()</code> 方法在 <code>one()</code> 方法之后被执行，<code>three()</code> 方法在 <code>two()</code> 方法之后被执行。</p><p>示例 1:</p><blockquote><p>输入: [1,2,3]<br>输出: “onetwothree”<br>解释:<br>有三个线程会被异步启动。<br>输入 [1,2,3] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 two() 方法，线程 C 将会调用 three() 方法。<br>正确的输出是 “onetwothree”。</p></blockquote><p>示例 2:</p><blockquote><p>输入: [1,3,2]<br>输出: “onetwothree”<br>解释:<br>输入 [1,3,2] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 three() 方法，线程 C 将会调用 two() 方法。<br>正确的输出是 “onetwothree”。</p></blockquote><p>注意:<br>尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。<br>你看到的输入格式主要是为了确保测试的全面性。</p><p>来源：<a href="https://leetcode-cn.com/problems/print-in-order">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>因为是第一次做多线程的题目，之前对操作系统的锁之类的东西也没有好好学，这次做下来这题（包括看了其他人的题解）也算是复习了以下多线程的基础。</p><h3 id="Naive"><a href="#Naive" class="headerlink" title="Naive"></a>Naive</h3><p>一开始并不知道锁要怎么实现（体现了我的菜），所以就用了几个bool和while实现了简单的阻塞（我并不知道线程的阻塞是怎么实现的），结果运行结果一出来就傻眼了（太菜了）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span>() &#123;</span><br><span class="line">        f = s = t = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// printFirst() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFirst</span>();</span><br><span class="line">        f = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!(f &amp;&amp; !s));</span><br><span class="line">        <span class="comment">// printSecond() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printSecond</span>();</span><br><span class="line">        s = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!(f &amp;&amp; s &amp;&amp; !t));</span><br><span class="line">        <span class="comment">// printThird() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printThird</span>();</span><br><span class="line">        t = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> f, s, t;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果1"><a href="#结果1" class="headerlink" title="结果1"></a>结果1</h4><p>执行用时 : 1484 ms, 在所有 C++ 提交中击败了5.01%的用户<br>内存消耗 : 9 MB, 在所有 C++ 提交中击败了100.00%的用户</p><p>当然我也不知道为啥我的占用总是超过了100%的人。</p><h3 id="Use-mutex"><a href="#Use-mutex" class="headerlink" title="Use mutex"></a>Use mutex</h3><p>看过了别人的题解之后，我发现了多数人用了<code>std::mutex</code>和<code>std::condition_variable</code>这两个库用于互斥锁的实现。因为mutex比较简单，所以就顺便学了以下（还不是因为太菜）。</p><p>先来看看 <code>std::mutex</code> 的介绍：</p><blockquote><ul><li><p>构造函数，std::mutex不允许拷贝构造，也不允许 move 拷贝，最初产生的 mutex 对象是处于 unlocked 状态的。</p></li><li><p>lock()，调用线程将锁住该互斥量。线程调用该函数会发生下面 3 种情况：</p><blockquote><ol><li>如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁。</li><li>如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住。</li><li>如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。</li></ol></blockquote></li><li><p>unlock()， 解锁，释放对互斥量的所有权。</p></li><li><p>try_lock()，尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞。线程调用该函数也会出现下面 3 种情况，(1). 如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量。(2). 如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。</p></li></ul><p>reference:<a href="https://www.cnblogs.com/haippy/p/3237213.html">C++11 并发指南三(std::mutex 详解)</a></p></blockquote><p>从用法中可以看出来，在互斥量被锁住的时候，线程执行lock()函数是会被阻塞的，只有在互斥量被unlock()之后，lock()函数才会被执行。所以可以通过设置两个互斥锁分别对second和third进行锁定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span>() &#123;</span><br><span class="line">        smx.<span class="built_in">lock</span>();</span><br><span class="line">        tmx.<span class="built_in">lock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// printFirst() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFirst</span>();</span><br><span class="line">        smx.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        smx.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="comment">// printSecond() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printSecond</span>();</span><br><span class="line">        tmx.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        tmx.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="comment">// printThird() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printThird</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex smx, tmx;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果2"><a href="#结果2" class="headerlink" title="结果2"></a>结果2</h4><p>执行用时 : 40 ms, 在所有 C++ 提交中击败了31.67%的用户<br>内存消耗 : 9.2 MB, 在所有 C++ 提交中击败了100.00%的用户</p><p>这次的结果就好了许多。</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode在MacOS下无法调试C/C++语言 查病 和 解决</title>
      <link href="/2019/08/07/vscode-debug-C-itermNternimal/"/>
      <url>/2019/08/07/vscode-debug-C-itermNternimal/</url>
      
        <content type="html"><![CDATA[<p>调试，是每个Coder必须要具备的能力，然而具备了能力却没有环境和工具的支持，那岂不是“巧妇难为无米之炊”？<br>我就遇上了这样“操蛋”的事情，事情是这样的，且容我慢慢道来。</p><span id="more"></span><h2 id="起因【笔试中无法调试0w0！"><a href="#起因【笔试中无法调试0w0！" class="headerlink" title="起因【笔试中无法调试0w0！"></a>起因【笔试中无法调试0w0！</h2><p>昨天，也就是大疆笔试，做三道算法题的时候，调试没法用了（其实是早就没法用了，只是一直没管）。然后就计划着做完笔试之后把这个事情搞定了，于是回到家就开始一直google查查查。</p><h2 id="怀疑一：gdb没有签名"><a href="#怀疑一：gdb没有签名" class="headerlink" title="怀疑一：gdb没有签名"></a>怀疑一：gdb没有签名</h2><p>这个问题可就是历史遗留问题了，Mac把gcc和g++链接到clang和clang++之后就能够感觉的出来，苹果对gnu这些东西不是很待见。</p><p>每次brew升级完gdb之后，gdb的代码签名就失效了，只好每次都重新应用签名。好在签名的命令还算简单:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb-code-sign keychain中gdb代码签名的名字</span></span><br><span class="line"><span class="comment"># /usr/local/bin/gdb gdb命令的软链接地址</span></span><br><span class="line">codesign -fs gdb-code-sign /usr/local/bin/gdb</span><br></pre></td></tr></table></figure><h3 id="生成签名证书"><a href="#生成签名证书" class="headerlink" title="生成签名证书"></a>生成签名证书</h3><p>不过还是要说说这个<code>gdb-code-sign</code>的这个certification要怎么generate出来。</p><p>运行Keychan Access.app，也就是钥匙串，这个东西管理了记录在系统中的所有钥匙，包括wifi密码，网络证书等等，只要有系统管理员的密码就可以随意查看（chrome里头记录的密码看不到，因为chrome不把它们记录在系统中，但是Safari的可以）。</p><p><img src="/../img/keychain.png" alt="Keychain Access.app"></p><p>选择 Keychain Access -&gt; Certificate Assistant -&gt; Create a Certifitate…，在名字处取一个自己能够分辨的名字，然后选择代码签名(Code sign)，在Mojave版本的MacOS中就只要点击确定两下就可以生成了。</p><p><img src="/../img/gdb-code-sign.png" alt="Create Certificate"></p><p>生成证书之后，讲生成的三个同名项目全都移到System目录下，分别是证书(Self-signed Certificate)、公钥(Public Key)和私钥(Private Key)。</p><p>接着双击生成的证书，将信任一栏改为任何时候都信任。</p><p><img src="/../img/gdb-code-sign-trust.png" alt="Trust the Certificate"></p><p>这时候就可以关闭Keychain了。</p><h3 id="给gdb应用签名"><a href="#给gdb应用签名" class="headerlink" title="给gdb应用签名"></a>给gdb应用签名</h3><p>接着打开终端，使用<code>sudo -i</code>进入root权限。</p><p>我一开始使用的是上面的那条命令，但是怎么都签不好，开始调试之后都显示(例如我调试一个叫做sleep的程序)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: /Users/chenke/Documents/ProgramerMaker/C:C++/C/test/sleep</span><br><span class="line">Unable to find Mach task port for process-id 65245: (os/kern) failure (0x5).</span><br><span class="line"> (please check gdb is codesigned - see taskgated(8))</span><br></pre></td></tr></table></figure><p>只好又去查。发现有两个解决办法：</p><ol><li>运行gdb的时候使用<code>sudo gdb xxx.out</code></li><li>在Mojave里头需要附加一个xml的配置文件，并且签名的命令也要做出一些改动。</li></ol><p>因为后面要给vscode用的调试器，总不能每次调试都输一次密码吧。所以不行，得一劳永逸。所以进行第二个解决办法。</p><p>将一个文件命名为gdb.xml或者别的什么都可以，然后写入下面的内容，然后保存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.debugger<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在本目录下，使用root权限，重新运行签名命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign --entitlements gdb.xml -fs gdb-code-sign /usr/local/bin/gdb</span><br></pre></td></tr></table></figure><p>签名完了之后，再运行gdb调试，这回就好了一些了，可以run，但是会卡住。。。显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: /Users/chenke/Documents/ProgramerMaker/C:C++/C/test/sleep</span><br><span class="line">[New Thread 0xd03 of process 65791]</span><br><span class="line">[New Thread 0xf03 of process 65791]</span><br></pre></td></tr></table></figure><p>如果gdb能用了，但是因为什么原因导致调试无法进行，这就很难受。所以就放弃gdb了…</p><h2 id="折腾lldb"><a href="#折腾lldb" class="headerlink" title="折腾lldb"></a>折腾lldb</h2><p>重新给lldb签名之后，发现lldb能用，而且跑的很欢块，并且很开心的一点就是，无论是用gcc还是clang，还是g++或是clang++编译的文件，都可以使用lldb调试，这也在之后的编译工具的选择上给出了多个选项。</p><h2 id="怀疑二：vscode没有配置好"><a href="#怀疑二：vscode没有配置好" class="headerlink" title="怀疑二：vscode没有配置好"></a>怀疑二：vscode没有配置好</h2><p>其实到了这里，我就有点虚了，因为配置文件一直都是一套的，不应该存在以前能用但是现在不能用的情况，毕竟微软的东西不能说不向后兼容吧- -！</p><p>经过一番查找之后，发现最新的配置文件版本已经到了2.0.0，而我还在用0.2.0，哈哈，所以说还是过时了【手动捂脸。不过怎么说，就算是过时，那也不应该让编译和运行出错呀。</p><p>经过了一番修改，终于将vscode的运行配置更新了一遍。C和C++两套配置因为要调用不同的编译器，编译命令也不同，所以得分成两块，C用gcc或者clang或者llvm-gcc来编译，C++用g++或者clang++或者llvm-g++来编译。</p><h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>经过这顿折腾，我也理解了一些其中的参数的意义所在，就比如：</p><ul><li>preLaunchTask</li></ul><blockquote><p>运行调试任务前需要运行的任务，这个任务要在tasks.json中配置，而这里填写的就是名字，或者标签等标识这个task用的属性。</p></blockquote><ul><li>program</li></ul><blockquote><p>要运行的程序的名字，这个和tasks.json中编译选项中的文件路径是对应的，必须相同，不然vscode就无法找到这个文件来运行。</p></blockquote><ul><li>args</li></ul><blockquote><p>运行调试的参数，会直接传入lldb或者gdb的。</p></blockquote><ul><li>stopAtEntry</li></ul><blockquote><p>字面意思，在调试的时候会在入口处暂停，点击继续才会开始调试，例如C&#x2F;C++中的main函数，或者Python中的第一条语句，或者Golang中的 func main()</p></blockquote><ul><li>externalConsole</li></ul><blockquote><p>外部的控制台，这个我是启用的，因为如果不启用的话，在vscode自带的DEBUG CONSOLE中只能输出程序信息，不能输入（或许是有办法的，但是我不会而已哈哈哈）。在调试程序的时候肯定会需要一些交互，所以这个还是要打开的。</p></blockquote><ul><li>MIMode</li></ul><blockquote><p>调试模式，这里选择的就是调试器的种类，选择<code>lldb</code>或者是<code>gdb</code>，我这里选择的是lldb，因为编译已经可以用gcc的优化了，而在MacOS上用lldb会更加的的心应手一些，毕竟也算是系统级的“亲儿子”。</p></blockquote><h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc-9&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="comment">// &quot;-std=c++17&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span><span class="string">&quot;shared&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;showReuseMessage&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;clear&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;silent&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>command</li></ul><blockquote><p>编译使用的命令，也就是编译器，这里要根据需求改变编译器的选择，例如gcc，g++，clang，clang++，llvm-gcc，llvm-g++这些。</p></blockquote><ul><li>args</li></ul><blockquote><p>编译选项，这里头的选项要按照顺序来输入，例如编译一个c文件是要用到<code>gcc sleep.c -o sleep -g -std=c11</code>，那么args里面的顺序就是要按照这样来填写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;-std=c11&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span>```</span><br><span class="line"></span><br><span class="line">### c_cpp_properties.json</span><br><span class="line"></span><br><span class="line">虽然这个文件对编译调试不会造成什么影响，但是也放上来作为参考。这个c_cpp_properties是对vscode的自动补全有影响，它会根据系统类型去选择要引用的位置的文件，并检测联想出来的结果。</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mac&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/usr/local/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.1/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                   <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/usr/local/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.1/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include&quot;</span></span><br><span class="line">               <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;macFrameworkPath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;/System/Library/Frameworks&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/Library/Frameworks&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;/usr/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/usr/local/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                   <span class="string">&quot;/usr/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/usr/local/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">               <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;_UNICODE&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;msvc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                   <span class="string">&quot;C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">               <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>到了这一步还是不行，使用vscode运行调试的时候，调试控制器台能够显示调试信息，但是调用的Terminal.app终端却没有程序运行的信息，也无法输入变量。</p><h2 id="最终发现是终端模拟器程序的问题"><a href="#最终发现是终端模拟器程序的问题" class="headerlink" title="最终发现是终端模拟器程序的问题"></a>最终发现是终端模拟器程序的问题</h2><p>在某个偶然，我发现我把<strong>iTerm关了</strong>之后，Terminal就能够承载调试的程序了，并且在重新开启iTerm之后，还是一样可以调试。</p><p><img src="/../img/vscode-debug-c++.png" alt="debug success"></p><h3 id="解决办法v1-0"><a href="#解决办法v1-0" class="headerlink" title="解决办法v1.0"></a>解决办法v1.0</h3><p>（重要的事情说三遍）</p><blockquote><p>关闭iTerm等第三方终端<br>关闭iTerm等第三方终端<br>关闭iTerm等第三方终端</p></blockquote><p>虽然问题解决了（可以在vscode上愉快的调试了，并且可以输入输出变量和结果），但是让我还是有点匪夷所思，决定继续追查下去。</p><p>我在vscode中看到一个配置选项：<code>&quot;terminal.external.osxExec&quot;: &quot;iTerm.app&quot;</code>这里原先的值是Terminal.app，后来我发现之后，根据字面意思，意思就是外部终端调用的是哪个程序，索性我改成了iTerm.app。</p><p>改成iTerm.app之后，我把iTerm关了，准备让vscode自动调用打开iTerm运行程序的时候，我发现系统弹出了一个辅助控制的窗口显示“是否允许iTerm控制Terminal”，我选了“Not Allow”。选了之后，系统调用出来的还是Terminal.app，并且上面变成了什么都没有，和之前一模一样。</p><p>为了做个对比，我特意去装了个Hyper终端（后来莫名发现这东西颜值高又好用除了有点不稳定），然后将<code>terminal.external.osxExec</code>改为Hyper.app，同样的，在运行调试的时候，和之前一样弹出了窗口，我选择了Allow。这次和相同的是，弹出来的还是Terminal.app，但是不同的是可以输入输出了！这让我really开心。</p><p>于是乎，我来到辅助功能这里一探究竟：<br>System Preferences -&gt; Security &amp; Privacy -&gt; Privacy -&gt; Automation</p><p>终于让我“盲生”发现了“华点”：</p><p><img src="/../img/system-privacy.png" alt="Automation setting"></p><h3 id="解决办法v2-0"><a href="#解决办法v2-0" class="headerlink" title="解决办法v2.0"></a>解决办法v2.0</h3><p>在打开iTerm.app下面对Terminal.app的自动控制之后，再将<code>terminal.external.osxExec</code>改为iTerm的时候，同样的，也能进行正常的调试了。</p><p>我的理解是，系统没有允许iTerm去控制Terminal，但是vscode调用了iTerm并且权限下放的不够多，所以就没法使得Terminal“接住”这个调试任务（可能是被系统拦截了），所以就什么都看不到。</p><p>还想吐槽的是，微软的这个<code>terminal.external.osxExec</code>简直就是摆设，设置了也没法更换调试用的终端，并且还会导致这种玄妙的权限问题。</p><hr><p>有机会再说说Hyper的安装和设置，嘿嘿，还挺有意思的~</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOSX </tag>
            
            <tag> vscode </tag>
            
            <tag> C/C++ </tag>
            
            <tag> debug </tag>
            
            <tag> gcc </tag>
            
            <tag> clang </tag>
            
            <tag> gdb </tag>
            
            <tag> lldb </tag>
            
            <tag> code sign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 33.搜索旋转排序数组</title>
      <link href="/2019/08/01/leetcode-33-search/"/>
      <url>/2019/08/01/leetcode-33-search/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p>示例 1:</p><blockquote><p>输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0<br>输出: 4</p></blockquote><p>示例 2:</p><blockquote><p>输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3<br>输出: -1</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题可以直接用二分法解决，但是这个二分法需要魔改左右边界迭代的判断。而这个魔改的思想，有点类似反证法。</p><p>在进行二分法的时候，数组的反转点或许在中点的左边或者右边，这让我们对数据位置的确定会产生一些困难。</p><p>这时候就需要换个思路，例如：<br>我们可以确定左边或者右边中的某一边是肯定按照顺序排列的，如果目标在这个按照顺序的个区间内，则将二分查找区域放到这边；<br>反之所有的情况都是在另一边，我们也将二分查找区域放到这另一边，这样不断进行下去，就会不断的无视这个翻转点进行二分查找了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; nums[right]) &#123; <span class="comment">// pivot in left</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) left = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> right = mid<span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// pivot in right</span></span><br><span class="line">                <span class="keyword">if</span> (target &lt; nums[mid] &amp;&amp; target &gt;= nums[left]) right = mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 4 ms, 在所有 C++ 提交中击败了92.20%的用户<br>内存消耗 : 8.5 MB, 在所有 C++ 提交中击败了98.16%的用户</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 26.删除排序数组中的重复项</title>
      <link href="/2019/08/01/leetcode-26-removeDuplicates/"/>
      <url>/2019/08/01/leetcode-26-removeDuplicates/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><p>示例 1:</p><blockquote><p>给定数组 nums &#x3D; [1,1,2],<br>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。<br>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>示例 2:</p><blockquote><p>给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],<br>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。<br>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><blockquote><p>&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br><code>int len = removeDuplicates(nums);</code></p></blockquote><blockquote><p>&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。<br>&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br><code>for (int i = 0; i &lt; len; i++) &#123; print(nums[i]); </code></p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>做了这题才发现自己是naive。<br>一开始只想到了遍历，遍历到和之前一样的元素的时候直接将数组中的元素删除掉就完事儿了，结果出来之后的结果惨不忍睹。</p><blockquote><p>执行用时 :264 ms, 在所有 C++ 提交中击败了15.21%的用户<br>内存消耗 : 9.9 MB, 在所有 C++ 提交中击败了78.41%的用户</p></blockquote><p>遍历的代码如下，一开始还觉得自己用了迭代器，骚的一批，结果溢出来给自己骚断了腰【手动捂脸</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> length = <span class="number">1</span>, visited = *(nums.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> itor = nums.<span class="built_in">begin</span>() + <span class="number">1</span>; itor != nums.<span class="built_in">end</span>(); itor++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*itor == visited) &#123;</span><br><span class="line">                nums.<span class="built_in">erase</span>(itor);</span><br><span class="line">                itor--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited = *itor;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在看了题解之后，才发现题目中早就已经给出了明确的提示：</p><blockquote><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>基于这句话，也就是说并不需要将原数组中多余的元素真正的“删除”，而是只需要将后面的元素都放到前面来，令得返回的长度之内都不同和正确就可以了。</p><p>所以题解中给出的双指针的确是最优解了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> length = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, scan = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (scan &lt; length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[res] != nums[scan]) &#123;</span><br><span class="line">                nums[++res] = nums[scan++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            scan++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ++res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果:</p><blockquote><p>执行用时 : 24 ms, 在所有 C++ 提交中击败了98.03%的用户<br>内存消耗 : 10.1 MB, 在所有 C++ 提交中击败了73.17%的用户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
            <tag> 去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 23.合并K个有序链表</title>
      <link href="/2019/07/30/leetcode-23-mergeKLists/"/>
      <url>/2019/07/30/leetcode-23-mergeKLists/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p>示例:</p><blockquote><p>输入:</p><p>[1-&gt;4-&gt;5, 1-&gt;3-&gt;4, 2-&gt;6]</p></blockquote><blockquote><p>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题一共有5种官方解法，每种解法都对应不同的水平。<br>分别是：</p><ol><li>暴力遍历法</li><li>逐一比较法</li><li>优先队列法</li><li>逐一合并法 &amp; 分治+合并法</li></ol><h3 id="暴力遍历法"><a href="#暴力遍历法" class="headerlink" title="暴力遍历法"></a>暴力遍历法</h3><p>暴力遍历法思想很简单，即为多个链表转化为一个数组，对数组进行排序后再将数组转化为链表。因为链表转化为数组是O(N)，而数组转化为链表也是O(N)，所以我觉得这里头影响最大的就是排序算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="type">int</span> k = lists.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            ListNode *p = lists[i];</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                arr.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="function">ListNode <span class="title">head</span><span class="params">(<span class="number">-1</span>)</span>, *p</span>;</span><br><span class="line">        p = &amp;head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(arr[i]);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行用时 : 32 ms, 在所有 C++ 提交中击败了97.09%的用户<br>内存消耗 :11.6 MB, 在所有 C++ 提交中击败了67.33%的用户</p><h3 id="逐一合并法-amp-分治-合并法"><a href="#逐一合并法-amp-分治-合并法" class="headerlink" title="逐一合并法 &amp; 分治+合并法"></a>逐一合并法 &amp; 分治+合并法</h3><p>逐一合并法，即按照顺序将第1个链表与之后的每个链表合并。需要用到之前写过的<a href="https://hexo.chensmallx.top/2019/07/29/leetcode-21-mergeTwoLists/">合并两个有序链表</a>的方法作为核心合并算法，并且合并算法的快慢差距在这题里面更加的放大了。由于逐一合并法和分治合并法对链表的合并次数都相同，而逐一合并法的算法分析结果是O(kN)（N为总节点数），而分治法的算法分析结果是O(NlogN)。所以选取分治合并法。</p><p>其中k和logN的差距点在于，逐一合并法里面，对于已经合并排序过的节点在之后的合并排序中都会排序一次，而分治合并则在前面第一趟分治中有没重复运算的节点，所以就更加的节约了时间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">merge2Lists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">        <span class="function">ListNode <span class="title">head</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">register</span> ListNode *o = &amp;head;</span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;</span><br><span class="line">                o-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                o-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            o = o-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">            o-&gt;next = l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2) &#123;</span><br><span class="line">            o-&gt;next = l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">int</span> step = <span class="number">1</span>, k = lists.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">merge2Lists</span>(lists[<span class="number">0</span>], lists[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (step &lt; k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k-step; i+=step*<span class="number">2</span>) &#123;</span><br><span class="line">                lists[i] = <span class="built_in">merge2Lists</span>(lists[i], lists[i+step]);</span><br><span class="line">            &#125;</span><br><span class="line">            step *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行用时 :32 ms, 在所有 C++ 提交中击败了97.12%的用户<br>内存消耗 : 10.7 MB, 在所有 C++ 提交中击败了98.35%的用户</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
            <tag> 链表 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给 Mac App 设置专门的语言</title>
      <link href="/2019/07/29/set-specific-language-MacOS-app/"/>
      <url>/2019/07/29/set-specific-language-MacOS-app/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有这个需求呢，主要是因为平时写文案的时候用WPS会用到自动序号，如果在英文模式下，中文序号会自动联想，但是在设置中却无法自己设置，只能设置英文的序号。Word也一样。</p><p>所以需要单独设置语言。</p><h2 id="更改-Mac-App-的默认启动语言"><a href="#更改-Mac-App-的默认启动语言" class="headerlink" title="更改 Mac App 的默认启动语言"></a>更改 Mac App 的默认启动语言</h2><p>如果希望始终以某种与系统不同的语言启动 App，则需要使用defaults write命令来修改 App 的默认设置。语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write [App Bundle ID] AppleLanguages <span class="string">&#x27;([App Lang])&#x27;</span></span><br></pre></td></tr></table></figure><p>如果我要单独设置WPS的语言，则输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.kingsoft.wpsoffice.mac AppleLanguages <span class="string">&#x27;zh&#x27;</span></span><br></pre></td></tr></table></figure><p>那么问题来了，要怎么知道这个 App Bundle ID 是什么呢？当然也是有命令的啦~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdls -name kMDItemCFBundleIdentifier [App Location]</span><br></pre></td></tr></table></figure><p>例如要查看WPS的 App Bundle ID，那么就用.app路径替换进去，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mdls -name kMDItemCFBundleIdentifier /Applications/wpsoffice.app</span><br><span class="line">kMDItemCFBundleIdentifier = <span class="string">&quot;com.kingsoft.wpsoffice.mac&quot;</span></span><br></pre></td></tr></table></figure><p>那么，问题又来了，我们怎么知道软件支持不支持中文呢？再来一串命令，当然，这只是普通的列出语言资源文件而已。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /Applications/wpsoffice.app/Contents/Resources | grep lproj</span><br><span class="line">en.lproj</span><br><span class="line">zh-Hans.lproj</span><br><span class="line">zh-Hant.lproj</span><br></pre></td></tr></table></figure><p>如果以后英文水平进步了，只需要写英文文档，想要改过来了呢？那也是有办法的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults delete [App Bundle ID] AppleLanguages</span><br></pre></td></tr></table></figure><hr><p>明天也要加油哦~</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解 21.合并两个有序链表</title>
      <link href="/2019/07/29/leetcode-21-mergeTwoLists/"/>
      <url>/2019/07/29/leetcode-21-mergeTwoLists/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>示例：</p><blockquote><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题速度快和内存少，基本上就是迭代更新节点的方法，这样用去的时间是O(min(len(l1), len(l2)))，使用的空间就只有一两个指针，也就是S(1)。如果使用一个新的链表去承接这些节点，那么空间复杂度就有O(n)了。</p><p>这个题解中最精髓的地方在循环判断的<code>l1 &amp;&amp; l2</code>和之后循环结束的<code>o-&gt;next = l1?l1:l2;</code>。</p><p>因为输入的链表是有序的，所以在将其中一个链表扫描完成之后，只需要将另一条链表直接连接在末尾就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *o, <span class="built_in">begin</span>(<span class="number">0</span>);</span><br><span class="line">        o = &amp;begin;</span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;</span><br><span class="line">                o-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                o-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            o = o-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        o-&gt;next = l1?l1:l2;</span><br><span class="line">        <span class="keyword">return</span> begin.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 12 ms, 在所有 C++ 提交中击败了86.67%的用户<br>内存消耗 : 8.7 MB, 在所有 C++ 提交中击败了95.20%的用户</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> OJ </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 20.有效的括号</title>
      <link href="/2019/07/29/leetcode-20-validBracket/"/>
      <url>/2019/07/29/leetcode-20-validBracket/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><blockquote><p>输入: “()”<br>输出: true</p></blockquote><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><blockquote><p>输入: “()[]{}”<br>输出: true</p></blockquote><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h3><blockquote><p>输入: “(]”<br>输出: false</p></blockquote><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4"></a>示例 4</h3><blockquote><p>输入: “([)]”<br>输出: false</p></blockquote><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5"></a>示例 5</h3><blockquote><p>输入: “{[]}”<br>输出: true</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/valid-parentheses">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题我用了递归的思想，但是深究进去和其他的结题方法的本质还是一样的，也就是栈，后进先出，后发现的先匹配。每次遇到一个新的左括号就新进一个函数压一个栈。遇到匹配的合适的右括号就出栈并返回上层一个true，如果匹配到不合适的右括号，就返回false。如果在扫描到结束的时候还没有遇到匹配的括号，就返回false。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> length, index;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> _match;</span><br><span class="line">        <span class="type">bool</span> valid = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置对当前括号匹配的右括号</span></span><br><span class="line">        <span class="keyword">if</span> (str[index] == <span class="string">&#x27;(&#x27;</span>) _match = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[index] == <span class="string">&#x27;[&#x27;</span>) _match = <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[index] == <span class="string">&#x27;&#123;&#x27;</span>) _match = <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 索引前进一步，开始对下一个符号进行分析</span></span><br><span class="line">        index++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[index] == _match) &#123; <span class="comment">// 匹配成功</span></span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[index] == <span class="string">&#x27;(&#x27;</span> || str[index] == <span class="string">&#x27;[&#x27;</span> || str[index] == <span class="string">&#x27;&#123;&#x27;</span>) &#123; <span class="comment">// 匹配到左括号</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">match</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        length = s.<span class="built_in">length</span>();</span><br><span class="line">        str = s;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">match</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这道题还有不用递归的栈。<br>不用递归的栈用起来要更简单一些（个人认为），这个情况下判断的是最后栈中是否还留有未匹配的符号，而不是检查是否匹配成功，这样的思想特别的有趣。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stackk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i: s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&#x27;(&#x27;</span> || i == <span class="string">&#x27;[&#x27;</span> || i == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                stackk.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stackk.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (stackk.<span class="built_in">top</span>() + <span class="number">1</span> == i || stackk.<span class="built_in">top</span>() + <span class="number">2</span> == i) &#123;</span><br><span class="line">                    stackk.<span class="built_in">pop</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stackk.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stackk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 4 ms, 在所有 C++ 提交中击败了83.45%的用户<br>内存消耗 : 8.7 MB, 在所有 C++ 提交中击败了67.22%的用户</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 栈 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 2.两数相加</title>
      <link href="/2019/07/25/leetcode-2-addTwoNumbers/"/>
      <url>/2019/07/25/leetcode-2-addTwoNumbers/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 &#x3D; 807</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/add-two-numbers">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>玄学的情况出现了，无论我按照什么写法来写（包括得分比我高的算法），都没法缩短判题时间，也许是leetcode服务器负载过大，使得题目运行速度减慢了。</p><p>其实都是一样的思路，没有别的什么办法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *res = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">register</span> ListNode *p = res;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">int</span> y, carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l1 || l2) &#123;</span><br><span class="line"></span><br><span class="line">            y = carry + (l1?l1-&gt;val:<span class="number">0</span>) + (l2?l2-&gt;val:<span class="number">0</span>);</span><br><span class="line">            carry = y / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            p -&gt; next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(y % <span class="number">10</span>);</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line"></span><br><span class="line">            l1 = l1?l1-&gt;next:l1;</span><br><span class="line">            l2 = l2?l2-&gt;next:l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">            p -&gt; next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(carry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 60 ms, 在所有 C++ 提交中击败了16.69%的用户<br>内存消耗 : 10.5 MB, 在所有 C++ 提交中击败了75.22%的用户</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 15.三数之和</title>
      <link href="/2019/07/25/leetcode-15-threeSum/"/>
      <url>/2019/07/25/leetcode-15-threeSum/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c &#x3D; 0 ？找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><blockquote><p>例如, 给定数组 nums &#x3D; [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为：[[-1, 0, 1], [-1, -1, 2]]</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/3sum">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题可以使用遍历+双指针扫描法进行，并加入一定的剪枝优化。</p><p>这个办法的精髓在于数组的预处理——排序。排序好了的数组将会对扫描有非常大的帮助。</p><h3 id="遍历-双指针扫描"><a href="#遍历-双指针扫描" class="headerlink" title="遍历+双指针扫描"></a>遍历+双指针扫描</h3><p>这里有两部分，第一部分是遍历，第二部分是双指针。遍历指的是指遍历一个数作为参照主体。双指针是指以参照主体为参照，对参照主体之后的部分进行一头一尾两个指针向中间扫描。</p><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><p>这一套扫描法中，可以有三个位置进行剪枝操作。</p><p>剪枝1：</p><blockquote><p>对排序好的数组本身进行分析：<br>如果数组为：空、个数小于3、第一个数大于0、最后一个数小于0，即代表无法完成三数之和等于0。</p></blockquote><p>剪枝2：</p><blockquote><p>对“遍历”操作进行剪枝：<br>如果参照主体本身大于0，则代表右侧所有的元素均大于参照主体本身，即为无法完成三数之和大于0，直接结束遍历（break）。</p></blockquote><p>剪枝3：</p><blockquote><p>对“遍历”操作进行剪枝：<br>如果当前的参照主体与前一个参照主体相等，则代表此参照主体经过相同数组查找出来的“三数之和”结果与之前必定相同，所以可以直接跳过本参照主体（continue）。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ivvec;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 排序，排序之后的数组会好用很多</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 剪枝：</span></span><br><span class="line">        <span class="comment">// 数组空 || 数字个数小于3 || 排序好的数字第一个大于0 || 排序好的最后一个小于0</span></span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>() || n &lt; <span class="number">3</span> || nums.<span class="built_in">front</span>() &gt; <span class="number">0</span> || nums.<span class="built_in">back</span>() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ivvec;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> fix = nums[i];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 剪枝：</span></span><br><span class="line">            <span class="comment">// 从大到小排序好的数组，如果扫描进行到了大于0的位置了，那就可以结束了</span></span><br><span class="line">            <span class="keyword">if</span> (fix &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 剪枝：</span></span><br><span class="line">            <span class="comment">// 如果目前进行的数字与前一个相同，则与之对应的结果必定必定相同</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; fix == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 双指针法</span></span><br><span class="line">            <span class="type">int</span> l = i + <span class="number">1</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> sum = nums[l] + nums[r];</span><br><span class="line">                <span class="keyword">if</span> (sum == -fix) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (l == i + <span class="number">1</span> || r == n - <span class="number">1</span>) &#123;</span><br><span class="line">                        ivvec.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;fix, nums[l], nums[r]&#125;);</span><br><span class="line">                        ++l, --r;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[l] == nums[l - <span class="number">1</span>]) &#123;</span><br><span class="line">                        ++l;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[r] == nums[r + <span class="number">1</span>]) &#123;</span><br><span class="line">                        --r;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ivvec.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;fix, nums[l], nums[r]&#125;);</span><br><span class="line">                        ++l, --r;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; -fix) &#123;</span><br><span class="line">                    ++l;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    --r;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ivvec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 144 ms, 在所有 C++ 提交中击败了85.23%的用户<br>内存消耗 : 14.5 MB, 在所有 C++ 提交中击败了95.53%的用户</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 遍历 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 14.最长公共前缀</title>
      <link href="/2019/07/25/leetcode-14-longestCommonPrefix/"/>
      <url>/2019/07/25/leetcode-14-longestCommonPrefix/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><p>示例 1:</p><blockquote><p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”</p></blockquote><p>示例 2:</p><blockquote><p>输入: [“dog”,”racecar”,”car”]<br>输出: “”<br>解释: 输入不存在公共前缀。</p></blockquote><p>说明:</p><blockquote><p>所有输入只包含小写字母 a-z 。</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/longest-common-prefix">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题从官方题解上来看，无论是何种办法时间复杂度均为O(S)【S为字符串合集中的字符个数】。许多需要预处理的办法中虽然查找的过程时间复杂度为O(log n)，但是预处理需要的时间也是O(S)，并且空间复杂度也会从S(n)上升到S(S)，所以这道题我觉得最好的结题思路就是暴力遍历法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getCommonPrefix</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">min</span>(a.<span class="built_in">length</span>(), b.<span class="built_in">length</span>());</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[i]) &#123;</span><br><span class="line">                res += a[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = strs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        string res = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res = <span class="built_in">getCommonPrefix</span>(res, strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 4 ms, 在所有 C++ 提交中击败了97.34%的用户<br>内存消耗 : 9.3 MB, 在所有 C++ 提交中击败了66.19%的用户</p><p>加上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">auto</span> x = []() &#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>之后：</p><p>执行用时 :0 ms, 在所有 C++ 提交中击败了100.00%的用户<br>内存消耗 : 9.4 MB, 在所有 C++ 提交中击败了51.25%的用户</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 11.盛最多水的容器 &amp;&amp; OJ中加快C++速度的奇技淫巧</title>
      <link href="/2019/07/24/leetcode-11-mostCapacity-boostOperation/"/>
      <url>/2019/07/24/leetcode-11-mostCapacity-boostOperation/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。"></p><p>示例:</p><blockquote><p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p></blockquote><p><strong>来源：<a href="https://leetcode-cn.com/problems/container-with-most-water">力扣（LeetCode）</a></strong></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>一开始我上手来是直接写了暴力扫描法（和冒泡排序类似）。看评论和官方题解的第一眼看到“双指针法”这几个字的时候我就明白了另一种解法。<br>毕竟暴力遍历的时间复杂度是O(n^2)，而使用双指针法则可以直接提高到O(n)，这是长足的飞跃。</p><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>虽说我很蠢，一开始只是想到了暴力遍历，但是我在遍历过程中也增加了一步剪枝，就是在指针二second的开始位置的选定时候，我没有选择first+1，而是<code>second = first + max/height[first] + 1</code>，或许是借助了一点动规的思想，想要通过已有的最大面积来进行一些无用指针二的跳过来提高速度。</p><p>这段剪枝的思想可以理解为，以当前选中的指针一（first）作为两根指针中的短根，用已经记录到的最大面积来除这根指针一，以获得底宽，由指针一的位置直接加上这个底宽便可以直接跳过中间的这些无论是长还是短的无用的指针二了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>, n = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> first = <span class="number">0</span>; first &lt; n; first++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[first] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> second = first + max/height[first] + <span class="number">1</span>; second &lt; n; second++) &#123;</span><br><span class="line">                <span class="type">int</span> s = <span class="built_in">min</span>(height[first], height[second]) * (second - first);</span><br><span class="line">                <span class="keyword">if</span> (s &gt; max) &#123;</span><br><span class="line">                    max = s;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>性能：340 ms 9.8 MB</p><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a, <span class="type">const</span> <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a, <span class="type">const</span> <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">int</span> former = <span class="number">0</span>, later = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (former &lt; later) &#123;</span><br><span class="line">            result = <span class="built_in">Max</span>(result, <span class="built_in">Min</span>(height[former], height[later]) * (later - former));</span><br><span class="line">            height[former]&lt;height[later]?former++:later--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>性能：36 ms 9.7 MB</p><h3 id="双指针法-奇技淫巧"><a href="#双指针法-奇技淫巧" class="headerlink" title="双指针法 + 奇技淫巧"></a>双指针法 + 奇技淫巧</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">auto</span> x = []() &#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a, <span class="type">const</span> <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a, <span class="type">const</span> <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">int</span> former = <span class="number">0</span>, later = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (former &lt; later) &#123;</span><br><span class="line">            result = <span class="built_in">Max</span>(result, <span class="built_in">Min</span>(height[former], height[later]) * (later - former));</span><br><span class="line">            height[former]&lt;height[later]?former++:later--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>又学到了一种刷题的奇技淫巧，着实是“开心”啊。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">auto</span> x = []() &#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>这段代码的重点在于：c++中cin默认与stdin同步以使得文件指针不混乱，同时cout和stdout也一样，这导致了cin有额外的开销，所以会更花时间。</p><p><code>std::ios::sync_with_stdio(false);</code>这一句关闭了cin和stdin的同步，使得速度与scanf几乎相同。</p><p>reference：<a href="https://www.zhihu.com/question/282092403/answer/424100038">leetcode里这段强行加快运行速度的C++代码是什么意思？ - riba2534的回答 - 知乎</a></p><p>使用的时候可能造成文件指针混乱，因为代码可能会在stl初始化之前跑，然后GG，实际工程切勿使用。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 12 ms, 在所有 C++ 提交中击败了99.74%的用户<br>内存消耗 : 9.7 MB, 在所有 C++ 提交中击败了86.13%的用户</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 遍历 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题记 8.字符串转换整数(atoi)</title>
      <link href="/2019/07/24/leetcode-8-atoi/"/>
      <url>/2019/07/24/leetcode-8-atoi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，qing返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><blockquote><p>输入: “42”<br>输出: 42</p></blockquote><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><blockquote><p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</p></blockquote><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h3><blockquote><p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。</p></blockquote><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4"></a>示例 4</h3><blockquote><p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。因此无法执行有效的转换。</p></blockquote><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5"></a>示例 5</h3><blockquote><p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。 因此返回 INT_MIN (−231) 。</p></blockquote><p><strong>来源：<a href="https://leetcode-cn.com/problems/string-to-integer-atoi">力扣（LeetCode）</a></strong></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>感觉这道题，因为输入样例的关系，所以无法避免的就是要对输入进行预处理。（去除空格，判断正负号，判断字符）</p><p>在到了数字字符串的部分的时候，和回文数的思路差不多，就是一个变量每次增大10倍然后加上新的一位。<br>要是说有什么地方改进算法可以加快速度的，私以为可能就只有在条件判断、正负号信息保存这些只能影响O(1)级别的地方进行改进了（我还是才疏学浅了TwT）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">long</span> res = <span class="number">0L</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (str[index] == <span class="string">&#x27; &#x27;</span>) index++; <span class="comment">// erase the blank spaces</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(str[index]) &amp;&amp; str[index] != <span class="string">&#x27;-&#x27;</span> &amp;&amp; str[index] != <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(res);</span><br><span class="line">        &#125; <span class="comment">// excluding while first is an alpha or something</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str[index] == <span class="string">&#x27;-&#x27;</span>) &#123; <span class="comment">// mostly only judge once so save time</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            index++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[index] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// can judge positive and negative parallelly, but operate twice</span></span><br><span class="line">        <span class="comment">// if (str[index] == &#x27;-&#x27; || str[index] == &#x27;+&#x27;) &#123;</span></span><br><span class="line">        <span class="comment">//     flag = str[index] == &#x27;-&#x27;?false:true;</span></span><br><span class="line">        <span class="comment">//     index++;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(str[index]) &amp;&amp; res &lt; <span class="number">2147483648</span>) &#123;</span><br><span class="line">            res *= <span class="number">10</span>;</span><br><span class="line">            res += str[index++] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res *= flag?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res &gt; <span class="number">2147483647</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2147483647</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">-2147483648</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2147483648</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>这道题里面有一点投机取巧的成分在里面，比如将“经常运算但只有一个”的变量设置为register（寄存器变量）即可以让这段代码从16ms前进到4ms，但是在实际工程中并不能都这样，只有访问非常频繁、贯穿整个程序生命周期的变量再这样设置。当然致命的一点是，这只有c++才能用。</p><p>另一个投机取巧的的成分在于把溢出区间直接在编译的时候就准备好了，我看到许多题解在代码中比较溢出区间的时候还要现场运算2^31，这无疑会拖慢代码的运行。当然我还有看到更快的运算方法比如直接用<code>1&lt;&lt;31</code>这样的位运算来进行，这样也只会增加一些O(1)的运算时间。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 4 ms, 在所有 C++ 提交中击败了95.07%的用户</p><p>内存消耗 : 8.4 MB, 在所有 C++ 提交中击败了87.79%的用户</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 剪枝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始背多个单词来源</title>
      <link href="/2019/04/23/post-everyday-2019-4-23/"/>
      <url>/2019/04/23/post-everyday-2019-4-23/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2019年4月23日</strong><br><strong>天气：没雨不热很舒服</strong></p><h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>今晚出去看复联四二映【三点的场真酸爽</li><li>后天交中间件实验报告【明天睡醒就要写报告了</li><li>买了初中高中的语法书【把语法学完了就有底气了，不然一直觉得缺点什么</li><li>土钵鸡好咸</li></ol><span id="more"></span><h2 id="每日英语打卡"><a href="#每日英语打卡" class="headerlink" title="每日英语打卡"></a>每日英语打卡</h2><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p>经过了上次考试，我得出结论：<br>    虽然只要掌握 CET4 的词汇就足够对付托福，但是还是不应该止步于此，更多的单词需要认识，并且认识之后可以令考试更加得心应手，阅读速度加快，听力时听到学术名词不会那么懵逼。<br>    所以我开始背托福单词了，当然 CET4 也不落下。</p><h4 id="CET4-list-17-18"><a href="#CET4-list-17-18" class="headerlink" title="CET4 list 17-18"></a>CET4 list 17-18</h4><p>还需要巩固的单词</p><blockquote><p>mechanic  goodness    tragedy advocate    crucial conscious<br>chill breadth regardless  valid   intensity   definitely  fruitful    expectation positive    treaty  elaborate</p></blockquote><p>还不认识的单词</p><blockquote><p>lean  tractor inspect revenue slope<br>contemporary  remedy  confine tray    comb</p></blockquote><h4 id="TOEFL-Vocabulary-Classified"><a href="#TOEFL-Vocabulary-Classified" class="headerlink" title="TOEFL Vocabulary Classified"></a>TOEFL Vocabulary Classified</h4><p>背学科专有名词就很不一样，基本都是很有特点的，无论是之前接触过的，还是新学的，都不会像以前背的单词一样那么容易混淆。</p><p>word list 1 Biology</p><p>新学词：</p><blockquote><p>mimicry<br>Darwinism<br>proliferate<br>propagate<br>subsist<br>fermentation<br>respiration<br>membrane<br>viability</p></blockquote><h4 id="百词斩"><a href="#百词斩" class="headerlink" title="百词斩"></a>百词斩</h4><p>时隔多月，又开始背百词斩了。背百词斩的一个原因很简单，因为是为了多认识单词，而且百词斩每天30个单词也算是一个不费太多时间又可以慢慢积累的方法。</p><h3 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h3><p>VOA 常速英语 Title：最小的熊互相“交谈”的方法</p><p><img src="/../img/punch/20190423.jpg" alt="听写：最小的熊互相“交谈”的方法"></p><h3 id="Speaking"><a href="#Speaking" class="headerlink" title="Speaking"></a>Speaking</h3><p>因为只读半个小时，所以反反复复来来去去也只读了三段，包查单词什么的。<br>太久不正经读书之后，读起来还是很不熟练的。要多读，以后早起读书，嘻嘻</p><p><img src="/../img/punch/20190423-s.jpg" alt="Speaking: TPO1 passage1 GroundWater"></p><hr><p>明天也要加油哦~！</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一记</title>
      <link href="/2019/04/16/post-everyday-2019-4-16/"/>
      <url>/2019/04/16/post-everyday-2019-4-16/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2019年4月16日</strong><br><strong>天气：凉转两件卫衣的热</strong></p><h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>来湖大和宝宝一起上自习</li></ol><span id="more"></span><h2 id="每日英语打卡"><a href="#每日英语打卡" class="headerlink" title="每日英语打卡"></a>每日英语打卡</h2><p>二考托福照样难受，打卡还是照常进行。</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p>List 13 - 14</p><p>需要巩固的单词：</p><blockquote><p>territory n. 领土，版图， 领域<br>indication n. 指示，表示，表明；象征，迹象<br>numerous adj. 众多的<br>liberal adj. 心胸宽大的，慷慨的；自由的，自由主义的<br>lavatory n. 盥洗室，厕所<br>slippery adj. 滑的，狡猾的<br>offensive adj. 冒犯的，无礼的，使人不快的；进攻的，进攻性的 n. 进攻，攻势</p></blockquote><p>没啥印象的单词：</p><blockquote><p>mere adj. 仅仅的，纯粹的<br>gross adj. 总的，严重的；粗俗的，臃肿的<br>embrace n.&#x2F;vt. 拥抱，怀抱；包括，包围<br>blend n.&#x2F;v. 混合</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后天托福二考，很慌</title>
      <link href="/2019/04/10/post-everyday-2019-4-10/"/>
      <url>/2019/04/10/post-everyday-2019-4-10/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2019年4月10日</strong><br><strong>天气：骤冷</strong></p><h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>距离托福二考还有3天【包括今天</li><li>设置了黑裙的 ipv6版本 aliddns</li><li>天气转变迅速，感冒了【压力也有点大</li><li>昨天在 steam 上买了 RiME【</li></ol><span id="more"></span><h2 id="每日英语打卡"><a href="#每日英语打卡" class="headerlink" title="每日英语打卡"></a>每日英语打卡</h2><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p>list 9 - 10</p><p>需要巩固的单词</p><blockquote><p>invest v. 投资，投入，授予<br>synthetic adj. 综合的，合成的；虚假的<br>curse n.&#x2F;v. 诅咒，咒骂，天谴；祸害，祸根<br>suspend vt. 暂停，终止；吊，悬<br>tide n. 潮，潮汐；潮流，趋势 v. 涨，落；使随潮水漂浮<br>cope vi. （成功地）应付，（妥善地）处理<br>faint adj. 模糊的，隐约的；微小的，微弱的；眩晕的 n.&#x2F;vi. 昏厥<br>conference n. （正式）会议，讨论会；讨论，商谈<br>hazard n. 危害，公害 vt. 尝试着做（或提出），冒…风险<br>swell vi. 膨胀，隆起；增长，增强，增多，扩大 n. 波浪起伏；鼓起，隆起；增强<br>pension n. 养老金，抚恤金 vt. 发给…养老金<br>liable adj. 易于…的，可能得</p><p>spur n. 刺激物 vt. 刺激，鞭策，激励<br>precise adj. 精确的，准确的；严谨的<br>screw n. 螺丝（钉） vt. 用螺丝钉固定，拧，拧紧<br>constitute vt. 组成，形成；设立；任命<br>prior adj. 在前的，优先的<br>hasitate vi. 犹豫，踌躇，含糊；不情愿<br>competent adj. 有能力的，能胜任的<br>encounter vt. 遭遇，遇到 n. 遭遇<br>provision n. 供应；准备，预备；条款，规定 来自 provide<br>reinforce vt. 增强，加强，增援<br>rational adj. 理性的，理智的；合理的</p></blockquote><h3 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h3><p>VOA NEWS Topic: 泰国大选结果出炉</p><p><img src="/../img/punch/20190410.jpg" alt="punch：泰国大选结果出炉"></p><hr><p>明天也要加油哦~</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑裙 NAS - 简单配置</title>
      <link href="/2019/04/03/synology-something/"/>
      <url>/2019/04/03/synology-something/</url>
      
        <content type="html"><![CDATA[<p>作为简单记录，这篇文章主要包括几个简单的点：</p><ol><li>在 J1900 上安装黑群晖【废话？</li><li>安装硬盘配置网络硬盘【NAS 基本操作</li><li>通过 <code>AFP</code> 协议设置 MacOS 的 <code>Time Machine</code> 备份到 NAS 上</li></ol><span id="more"></span><p>为什么这一篇包括了三点呢？<br>原因其实很简单，就是因为太简单了，所以合在一起写。</p><h2 id="安装黑群晖"><a href="#安装黑群晖" class="headerlink" title="安装黑群晖"></a>安装黑群晖</h2><blockquote><p>参考资料：<a href="https://post.smzdm.com/p/ax08ld2w/">与时俱进，提升居家生活品质（篇四）：3分钟搞定SSD黑群晖安装</a></p></blockquote><p>我安装黑群晖是看了这篇大佬的教程，因为这篇是直接用了同配置机器安装完成后的硬盘的直接 dump，可以1：1还原新安装的机器的数据。</p><p>贴一个我自己的百度云分流：</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/165QEk_F91n30yP-yuUoeUw">https://pan.baidu.com/s/165QEk_F91n30yP-yuUoeUw</a> 提取码: q2vb</p></blockquote><p>不过使用这个镜像需要注意的是（个人猜测），因为原盘也是16g 固态 dump 出来的，所以建议用于大于等于16g 的固态硬盘进行写入，这样才能还原出原本的数据分区情况和避免硬盘出错。</p><p>还有一个写入镜像的工具：<a href="/file/DiskImage-V1.6-WinAll.exe.zip">DiskImage-V1.6-WinAll</a>，这个工具的图标是个眼睛发亮的黑猫，刚开始我老是找不到它在哪。可以运行在 WinPE 上，所以放心食用。</p><h3 id="解压镜像文件"><a href="#解压镜像文件" class="headerlink" title="解压镜像文件"></a>解压镜像文件</h3><p>这个文件需要提前解压，从 zip 格式解压到 img 格式。不得不说刚开始我还是有些惊讶的，因为毕竟一个650M的文件可以解压出来一个14G 多的文件，实在压缩比有些高了。</p><p>但是装完之后回过头来想想，这里面大多是分区的零填充，压缩之后肯定会大幅压缩，这样就会出现神奇的压缩比。</p><h3 id="准备-PE-U盘"><a href="#准备-PE-U盘" class="headerlink" title="准备 PE U盘"></a>准备 PE U盘</h3><p>既然镜像有14G 多，那么 U 盘至少也要16G。</p><p>都知道 WinPE 是什么吧？不知道的可以左上角或者右上角叉叉退出了😂</p><p>要是让我推荐一款 PE 那绝对是 WePE，无论是临时使用还是长期做维护，都很适合，安装简单系统纯净，关键是装 win 的时候不会夹带私货。</p><blockquote><p><a href="http://www.wepe.com.cn/">微PE WePE 官网</a><br>PS: WePE打钱！</p></blockquote><p>把镜像和写入工具放到U盘里头。</p><h3 id="安装-Synology"><a href="#安装-Synology" class="headerlink" title="安装 Synology"></a>安装 Synology</h3><ol><li>插上 U盘</li><li>开机疯狂按 F2 选择进入U盘启动</li><li>使用 HD Tune 扫描固态坏块，确认无误之后进行下一步。坏块太多就去肛奸商。【当时我的固态里头就是20%的坏块</li><li>打开 DiskGenius 清空固态分区，提交改动</li><li>打开之前下载的<code>DiskImage-V1.6-WinAll.exe</code>，镜像位置选择解压好的镜像文件。磁盘位置选择整个固态硬盘，不要选择某个分区。16g 的固态软件内大概识别成14g 多。</li><li>点击开始写入。</li><li>坐与静等…</li></ol><p>写入完成之后再打开 DiskGenius 可以看到固态被分成了好几个格式化好的分区。这样就写入完成了。<br>接下来拔掉 U盘重启从硬盘启动，如果看到很多问号的话，那就说明安装成功了。</p><p>现在使用另一台同在局域网内的计算机，打开浏览器输入<a href="http://find.synology.com/">find.synology.com</a>或者直接点击这个，就会加载群晖官方的本地网络搜索工具，如果搜索到了会显示系统配置页面。配置用户还有地区等等各种参数，不过有一点，不要使用任何群晖的云服务，这样就会和群晖的服务器进行交互，有可能会被 ban 机。</p><h2 id="安装硬盘"><a href="#安装硬盘" class="headerlink" title="安装硬盘"></a>安装硬盘</h2><p>安装硬盘很简单，不过有一点不得不说，要在群晖上使用硬盘必须要格式化才行，因为群晖有他自己的硬盘格式和管理方法。</p><ol><li><p>将硬盘装入 NAS 硬盘插槽</p><p> 有一点很重要，就是务必要使用沉头螺丝，不然会因为螺丝凸起而没办法装入插槽中。【别问我为什么知道</p></li><li><p>打开储存空间管理器，可以看到未使用的硬盘显示为绿色，正在使用的硬盘显示为蓝色</p><p> <img src="/../img/NAS/storageManager.png" alt="Storage Manager"></p></li><li><p>进入 RAID GROUP 选项卡，如果有空闲的硬盘空间，那么新建按钮就会显示为可用状态。点击新建。</p><p> 选择未使用的硬盘，选择格式的时候选择 Btrfs，这是群晖专属的硬盘格式，有日志功能和各种管理 iSCSI 的奇效。<br> Raid 选择 Base 就行，单硬盘作为一个空间来使用。<br> 新建出一个 Raid 组之后，这个硬盘即为可用状态。但是我们在系统里面还看不到哪里能用。<br> 原因在于由于是 NAS，系统只会将共享的空间呈现出来给你使用。所以答案很明显了，需要在硬盘上配置共享空间。</p></li></ol><p>未完待续…（太懒了）</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Synology </tag>
            
            <tag> 黑裙，NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑裙 NAS 搭建 - 初</title>
      <link href="/2019/04/01/synology-overview/"/>
      <url>/2019/04/01/synology-overview/</url>
      
        <content type="html"><![CDATA[<p>初次接触 NAS，也是第一次接触这样子专用用途的 Linux，不得不说着实是一次奇妙的经历。原来本以为 NAS 对于我们来说没有太大用处，但是直到自己有了一个之后，真香！</p><span id="more"></span><hr><h2 id="黑裙？黑群晖！"><a href="#黑裙？黑群晖！" class="headerlink" title="黑裙？黑群晖！"></a>黑裙？黑群晖！</h2><p>黑群晖这个词，我刚开始也不太明白的，甚至觉得黑群晖是一个电脑品牌，只是名字很酷炫（然而严格意义上就是也是一个电脑整机品牌）。<br>但是我知道另一个名词，黑苹果。众所周知，要想享受苹果的 MacOS 系统就必须要购买苹果品牌的电脑才可以获得最好的系统体验。而老司机们出于钱包问题或者是折腾爱好，就捣鼓出来了黑苹果。<br>顾名思义，就是黑的苹果，不是真正的苹果系统，是装在非苹果电脑硬件系统上的苹果 MacOS 系统。</p><p>这么一想就很简单了。黑群晖，去掉黑字就是“群晖”，群晖是一家 NAS 的制造商，包括硬件和软件在内。</p><p><strong>群晖</strong></p><blockquote><p>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。<br>截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位[5]。<br>参考资料：<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4%E6%9A%89%E7%A7%91%E6%8A%80">群晖 - Wikipedia</a><br><a href="https://www.synology.cn/zh-cn">群晖中文官网</a></p></blockquote><p>体验群晖硬件的话自然就是购买群晖本身的硬件来体验，黑不起来。而软件就可以运行在非群晖硬件上，获得群晖系统的体验和功能。所以说，黑群晖也就不是真正的群晖系统（包括软硬件），而是装在玩家自己 DIY 的 NAS 硬件系统上的群晖系统。</p><h3 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h3><p>那么 NAS 又是啥嘞。说实话，我才之前也没体验过 NAS 的，只是知道这么个东西，可以作为私有云来将资料存储在自己的云上，这样安全性和自由度就更高。</p><p><strong>网络附加存储</strong></p><blockquote><p>网络附加存储设备（英语：Network Attached Storage，缩写：NAS），是一种专门的数据存储技术的名称，它可以直接连接在计算机网络上面，对异质网络用户提供了集中式数据访问服务。出国带着可以使用内部网</p><p>参考资料：<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E9%99%84%E5%8A%A0%E5%84%B2%E5%AD%98">NAS Wikipedia</a></p></blockquote><p>而维基也说了，NAS 的优点在于：</p><blockquote><p>NAS从两方面改善了数据的可用性：<br>即使相应的应用服务器不再工作了，仍然可以读出数据。<br>简易服务器本身不会崩溃，因为它避免了引起服务器崩溃的首要原因，即应用软件引起的问题。</p><p>NAS产品具有的优点包括：<br>NAS产品是真正即插即用产品。NAS设备一般支持多计算机平台，用户通过网络支持协议可进入相同的文档，因而NAS设备无需改造即可用于混合UNIX／Windows NT局域网内。<br>NAS设备的物理位置同样是灵活的，它们可放置在工作组内，靠近数据中心的应用服务器，或者也可放在其他地点，通过物理链路与网络连接起来。无需应用服务器的干预，NAS设备允许用户在网络上存储数据，这样既可减小CPU的开销，也能显著改善网络的性能。</p></blockquote><p>而这些都不是我上这台黑裙的重点。</p><p>重点在于某天（周二）的多媒体技术课上，看到群里大佬 LFX 在浏览器里头使用一个类似桌面环境的东西，于是我就问了一下，得知这是群晖系统的面板。于是就种草了。</p><p>怎么会因为看了一眼就喜欢上了呢？别说，还真是一见钟情。能有多惊艳呢？我先放两张图吧</p><p><img src="/../img/NAS/login.png" alt="Login site"></p><p><img src="/../img/NAS/desktop.png" alt="Desktop"></p><p>这简洁明了的界面，直观的 dashboard，实在是深得我心哇有木有。虽然我已经爱上 sh 的操作方式，但是不得不说，这样美观的鼠标操作的页面真的是太 cool 了。</p><p>话说回来，我虽然是种草了，但是却没有提上日程，毕竟硬件加上折腾成本也不便宜。但是！</p><h3 id="蜗牛星际-J1900-车来"><a href="#蜗牛星际-J1900-车来" class="headerlink" title="蜗牛星际 J1900 车来"></a>蜗牛星际 J1900 车来</h3><p><strong>硬件概况</strong></p><blockquote><p>CPU+主板：    J1900<br>内存：        4G<br>固态：        16G<br>网卡：        Intel i211 千兆<br>重点：        低功耗</p></blockquote><p>关于这辆车的由来，我个人也说不清，只能归纳为发了矿难-&gt;出机器-&gt;翻车-&gt;司机扶正-&gt;又翻车-&gt;又扶正-&gt;下放市场。</p><p>感兴趣可以看看这篇：<a href="https://post.smzdm.com/p/adwl2krk/?send_by=9714620998">矿渣小分队 篇一：矿渣小分队之蜗牛星际主板补件测试</a></p><p>我上这辆车是跟着协会大佬一起上的，没办法，消息不灵通，只能跟着别人的消息走，不过也不算晚，赶在了最适合的时机上车。<br>为什么说是最合适的时机呢？看了上面那篇文章的同学一定也知道了这趟车的翻车性大大的有，而在不断的大佬出手扶正之后终于将车的所有性能榨干，并且登上了神车的神坛，稳如老狗。<br>而另一个因素就是价格，车刚开的时候，价格甚至炒到了400元一台。而经过一天的冷静之后，价格到达了市场最能够接受的270-300元一台。我就是在这个时候上了车。在之后货源慢慢的出手之后，物以稀为贵的定律又发挥出来了，慢慢的价格也回升到了350左右。</p><p>只能说机会是给有准备的人的（我哪有啥准备？）。</p><p>于是乎我就遇到了这种“在刚刚种草的时候车就来了”的奇妙时刻上车了。</p><hr><h2 id="J1900-黑裙可玩性"><a href="#J1900-黑裙可玩性" class="headerlink" title="J1900 黑裙可玩性"></a>J1900 黑裙可玩性</h2><p>正规硬件+正规软件，必定安安心心使用绝不折腾。但是跳出了规规矩矩使用的圈子，只要是 DIY，就必定可玩性 up up。就如同我现在这台 Macbook Pro 2015 T2，纯正的最后一代 A 面亮灯顶配机器，加上最新的 <code>Mojave 10.14.4</code> 系统，完全就安排的妥妥当当，安心的使用就行了，不用 xjr 折腾。</p><p>一台自由度极高并且功能齐全的黑群晖究竟能怎么折腾呢？<br>按照我的折腾时间线，大致可以列出这么多。</p><ol><li>在 J1900 上安装黑群晖【废话？</li><li>安装硬盘配置网络硬盘【NAS 基本操作</li><li>通过 <code>AFP</code> 协议设置 MacOS 的 <code>Time Machine</code> 备份到 NAS 上</li><li>使用阿里云服务器配置 <code>frp</code> 内网穿透，实现外网控制 NAS</li><li>配置 <code>Xware</code> 实现迅雷远程下载功能</li><li>配置 <code>BaiduPCS-GO</code> Web 端实现百度云不限速下载</li><li>配置人人美剧 Linux 客户端<code>rrshareweb</code>实现人人影视下载功能</li><li>配置 Photo Station （群晖官方套件）实现手机照片自动备份</li><li>配置 Music Station （群晖官方套件）实现手机远程聆听 NAS 内无损音源</li><li>配置 Video Station （群晖官方套件）实现 ipad 观看 NAS 内高清片源</li><li>配置计划任务和邮件通知，实现日志远程查看</li><li>配置主板BIOS和系统实现远程唤醒功能</li><li>… 【待续</li></ol><p>以上列出的全部我都已经全部实现了，所以说你所见即所得，后续都会趁热打铁写在博客里面，作为记录，也为茫然的和我一样的小萌新铺路。</p><hr><p>本文完~</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Synology </tag>
            
            <tag> 黑裙 </tag>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑裙 NAS 环境搭建完毕</title>
      <link href="/2019/04/01/post-everyday-2019-4-1/"/>
      <url>/2019/04/01/post-everyday-2019-4-1/</url>
      
        <content type="html"><![CDATA[<p><strong>天气：凉转热转凉</strong></p><h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>没什么大事，一切顺利。</li><li>黑裙 NAS 总体环境搭建完毕，后续会把一些东西记录下来。</li><li>愚人节快乐</li></ol><span id="more"></span><h2 id="每日英语打卡"><a href="#每日英语打卡" class="headerlink" title="每日英语打卡"></a>每日英语打卡</h2><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><ul><li>超纲词汇表 P391、P392</li></ul><p>背了一边四级词汇书总共35个 list 之后，看到后面还有两个表，分别是超纲词汇表，熟词僻义表。<br>仔细看了看，觉得这也得背，于是就开始背了。背了两页之后，感觉自己还差的远呢。看着这些相对于四级的水平的超纲单词，我还十分的陌生，而托福二考就在下周了，心里就开始有些些慌起来。</p><p>List1 &amp; List2</p><p>需要反复的单词</p><blockquote><p>stir v. 动，拨动；使微动；激动；（某种感情）产生 n.  搅拌，搅动；激动，骚乱<br>minus n. 负数；减号 adj. 负的 prep. 减（去）<br>presence n.出席，到场；存在；仪表，仪态<br>resistance n. 反抗，抵制；抵抗力；抵抗性；阻力；电阻</p><p>definite adj. 明确的，肯定的<br>rebel n. 反叛分子，反对者 vi. 反叛，造反；反对，不服从<br>delegate n. 代表，代表团成员 vt. 委派（或选举）… 为代表；授（权），把…委托给<br>signature n. 署名，签字，签名<br>stoop vi. 俯身，弯身 n. 弯腰，曲背</p></blockquote><h3 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h3><p>VOA NEWS Standard<br>Title: 美国运用区块链技术模拟如何运营上市公司</p><p><img src="/../img/punch/20190401.jpg" alt="听力打卡"></p><p>单词积累</p><blockquote><p>consult 商量<br>prospective 有前景的<br>equities 股票<br>non-profit 非盈利的<br>showcase 使展现<br>implement 实施</p></blockquote><hr><p>明天一样加油哦~！</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAS 上跑 BaiduPCS-GO</title>
      <link href="/2019/03/29/post-everyday-2019-3-29/"/>
      <url>/2019/03/29/post-everyday-2019-3-29/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2019年3月29日</strong><br><strong>天气：有点微凉</strong></p><h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>搞定了 NAS 上的百度云的问题</li><li>开始学离散数学了</li></ol><span id="more"></span><h2 id="每日英语打卡"><a href="#每日英语打卡" class="headerlink" title="每日英语打卡"></a>每日英语打卡</h2><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p>List 35</p><blockquote><p>gaol -&gt; jail n. 监狱，监牢；拘留所 vt. 监禁；下狱<br>bundle n. 捆，包，束；包袱 vt. 收集，收拢，把…塞入<br>leather n. 皮革制品，皮革<br>funeral n. 葬礼，丧葬，丧礼<br>coarse adj. 粗的，粗糙的；粗略的；粗俗的<br>specific adj. 特有的，具体的，明确的 n. 详情，细节</p></blockquote><h3 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h3><p><img src="/../img/punch/20190329.jpg" alt="听力打卡(翻译也在这里了嘻嘻)"></p><h3 id="Speaking"><a href="#Speaking" class="headerlink" title="Speaking"></a>Speaking</h3><p>Topic:</p><blockquote><p>It has been said, “Not everything that is learned is contained in books.” Compare and contrast knowledge gained from experience with knowledge gained from books. In your opinion, which source is more important? Why?</p></blockquote><p>Passage:</p><blockquote><p>We gain our knowledge about the world and our life from two sources: from experience and from　books. These two resources are both important, but which of them is more important?</p><p>Knowledge from books forms a very important part of our knowledge structure. In schools and　colleges, we learn knowledge which is fundamental to our future career. We learn knowledge　from books in order to make our contributions to this society in the future. A student learns　mathematic equations and other scientific knowledge and become a scientist or engineer. We will　be illiterate and ignorant without learning knowledge from books. Moreover, we acquire　knowledge about life and the world by reading books, magazines and newspapers. This is also　very important as we cannot experience everything all by ourselves. Therefore books are a very　important source of knowledge.</p><p>On the other hand, we can’t learn everything from a book. “Experience is the best teacher” is an　old cliché, but I agree with it. The most important, and sometimes the hardest, lessons we learn in　life come from our participation in situations. We learn how to get along with others or how to　have self-respect from our experience, not from books. We cannot learn emotional feelings, such　as love and care, through books; they come from our real life experience. Knowledge from　experience is also a very important supplement to knowledge from books.</p><p>Needless to say both learning sources, books and experience, are very important to us. But in my　opinion knowledge from experience is more important, because without knowledge from　experience, it is impossible to get a real understanding of knowledge from books, and how to　apply this knowledge to real world situations.</p></blockquote><h2 id="技术型问题单开-post"><a href="#技术型问题单开-post" class="headerlink" title="技术型问题单开 post"></a>技术型问题单开 post</h2><p>这样我的 post 也可以多一些啦~</p><hr><p>明天也要加油哦~</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一记</title>
      <link href="/2019/03/25/post-everyday-2019-3-25/"/>
      <url>/2019/03/25/post-everyday-2019-3-25/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2019年3月25日</strong><br><strong>天气：热 skr 人</strong></p><h1 id="几间大事"><a href="#几间大事" class="headerlink" title="几间大事"></a>几间大事</h1><ol><li>小宝贝拐拐这个周末来武汉陪我玩了两天，开心~【代价是超支了</li><li>回来之后抓紧时间把 J1900 NAS 搭建起来了，简单安装了黑群晖。【美滋滋</li></ol><span id="more"></span><h2 id="NAS-安装了黑群晖"><a href="#NAS-安装了黑群晖" class="headerlink" title="NAS 安装了黑群晖"></a>NAS 安装了黑群晖</h2><h3 id="配置-ntfs-格式支持"><a href="#配置-ntfs-格式支持" class="headerlink" title="配置 ntfs 格式支持"></a>配置 ntfs 格式支持</h3><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><h3 id="TodoList"><a href="#TodoList" class="headerlink" title="TodoList"></a>TodoList</h3><ul><li><input checked="" disabled="" type="checkbox"> 安装系统</li><li><input disabled="" type="checkbox"> 设置 Time Machine 备份路径</li><li><input disabled="" type="checkbox"> 配置内网穿透</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卸载 miniconda</title>
      <link href="/2019/03/20/post-everyday-2019-3-20/"/>
      <url>/2019/03/20/post-everyday-2019-3-20/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2019年3月20日</strong><br><strong>天气：地上有水转超级热</strong></p><h1 id="几件事情"><a href="#几件事情" class="headerlink" title="几件事情"></a>几件事情</h1><ol><li>从今天起，要严格控制饮食规律。</li><li>给 GoPro 买了一些配件，可以用来做行车记录仪了。【hhh</li><li>把机子里面的<code>miniconda</code>卸载了，卸载的过程很简单；用回了<code>Python3.7</code>，之后应该是需要用<code>virtual-env</code>来控制多版本<code>Python</code>了。</li></ol><span id="more"></span><h2 id="每日英语学习打卡"><a href="#每日英语学习打卡" class="headerlink" title="每日英语学习打卡"></a>每日英语学习打卡</h2><p>昨天没有打卡，所以今天被老师要求手抄一篇范文【捂脸哭</p><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p>list 31</p><p>需要巩固的单词</p><blockquote><p>inquire vt. 打听，询问，调查<br>chin n. 下巴，颚<br>lump n. 块，肿块 v. 结块，将…归并在一起<br>convince vt. 使确信，使信服，说服</p></blockquote><h3 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h3><p>VOA NEWS Standard<br>Title：美朝核问题陷入僵局（前天那篇）</p><p><img src="/../img/punch/20190320.jpg" alt="punch today listening card"></p><p>前天听的时候不知道为什么<code>the summit with Kim-zheng un</code>翻译为特金会，今天才反应过来。<br>字面翻译为与金正恩的峰会，当然是特朗普和金正恩的会议啦，所以就是特金会23333</p><p>还是没记住的单词</p><blockquote><p>dismantle vt. 拆除，拆卸</p></blockquote><h3 id="Speaking"><a href="#Speaking" class="headerlink" title="Speaking"></a>Speaking</h3><p>Topic:</p><blockquote><p>It has been said, “Not everything that is learned is contained in books.” Compare and contrast knowledge gained from experience with knowledge gained from books. In your opinion, which source is more important? Why?</p></blockquote><p>Passage:</p><blockquote><p>We gain our knowledge about the world and our life from two sources: from experience and from　books. These two resources are both important, but which of them is more important?</p><p>Knowledge from books forms a very important part of our knowledge structure. In schools and　colleges, we learn knowledge which is fundamental to our future career. We learn knowledge　from books in order to make our contributions to this society in the future. A student learns　mathematic equations and other scientific knowledge and become a scientist or engineer. We will　be illiterate and ignorant without learning knowledge from books. Moreover, we acquire　knowledge about life and the world by reading books, magazines and newspapers. This is also　very important as we cannot experience everything all by ourselves. Therefore books are a very　important source of knowledge.</p><p>On the other hand, we can’t learn everything from a book. “Experience is the best teacher” is an　old cliché, but I agree with it. The most important, and sometimes the hardest, lessons we learn in　life come from our participation in situations. We learn how to get along with others or how to　have self-respect from our experience, not from books. We cannot learn emotional feelings, such　as love and care, through books; they come from our real life experience. Knowledge from　experience is also a very important supplement to knowledge from books.</p><p>Needless to say both learning sources, books and experience, are very important to us. But in my　opinion knowledge from experience is more important, because without knowledge from　experience, it is impossible to get a real understanding of knowledge from books, and how to　apply this knowledge to real world situations.</p></blockquote><h3 id="Hand-Script-Ariticle"><a href="#Hand-Script-Ariticle" class="headerlink" title="Hand-Script Ariticle"></a>Hand-Script Ariticle</h3><p>就抄读的那篇【再次偷懒</p><p><img src="/../img/punch/20190320-hs.jpg" alt="today&#39;s hand Script"></p><h2 id="今日摄入不正常记录【吃多了"><a href="#今日摄入不正常记录【吃多了" class="headerlink" title="今日摄入不正常记录【吃多了"></a>今日摄入不正常记录【吃多了</h2><p>或许是因为昨晚没有休息好的缘故，今天早上起来已经8点半了，洗漱之后收拾收拾就出发了。</p><p>莫名其妙的和平常不同，买了 Lowson 的<code>咖喱火腿饭团</code>（平时都是吃茶叶蛋），然而这货竟然要花5块钱。<br>好的，重点来了。在11点左右的时候，肚子就开始饿得咕咕叫了。当时是在图书馆，带着耳机，通过骨传导传来的肚子咕咕叫声震耳欲聋，甚至不敢脱下耳机去听一听这个声音有多大。【在路人听来如果像是放屁的话那可丢死人了<br>或许，只是或许，今天是在图书馆度过了早晨，平时都是在图书馆呆到9:40，接着去上课，摸鱼比较多所以消耗的能量不多？<br>又或许，也只是或许，是因为鸡蛋比较难消化？饭团应该是很好消化的。【嗯，的确是这样</p><p>硬挺着在图书馆做完了 Listening，然后去吃了香锅。当然，香锅也是吃的不多，8分饱吧大概。神奇的是下午4点半居然又饿了。【汗颜<br>而且下午的时间还是<code>XML</code>课程，一半睡觉一半摸鱼，完全没有什么消耗。</p><p>赶着大家没有下课，去大吃了一顿香锅（没错！又是香锅。因为鸡胸肉好好吃啊哈哈哈）回到图书馆写下这些话。<br>着实觉得今天的消化系统不对劲，所以危机感突然有些强。和小宝贝聊了之后，觉得应该要控制控制。</p><h3 id="饮食摄入初步规划？"><a href="#饮食摄入初步规划？" class="headerlink" title="饮食摄入初步规划？"></a>饮食摄入初步规划？</h3><ol><li><p>早餐：摄入充足</p><ul><li>可以接受的食物：鸡蛋、包子、面包、麦片等，不超过一个的量</li><li>不可接受的食物：热干面、拌面等一切大碗面食（升糖率过高）</li><li>可以接受的饮品：牛奶、豆浆、白开水等</li><li>不可接受的饮品：任何碳酸饮料、包装茶饮料等</li></ul><p> 搭配：<br>     足够的量，即 <code>2种 x (可接受的食物 x 1) + 可接受的饮品 x 1</code><br>     穷人阶段吃法，即<code>可以接受的食物 x 1</code> <code>EOF</code>。</p></li><li><p>午餐：摄入充足</p></li><li><p>晚餐：摄入八成</p><ul><li>莫得大碗面食，精制糖分摄入大概半碗（家里那种小碗）</li><li>可以有多点蛋白质和蔬菜纤维，或者完全是肉和菜，不摄入糖分。</li><li>需要一份水果</li></ul></li><li><p>夜宵：莫得<br>切莫吃鸡排【哭了，昨天才吃</p></li></ol><p>还依稀记得大一时候宝贝拐给我买了一箱（四包）麦片，一个学期才消耗半包，包括舍友一起的，一年之后扔掉过期的三包半。。。然而她今天还在吃，真实震惊了！！！感觉身边的人都是大佬，只有我意志不够坚定，不配做大佬【再次哭了</p><h2 id="卸载miniconda"><a href="#卸载miniconda" class="headerlink" title="卸载miniconda"></a>卸载<code>miniconda</code></h2><p>因为彻底放弃了<code>tensorflow</code>的学习，所以就逃离<code>Python3.6</code>，坚决投入<code>Python3.7</code>的怀抱了。<br>然而因为前段时间在用<code>tensorflow</code>的时候不能用<code>Python3.7</code>（貌似是因为 tf 里面有一个变量被<code>Python3.7</code>设为了<code>build in</code>，导致不兼容），所以用<code>miniconda</code>配置了多<code>Python</code>环境，也就是<code>Python3.6</code>。<br>今天在使用<code>PyQt5</code>的时候，<code>Python3.6</code>生成的窗口不适应<code>macOS Mojave</code>，而<code>Python3.7</code>则完全适配。心血来潮就转到3.7下了。</p><p>其实说删除一个环境有点困难，甚至还可能把其他的环境弄乱，所以刚开始上手的时候还是心慌慌的。<br>但是翻了一遍 Google 和 stackoverflow，大家都没说出现什么问题，于是乎就放心的去删了【还是慌23333</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>使得 miniconda 环境生效的原因其实就是<code>.bash_profile</code>或者<code>.zshrc</code>里面的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网上的回答</span></span><br><span class="line"><span class="comment"># added by MinicondaX installer</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/Users/your_username/minicondaX/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中</span></span><br><span class="line"><span class="comment"># your_username 是本地账号的用户名</span></span><br><span class="line"><span class="comment"># minicondaX 的 X 是一个数字，确切含义我也不知道</span></span><br><span class="line"><span class="comment"># 而我的安装路径在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># miniconda -&gt; conda</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/miniconda3/bin:<span class="string">&quot;<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><p>把这一句注释掉之后，conda 环境的 bin 路径下的可执行文件就不在 PATH 中了。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>然后就删除本地下的本体文件和一些边缘配置文件就好啦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除miniconda</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/miniconda2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉相关隐藏文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.condarc ~/.conda ~/.continuum</span><br></pre></td></tr></table></figure><p>我甚至还看到了以前用 anaconda 时遗留的环境文件，于是一并删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf .anaconda</span><br></pre></td></tr></table></figure><p>接着就是一些命令的调整，比如要把默认的<code>Python</code>链接到<code>Python3.7</code>，默认的<code>pip</code>链接到<code>pip3</code>等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到命令 link 的位置</span></span><br><span class="line">&gt; <span class="built_in">which</span> python</span><br><span class="line">/usr/local/bin/python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 bin 文件夹</span></span><br><span class="line">&gt; <span class="built_in">cd</span> /usr/local/bin</span><br><span class="line"></span><br><span class="line">&gt; sudo <span class="built_in">rm</span> pip</span><br><span class="line">&gt; sudo <span class="built_in">ln</span> -s pip3 pip</span><br><span class="line"></span><br><span class="line">&gt; sudo <span class="built_in">rm</span> python</span><br><span class="line">&gt; sudo <span class="built_in">ln</span> python3 python</span><br><span class="line"></span><br><span class="line">&gt; sudo <span class="built_in">rm</span> pydoc</span><br><span class="line">&gt; sudo <span class="built_in">ln</span> -s pydoc3 pydoc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就可以用 pip 愉快的配置新的环境了~</p><h2 id="给-GoPro-买了配件"><a href="#给-GoPro-买了配件" class="headerlink" title="给 GoPro 买了配件"></a>给 GoPro 买了配件</h2><p>买了一个手腕带，镜头盖，手持拍摄杆（带三脚架），水下套件，包包夹，还有一个中号收纳盒，以下就花了200多块。<br>虽然说和 GoPro 比起来价格是低了很多，但是还是感觉贵的一批，毕竟 GoPro 不是我出钱买的呀【笑哭</p><hr><p>明天一样加油~</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单纯英语打卡</title>
      <link href="/2019/03/18/post-everyday-2019-3-19/"/>
      <url>/2019/03/18/post-everyday-2019-3-19/</url>
      
        <content type="html"><![CDATA[<h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>卖家补发了一个 msata SSD 16g 来，总算是没翻车</li><li>没了</li></ol><span id="more"></span><h2 id="每日英语打卡"><a href="#每日英语打卡" class="headerlink" title="每日英语打卡"></a>每日英语打卡</h2><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p>list 30</p><p>需要巩固的单词</p><blockquote><p>residence n. 住处，住宅<br>resemble vt. 像，类似于<br>perception 还有感知、察觉的意思，不光是观念、看法<br>speculate v. 推测，推断；投机，做投机买卖<br>reputation n. 名誉，名气，名声<br>regarding prep. 关于<br>spectacular adj. 壮观的，引人注目的 n. 壮观的演出，惊人之举<br>convention n. 习俗，管理；公约；会议</p><blockquote><p>the European Convention of Human Rights 欧洲人权公约</p></blockquote><p>splendid adj. 壮丽的，极好的</p></blockquote><h3 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h3><p>VOA NEWS Standard<br>Title: 朝美谈判陷入僵局</p><p><img src="/../img/punch/20190319.jpg" alt="punch time card"></p><p>单词积累：</p><blockquote><p>all-or-nothing approach 一蹴而就<br>approach n. 接近，方法 vt. 接近，着手处理<br>get rid of 摆脱，除去<br>summit n. 顶点，最高级会议 adj. 最高级的，政府首脑的<br>signaled n. 信号，导火线，暗号；adj. 用信号通知，标志<br>negotiator n. 谈判<br>tougher adj. 坚韧的，牢固的，不屈不挠的 n. 恶棍<br>denuclearization n. 无核化<br>incrementally adv. 增量的，增加的<br>dismantle vt. 拆开，拆卸；废除，取消<br>clear on 明确表示<br>measure 除了测量，还有措施的意思<br>sanction n. 制裁，处罚，认可，支持；vt. 制裁，处罚，批准，鼓励<br>relief n. 减轻，解除，救济，安慰<br>backing up 回投<br>ballistic n. 弹道<br>missile n. 导弹<br>rocket n. 火箭 vt. 用火箭发射<br>ratcheting up 棘手起来<br>posture n. 姿势，态度 vi. 摆姿势<br>revive vi. 苏醒，复活 vt. 使苏醒，回想起，重演，重播<br>falter vi. 蹒跚地走，支吾 vt. 支吾地说，结巴地说 n. 颤抖，踌躇，支吾</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAS 到了</title>
      <link href="/2019/03/15/post-everyday-2019-3-15/"/>
      <url>/2019/03/15/post-everyday-2019-3-15/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2019年3月15日</strong><br><strong>天气：晴转热死</strong></p><h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>成功上车蜗牛星际的 J1900 NAS 系统，简直就是买几箱送电脑。</li><li>昨晚尝试了一次早睡早起，今天中午没有睡午觉导致下午第一节课有些困，其他的一切正常，学习时间多出了许多，并且很有状态。</li><li>晚餐吃到了辣椒，先是感觉巨苦无比，接着是猛兽狂辣，辣出泪来，真实难受。</li></ol><span id="more"></span><h2 id="每日英语打卡"><a href="#每日英语打卡" class="headerlink" title="每日英语打卡"></a>每日英语打卡</h2><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p>list 29</p><h4 id="不认识"><a href="#不认识" class="headerlink" title="不认识"></a>不认识</h4><blockquote><p>spade n. 铁锹<br>furnace n. 炉子，熔炉，鼓风炉<br>oven n. 炉，烤箱<br>republican adj. 共合政体的，共和党的，共和党人</p></blockquote><h4 id="需要巩固"><a href="#需要巩固" class="headerlink" title="需要巩固"></a>需要巩固</h4><blockquote><p>liberate vt. 解放<br>literature n. 文学作品，文学，文献，图书资料<br>adiquate adj. 足够的，可以胜任的<br>complaint n. 抱怨，怨言，控告</p></blockquote><h3 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h3><p>VOA NEWS Standard English<br>Title: 大批非洲移民顶风冒雪进入美加边境<br>【repeat yesterday】</p><p><img src="/../img/punch/20190315-listening.jpg" alt="listening punch time card"></p><p>单词巩固：</p><blockquote><p>blizzard n. 暴风雪，大风雪；大打击  vi. 下暴风雪<br>magnet n. 磁铁，磁石，磁体  【是 e 不是 i</p></blockquote><h3 id="Speaking"><a href="#Speaking" class="headerlink" title="Speaking"></a>Speaking</h3><p>Topic:</p><blockquote><p>Nowadays, food has become easier to prepare. Has this change improved the way people live? Use specific reasons and examples to support your answer.</p></blockquote><p>Passage:</p><blockquote><p>Man, through the ages, has undergone many changes, from a period when he hunted for his food　to the present era when man is dependent on preprocessed foods. During this period not only has　man changed his mode of eating but his whole lifestyle as well. In pursuit of more in this　competitive world, man no longer has time as he once had. He is caught in a race against the　clock. A person who finishes more in lesser time is considered more efficient. This pressure to do　more in less time has affected his eating habits as well and, as a result, man no longer has time to　cook food. Early man’s only objective was to seek food to sustain him and his family. Nowadays　finding food has taken a back seat to other priorities, such as career and education.</p><p>Food is no longer of that importance. This is not an encouraging trend. People are too dependent　on preprocessed or precooked food, which no longer has the freshness it once had. Such foods　loose their mineral and vitamin content and are not as healthy as fresh food. That is why the　number of diseases is also rising. People have also shifted to high calorie content food like French　fries, pizzas, and ice cream, etc., which is causing obesity, fatigue, etc. As man is becoming busy　and too involved in his busy schedule, he has no time even to take care of his own personal needs.</p><p>Furthermore, cooking is an art which is dying out. People once enjoyed cooking . It was a means　of eliminating stress and tension. People were once able to relax during this time and reflect on　their lives.</p><p>People may tend to argue that by using precooked and preprocessed food they are efficiently　using time and can use this precious time saved for other purposes. But is it really worth it? This is　a question whose answer can invite much speculation about whether by saving this little time we　are inviting lots of other problems, which could easily be avoided. It is actually making our lives　not simpler but more complicated. We have lost many of the simpler things in our lives, like the　simple acts of selecting our evening meal, preparing it, and enjoying it with our loved ones, and　we are worse off for it.</p></blockquote><h2 id="蜗牛星际-NAS-上车成功【还有一丝惊喜"><a href="#蜗牛星际-NAS-上车成功【还有一丝惊喜" class="headerlink" title="蜗牛星际 NAS 上车成功【还有一丝惊喜"></a>蜗牛星际 NAS 上车成功【还有一丝惊喜</h2><p>事情从今年3月1日说起【1】，经过大起大落，翻车又扶正，扶正又翻车，最后各路大神纷纷给出了解决方案。</p><p>参考资料：</p><blockquote><p>【1】<a href="https://post.smzdm.com/p/adwl2krk/?send_by=9714620998">矿渣小分队 篇一：矿渣小分队之蜗牛星际主板补件测试</a><br>【2】<a href="https://post.smzdm.com/p/a83d5mv6/">不到300，软路由+黑群晖（蜗牛星际 J1900）</a><br>【3】<a href="https://post.smzdm.com/p/ag89r3m6/">300不到的4盘位NAS？蜗牛星际矿难NAS简测</a><br>【4】<a href="https://post.smzdm.com/p/a3gzd8kr/">j1900 nas 篇一：终于赶上了19年的第一车，j1900 nas，买机箱送主板，蜗牛星际htpc</a></p></blockquote><h3 id="赚到了？赚到了！"><a href="#赚到了？赚到了！" class="headerlink" title="赚到了？赚到了！"></a>赚到了？赚到了！</h3><p>就像很多测评里面说的，买机箱，送主板内存CPU，还带一块辣鸡 SSD。重要的是，我在看评测的时候，大家的都是积了几斤灰的伊拉克成色，而我收到的机子很干净，并且内部也基本没有灰尘，纽扣电池干净的发亮。只有在风扇口那里有些许灰尘。应该是一台轻量使用。感觉赚了！</p><h3 id="打算"><a href="#打算" class="headerlink" title="打算"></a>打算</h3><p>既然有了 NAS，那不上最强 NAS 系统怎么可以？当然要上黑群晖呀~!<br>上了黑裙之后，那就要把 K2P 刷荒野无灯上一波 ipv6了，做一波内网穿透，发挥黑裙的真实实力。正好有一只腾讯云的小鸡，废物利用。</p><hr><p>明天也要一样加油哦~！</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
          <category> My English Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡阵地转移</title>
      <link href="/2019/03/13/post-everyday-2019-3-13/"/>
      <url>/2019/03/13/post-everyday-2019-3-13/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2019年3月13日</strong><br><strong>天气：晴转阴 加小雾霾</strong></p><h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>今天开始2019年的每日一记。【我鸽我自己！【每天文本编辑时间不超过30分钟！</li><li>继续英语的打卡。【看了老师给我的打卡例子，我自己也想到了自己的打卡办法。</li><li>升升的中百罗森开门了。【开心</li></ol><span id="more"></span><h2 id="每日英语打卡"><a href="#每日英语打卡" class="headerlink" title="每日英语打卡"></a>每日英语打卡</h2><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p>list 28</p><blockquote><p>burden n. 重担，精神压力<br>deserve vt. 应受，值得<br>outset n. 开始，开端</p></blockquote><h3 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h3><p>VOA NEWS Standard English<br>Title: 大批非洲移民顶风冒雪进入美加边境</p><p><img src="/../img/punch/20190313-listening.jpg" alt="listening punch time card"></p><p>单词积累</p><blockquote><p>fence n. 栅栏，围墙<br>prairie n. 大草原<br>frostbite  n. 冻伤，冻疮<br>hypothermia n. 低温</p></blockquote><h2 id="升升的罗森有点坑"><a href="#升升的罗森有点坑" class="headerlink" title="升升的罗森有点坑"></a>升升的罗森有点坑</h2><p>Lowson 开门了，今天一早去体验了一下。主要有几个问题。</p><ol><li>新店开业，人有点多。</li><li>服务员不专业，我跟他说“弹牙鱼蛋”，他说“鸭鱼蛋”。还要问旁边的人。</li><li>活动和其他 Lowson 不同步。别的店铺买四送一，送的是任意一串，而这里只能送小香肠。【坑</li></ol><hr><p>明天也要继续加油！</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
          <category> My English Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成为一个能够独当一面的搞机高手需要懂的技能清单（系统篇）</title>
      <link href="/2019/01/25/be-expert-skills-system/"/>
      <url>/2019/01/25/be-expert-skills-system/</url>
      
        <content type="html"><![CDATA[<ol><li>能够熟练制作一个 PE 启动 U盘<ol><li>了解各种 PE 的种类，以及优缺点</li><li>掌握各种 PE 内工具的用法<br> GHOST，Windows 安装器，DiskGenius，傲梅分区助手，分区魔术师，HDTune 等</li></ol></li><li>熟练掌握分区概念，并能够熟练使用分区工具对硬盘进行分区<ol><li>明白：“分区表格式 and 引导方式 and 主流系统采用哪种引导方式” 之间的关系</li><li>懂得如何建立不同种类的分区表，了解不同种类分区表之间的性能差异和优缺点</li></ol></li><li>熟练安装各个版本的 Windows 7 or 10 系统 （Windows XP 可选，建议学一下原版安装）<ol><li>光碟 or U盘镜像启动 setup</li><li>PE 内 setup.exe</li><li>系统内虚拟光驱启动 setup.exe</li><li>GHOST &lt;&lt; sys.gho</li><li>Windows 安装器 &lt;&lt; install.win</li><li>解压镜像到硬盘分区，启动 setup.exe 或引导分区启动【所谓的的“硬盘安装”</li><li>安装备用系统到虚拟硬盘镜像 VHD 并引导【骚操作</li></ol></li><li>对新装系统进行配置，直到能够满足日常使用。并形成自己的习惯体系。<ol><li>激活系统<br> 破解软件、淘宝买码</li><li>设置系统<br> 显示、电源、网络、安全、个性化、账户权限、隐私等各种设置</li><li>安装驱动<ol><li>哪些驱动必备？</li><li>装驱动的顺序？【讲究】</li></ol></li><li>安装必备软件<ol><li>系统辅助防火墙</li><li>通讯、常用工具等</li></ol></li></ol></li><li>对控制面板中的组建有全局性了解，对系统功能的各种入口也应该有充分的意识灵感（跟着感觉走就能够找到功能的入口）</li><li>对 windows&#x2F;system32 中的工具熟练使用</li><li>学会使用 cmd&#x2F;powershell</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机协会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机协会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成为一个能够独当一面的搞机高手需要懂的技能清单（硬件篇）</title>
      <link href="/2019/01/25/be-expert-skills-hardware/"/>
      <url>/2019/01/25/be-expert-skills-hardware/</url>
      
        <content type="html"><![CDATA[<ol><li>知道计算机硬件是由哪些部分组成的，以及每部分是负责哪些功能：<ol><li>mainframe（主机），monitor（显示器），keyboard（键盘），mouse（鼠标），headphone（耳机），printer（打印机）等，以及它们的职责。</li><li>知道主机（mainframe）都是哪些部分组成的，以及各自作用：<ol><li>Motherboard（主板），CPU，RAM（内存），HDD&#x2F;SSD（硬盘），Network card（网卡），Graphics card（显卡），Audio card（声卡），Power source（电源），CD&#x2F;DVD driver（光驱），Fans（风扇）etc.</li><li>motherboard：<br> 作用，平台：Intel、AMD，<br> 参数：<br> 1. chipset（芯片组）<br>     1. intel：H、B、Z<br>     2. AMD：<br> 2. CPU接口<br> 3. 总线带宽：SATA、PCI-E、<br> 4. 供电性能：N相供电</li><li>CPU<br> 平台：Intel、AMD，核心、线程的概念，缓存&#x2F;多级缓存</li><li>RAM<ol><li>代数（包含接口信息）：2&#x2F;3&#x2F;4，频率：1333~3400&#x2F;4000，厂家、颗粒等，</li><li>时序</li></ol></li><li>HDD&#x2F;SSD：<ol><li>HDD<br> 存取原理，运行状态，检测方法，坏道等常见概念</li><li>SSD<br> 颗粒水准：S&#x2F;M&#x2F;T LC，协议&#x2F;总线接口：SATA、Nvme（pci-e）</li></ol></li><li>Network card</li><li>Graphics card：<ol><li>芯片厂家：NVIDIA，AMD</li><li>卡板生产厂家：华硕、技嘉、微星…</li><li>性能指标：代数（芯片&#x2F;架构），流处理器，显存</li></ol></li><li>Audio card：</li><li>Power：<br> 功率：&lt;300w~&gt;900w，全模组、半模组、非模组</li><li>CD&#x2F;DVD driver：</li><li>Fan：</li></ol></li><li>monitor：</li><li>keyboard：<ol><li>机械键盘</li><li>薄膜键盘</li><li>静电容键盘</li></ol></li><li>mouse：</li><li>headphone：（大坑，别玩）</li><li>printer：</li></ol></li><li>计算机低层基本原理：二进制运算，数据传输基本概念（总线），基本在折腾中学会</li><li>计算机基本硬件问题检查：<br> 无法开机、花屏等：<a href="www.baidu.com">百度</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机协会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机协会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机协会干事寒假作业-2019</title>
      <link href="/2019/01/25/computerInstitution-winterassignment-2019/"/>
      <url>/2019/01/25/computerInstitution-winterassignment-2019/</url>
      
        <content type="html"><![CDATA[<p>手机浏览建议横屏。<br>寒假已经开始一个星期左右了，相信大家已经开始想念学校的各种作业了吧【手动滑稽</p><p>于是协会就决定布置一些大家喜欢的作业，一些关于作业的事项先说一下：</p><ol><li>作业完成的过程中遇到的问题，希望踊跃在群内讨论，包括会员群和干事群。</li><li>17级的干事们负责指导和提点18级，给予关键的提示，但是不要有过多的帮助例如“直接给答案”。适当的指导可以是例如：“关于某种语言特性的搜索关键字”或“算法的搜索关键字”或“实现思想”等。</li><li>18级的干事们必须在期限内完成。</li><li>18级的干事们必须在期限内完成。</li><li>18级的干事们必须在期限内完成。</li></ol><p>在做作业之前如果对计算机还没有一定的了解，那么可以查看这个链接，对照里面的内容在搜索引擎上学习。</p><ol><li><a href="https://hexo.chensmallx.top/2019/01/25/be-expert-skills-hardware/">成为一个能够独当一面的搞机高手需要懂的技能清单（硬件篇）</a></li><li><a href="https://hexo.chensmallx.top/2019/01/25/be-expert-skills-system/">成为一个能够独当一面的搞机高手需要懂的技能清单（系统篇）</a></li></ol><p>作业列表：</p><h2 id="1-任意语言的编程练习，练习内容如下：（技术部必须）"><a href="#1-任意语言的编程练习，练习内容如下：（技术部必须）" class="headerlink" title="1. 任意语言的编程练习，练习内容如下：（技术部必须）"></a>1. 任意语言的编程练习，练习内容如下：（技术部必须）</h2><table><thead><tr><th>内容</th><th align="center">时间</th><th align="center">期限</th></tr></thead><tbody><tr><td>四则运算 + 算式语法检查</td><td align="center">3天</td><td align="center">1月28日</td></tr><tr><td>括号运算 + 语法检查完善</td><td align="center">3天</td><td align="center">1月31日</td></tr><tr><td>乘方运算（运算符自定义）</td><td align="center">n天（因为快春节了）</td><td align="center">2月17日（开学）</td></tr></tbody></table><h2 id="2-撰写自己的三观报告，其内容包括：（所有部门）"><a href="#2-撰写自己的三观报告，其内容包括：（所有部门）" class="headerlink" title="2. 撰写自己的三观报告，其内容包括：（所有部门）"></a>2. 撰写自己的三观报告，其内容包括：（所有部门）</h2><table><thead><tr><th>人生观</th><th>价值观</th><th>世界观</th></tr></thead></table><p>根据自己对自己的三观的认识，完成报告。自由撰写，无论多少，重在过程，是一个审视自己和世界的过程。</p><h2 id="3-完成祖传工具包内工具的认识和使用（技术部必须）"><a href="#3-完成祖传工具包内工具的认识和使用（技术部必须）" class="headerlink" title="3. 完成祖传工具包内工具的认识和使用（技术部必须）"></a>3. 完成祖传工具包内工具的认识和使用（技术部必须）</h2><p>其中短时间的程序可一天一个或者一天多个，长时间的程序（&gt;&#x3D;1.5h）可分日进行</p><p>其中必须学会的有：</p><table><thead><tr><th align="center">优先级</th><th align="center">软件名称</th><th>软件作用</th><th align="center">建议学习时间</th><th>备注</th></tr></thead><tbody><tr><td align="center">**</td><td align="center">系统应用软件</td><td>**</td><td align="center">**</td><td>**</td></tr><tr><td align="center">1</td><td align="center">WePE工具箱安装</td><td>迷你维护系统</td><td align="center">2h</td><td>完成本地安装和U盘安装</td></tr><tr><td align="center">2</td><td align="center">3DM-YOUXIYUNXINGKU.v3.0.zip</td><td>微软运行库</td><td align="center">30min</td><td></td></tr><tr><td align="center">3</td><td align="center">Office + KMS</td><td>破解安装 Office 办公软件</td><td align="center">1h</td><td></td></tr><tr><td align="center">4</td><td align="center">Adobe Photoshop CC + amtlib.dll</td><td>破解安装 PS</td><td align="center">1h</td><td></td></tr><tr><td align="center">5</td><td align="center">VMwareWorkstation &#x2F; VirtualBox</td><td>虚拟机</td><td align="center">1h-5h</td><td>搭配下面的工具进行学习</td></tr><tr><td align="center">**</td><td align="center">硬件维护</td><td>**</td><td align="center">**</td><td>**</td></tr><tr><td align="center">6</td><td align="center">DiskGenius &#x2F; PartAssistPro</td><td>硬盘分区工具</td><td align="center">1h</td><td>尝试进行硬盘分区，GPT 和 MBR 的转化，MBR 硬盘分区表的主分区激活。建议在虚拟机下进行</td></tr><tr><td align="center">7</td><td align="center">GHOST</td><td>硬盘备份工具</td><td align="center">1h</td><td>尝试分区完整备份和恢复或在 MBR 分区表下进行 XP 系统安装</td></tr><tr><td align="center">8</td><td align="center">CPU-z + GPU-z</td><td>CPU 参数检测 显卡参数检测</td><td align="center">15min</td><td>大致弄清每个参数的作用，以及每个参数多少代表的性能好坏。</td></tr><tr><td align="center">9</td><td align="center">CrystalDiskMark + CrystalDiskInfo</td><td>硬盘性能测试+参数检测</td><td align="center">15-30min</td><td>掌握关键参数意义（使用搜索引擎）</td></tr><tr><td align="center">10</td><td align="center">AS SSD Benchmark</td><td>硬盘性能检测工具</td><td align="center">15min</td><td>同上</td></tr><tr><td align="center">11</td><td align="center">ATTO Disk Benchmarks</td><td>硬盘性能检测工具</td><td align="center">15min</td><td>同上</td></tr><tr><td align="center">12</td><td align="center">HD Tune Pro</td><td>硬盘性能检测工具</td><td align="center">15min</td><td>同上</td></tr><tr><td align="center">13</td><td align="center">HDDScan</td><td>硬盘错误检测工具</td><td align="center">15-30min</td><td></td></tr><tr><td align="center">14</td><td align="center">ha_memtest</td><td>内存稳定性检测工具</td><td align="center">15min</td><td></td></tr><tr><td align="center">15</td><td align="center">prime95</td><td>系统整体稳定性测试</td><td align="center">15min-3h</td><td>用于检测硬件超频后的稳定性（压力测试）</td></tr><tr><td align="center">16</td><td align="center">HWiNFO64</td><td>系统整体参数检测</td><td align="center">15min</td><td>明白关键参数</td></tr><tr><td align="center">17</td><td align="center">aida64extreme</td><td>系统整体参数检测</td><td align="center">15min</td><td>同上</td></tr><tr><td align="center">18</td><td align="center">3DMark</td><td>系统游戏性能检测工具</td><td align="center">15min-1h</td><td>掌握相关分数代表的意义</td></tr><tr><td align="center">19</td><td align="center">CINEBENCHr15</td><td>系统CPU渲染性能检测</td><td align="center">15-30min</td><td></td></tr><tr><td align="center">20</td><td align="center">Fritz Chess Benchmark</td><td>CPU运算性能测试</td><td align="center">15min</td><td></td></tr><tr><td align="center">21</td><td align="center">ChipGenius</td><td>USB设备芯片检测</td><td align="center">15min</td><td>多试几种 usb 设备，例如U盘、读卡器等</td></tr><tr><td align="center">**</td><td align="center">软件维护</td><td>**</td><td align="center">**</td><td>**</td></tr><tr><td align="center">22</td><td align="center">BCDautofix</td><td>Windows系统引导修复</td><td align="center">15min</td><td></td></tr><tr><td align="center">23</td><td align="center">NTBOOTautofix</td><td>同上，用途基本重复</td><td align="center">15min</td><td></td></tr><tr><td align="center">24</td><td align="center">EasyBCD</td><td>BCD 引导自定义工具</td><td align="center">30min</td><td>首先要明白 BCD 引导是什么，使用次工具才会更加得心应手</td></tr><tr><td align="center">25</td><td align="center">EasyUEFI</td><td>UEFI 引导自定义创建工具</td><td align="center">30min</td><td>同上，需要明白什么是 UEFI 引导</td></tr></tbody></table><p>以下为可选：</p><table><thead><tr><th align="center">优先级</th><th align="center">软件名称</th><th>软件作用</th><th align="center">建议学习时间</th></tr></thead><tbody><tr><td align="center">**</td><td align="center">高级维护工具制作</td><td>**</td><td align="center">**</td></tr><tr><td align="center"></td><td align="center">WinSetupFromUSB</td><td>usb 设备多镜像引导启动制作</td><td align="center">5-10h</td></tr><tr><td align="center"></td><td align="center">rufus</td><td>usb 镜像启动制作</td><td align="center">2h+</td></tr></tbody></table><hr><p>BTW，<a href="https://github.com/orgs/Computer-Institution-WUT">协会 github 地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机协会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机协会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初入 JavaScript</title>
      <link href="/2018/12/10/post-everyday-2018-12-10/"/>
      <url>/2018/12/10/post-everyday-2018-12-10/</url>
      
        <content type="html"><![CDATA[<h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>因为组里需要前端，所以学一下 Vue.js 然而不会 js，所以学一下 js。</li><li>知乎上关于“大学生偷外卖”的问题热度超过2KW，狼灭真多，然而大快人心。</li><li>事情多的一批</li></ol><span id="more"></span><h2 id="入门-JS"><a href="#入门-JS" class="headerlink" title="入门 JS"></a>入门 JS</h2><p>万恶的数据库实验，大佬们主动申请写后端，那就必须有人写前端，然而组里没谁会前端。【着实难受<br>只好自己主动请缨。</p><p>之前在写协会网站的时候写的是静态页面，没怎么用 js，直接就是套着 bootstrap 撸一个外观，光有躯壳没有灵魂。今天和大佬聊天的时候自己说了一句自己都觉得真实的话：“码到用时方恨少。”真的是猛虎流泪.jpg</p><p>摸了一天 JS，最直观的感想就是，麻烦。</p><h2 id="看“偷外卖”话题有感"><a href="#看“偷外卖”话题有感" class="headerlink" title="看“偷外卖”话题有感"></a>看“偷外卖”话题有感</h2><h2 id="最近的事情有点多【mmp"><a href="#最近的事情有点多【mmp" class="headerlink" title="最近的事情有点多【mmp"></a>最近的事情有点多【mmp</h2>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真想呆在床上不下来【冷死我了</title>
      <link href="/2018/12/05/post-everyday-2018-12-5/"/>
      <url>/2018/12/05/post-everyday-2018-12-5/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2018年12月5日</strong><br><strong>天气：阵雨转雨</strong></p><h1 id="几件事情"><a href="#几件事情" class="headerlink" title="几件事情"></a>几件事情</h1><ol><li>开始重新学 c++。</li><li>把电脑拿到床上用真是美滋滋。（要去买床上桌了蛤蛤穷了）</li><li>完成了系统的两个报告。</li><li>明天开始学习编译原理（以实验为契机吧）。</li></ol><span id="more"></span><p>分享一件学C++趣事：<br>    在课上看 c++的教程的时候，和旁边的鱼鱼瑜大佬和 Maymomo 大佬说想学 c++，结果他们的回应是：“别学！”，真是哭笑不得。</p><hr><p>明天也要加油哦~</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>皮了几天美滋滋</title>
      <link href="/2018/12/04/post-everyday-2018-12-4/"/>
      <url>/2018/12/04/post-everyday-2018-12-4/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2018年12月4日</strong><br><strong>天气：阴转小雨</strong></p><h1 id="几件大事"><a href="#几件大事" class="headerlink" title="几件大事"></a>几件大事</h1><ol><li>浪过了几天，生活回到正轨。</li><li>后天交系统实验，心慌慌。</li></ol><span id="more"></span><h2 id="街道口搜罗的新店"><a href="#街道口搜罗的新店" class="headerlink" title="街道口搜罗的新店"></a>街道口搜罗的新店</h2><p>浪的这几天突然就发现了很多很不错的，在学校附近的新店，真的能说是太棒了。</p><ol><li>小川料理（街道口总店）</li><li>玖段烤肉</li><li>RollingCat 猫咖</li></ol><p>这几家店都在街道口。</p><p>先说一下小川料理。算下来小川已经去过三次了，第一次去只是感受了一下里面的装潢和气氛（其实体验也挺好的）。<br>第一次只是用作充饥作用，吃了豚骨拉面和薄切三文鱼，味道中规中矩，让人觉得很地道，首先就在心中好评了。而那次一到就有单人座，心情超好，所以也是在缘分层面给了小川很高的分数。</p><p>而第二次和第三次去就很不一样了，可以说是很近距离接触到了小川最精髓的部分。<br>第二次和小宝贝一起去，第三次是和小宝贝、槟槟和大敏一起去。这两次是临近的两天之内去的，连着两天都吃日料，真的好开心。</p><p>推荐的菜品：鹅肝手握、土豆泥、蟹肉、炸鸡<br>首推鹅肝手握！超级好吃。</p><p>鹅肝手握：</p><blockquote><p>我之前没有正式的吃过鹅肝，因为本身就对其他肝类食物过敏，一吃就吐的那种，所以刚开始时有些谨慎对待这道菜的。<br>在它上来的时候，两块鹅肝大块大块地就这样趴在一小团米饭上，色泽也不能说是很鲜艳，毕竟是烤物。<br>入口的时候，饱满的撑满了整个口腔。在咬下去的那一瞬间，烤物表现出来的独特的“咔擦”响声大约持续了零点几秒，随之而来的是鹅肝脂肪在口中的爆发。一股浓郁的动物内脏特有的香味缺不带任何一点腥味在口腔、鼻腔中荡开，浓厚的脂肪瞬间包裹住了那一小团寿司米饭，米饭带有的寿司醋的轻微酸味又让整个鹅肝手握的味道增添了一个层次。在紧接着的几次咀嚼中，所有的味道混为一体，相辅相成，让人不舍得下咽，只想让这美好的瞬间留在自己的口中。</p></blockquote><p>一道菜让人爱上一种食材，这是真的。以后鹅肝也成为我的新宠了，怪不得那么多人那么喜欢吃鹅肝，说鹅肝是食材中的贵族，这次是真的体会到了。</p><p>土豆泥是迄今为止我吃过最好吃的土豆泥，黄瓜丝和胡萝卜丝在当中，为其口干和味道的增色虽然不多但是却无法忽略。蟹肉，一整块大大的蟹肉，作为一个海南人，在吃到这块蟹肉的时候是无比满足的，紧实的肉质和厚重的沙拉芥末酱，再加上蟹子点缀，我是要为这道菜打 CALL 的。炸鸡，我想是在一个极度高温的油中炸出来的，因为这炸鸡在外皮酥脆的情况下还能够保证内部的汁水饱满，称为“外酥里嫩”也不为过。</p><p>以后有空一定会再去的~</p><hr><p>明天也要加油哦~</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写了一天C语言 - 不同系统对库的实现不同</title>
      <link href="/2018/11/27/post-everyday-2018-11-27/"/>
      <url>/2018/11/27/post-everyday-2018-11-27/</url>
      
        <content type="html"><![CDATA[<h1 id="今天的几件大事"><a href="#今天的几件大事" class="headerlink" title="今天的几件大事"></a>今天的几件大事</h1><ol><li>一看课表，第一节没课了！开心了一会。然后想起软件需求工程还有实验，哭辽 TvT</li><li>不同的操作系统上果然对标准库的实现是不同的。今天近距离接触了一次。</li></ol><p><strong>MACRO 居然是宏的意思</strong></p><h2 id="mac-osx-上的-malloc-和-Windows-上的-malloc-处于不同的头文件"><a href="#mac-osx-上的-malloc-和-Windows-上的-malloc-处于不同的头文件" class="headerlink" title="mac osx 上的 malloc 和 Windows 上的 malloc 处于不同的头文件"></a>mac osx 上的 malloc 和 Windows 上的 malloc 处于不同的头文件</h2><p>动态分配内存需要使用 <code>malloc</code> 函数，原型在 stdlib.h 里面，而使用它或者外围函数（例如 <code>malloc_size</code> or <code>_msize</code>）的时候还要包含一个本身的头文件，例如 Mac 下是 &lt;malloc&#x2F;malloc.h&gt; 而 Windows 下是在&lt;malloc.h&gt;。</p><p>而 access 函数在 Mac 下是在 unistd.h，在 Windows 下是在 io.h。</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水一水，被复习和作业冲昏头脑</title>
      <link href="/2018/11/26/post-everyday-2018-11-26/"/>
      <url>/2018/11/26/post-everyday-2018-11-26/</url>
      
        <content type="html"><![CDATA[<p>昨天水掉一天的每日一记，实在是没什么好写的呢。</p><p>今天就那么几件事情啦：</p><ol><li>看了一下嵌入式的课件，感觉不是很有兴趣，还是好好应付考试吧。</li><li>继续写C语言报告，这东西太烦人了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO Local Search 配置</title>
      <link href="/2018/11/24/post-everyday-2018-11-24/"/>
      <url>/2018/11/24/post-everyday-2018-11-24/</url>
      
        <content type="html"><![CDATA[<p><strong>日期：2018年11月24日</strong><br><strong>天气：晴</strong></p><span id="more"></span><h1 id="今天照常："><a href="#今天照常：" class="headerlink" title="今天照常："></a>今天照常：</h1><ol><li>成功克制了自己吃日料的欲望，没有浪费过多的时间</li><li>去了区块链的讲座，有个业界大佬叫做 PZ，听了一个半小时，感觉还是围绕着币在讲。目前只要扯上区块链，就完全跳不出币的元素。甚至还有在怂恿现场的观众买币。最后没有喝到奶茶，有点亏。</li><li><a href="https://www.yuketang.cn/web">雨课堂</a>居然有网页版，这个可以说是很舒服了，直接可以打印课件生成 PDF，之前还很难受的一页一页保存，简直傻的一批。</li><li>在电路课上成功完成了博客的搜索功能的配置。说简单也简单，然而最主要是明白其中的原理。</li></ol><h1 id="HEXO-的本地搜索功能配置"><a href="#HEXO-的本地搜索功能配置" class="headerlink" title="HEXO 的本地搜索功能配置"></a>HEXO 的本地搜索功能配置</h1><h2 id="配置-HEXO-全局设置"><a href="#配置-HEXO-全局设置" class="headerlink" title="配置 HEXO 全局设置"></a>配置 HEXO 全局设置</h2><p>首先要安装一个重要的依赖 hexo-generator-search</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>然后修改 _config.yml 文件使 hexo 开启搜索功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置到这个程度之后，在执行<code>hexo g</code>的时候就会在 public 目录下自动生成一个叫做<code>search.xml</code>的文件，这个就是搜索功能的关键所在。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>设置 melody.yml 文件中的 local search 项目为 true，具体配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># or false</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># if there are no result</span></span><br></pre></td></tr></table></figure><p>其中，<code>input_placeholder</code>是没有输入时显示的默认文本，可以自定义，<code>hits_empty</code>是搜索到没有结果时候显示的内容。</p><h2 id="改坑"><a href="#改坑" class="headerlink" title="改坑"></a>改坑</h2><p>对照插件和主题官方 document 设置之后，在站点上只显示搜索按钮和能够弹出搜索框，输入内容之后却没有出现搜索结果，这让人实在苦恼。</p><p>以为是主题的锅，所以找了很多用 melody 主题的博客，有的和我一样没有结果，有的有搜索结果。这令我十分费解，高概率出现问题的话，觉得这肯定是官方文档的教程出现错误了。</p><p>在一番冥思苦想之后，决定去看看 melody 的 issue 列表。结果真的让我喜出望外（有人也遇到了和我一样的问题）。</p><p>问题原帖：<a href="https://github.com/Molunerfinn/hexo-theme-melody/issues/116#issuecomment-404512342">Local Search Failed #116</a></p><p><img src="https://user-images.githubusercontent.com/12621342/42636132-8bcb4a24-861a-11e8-986b-4a8620eb4e93.png" alt="Molunerfinn commented on Jul 12"></p><h3 id="误改"><a href="#误改" class="headerlink" title="误改"></a>误改</h3><p>在看到这张图之后，我立即就明白了。站点的运行实际上也是一个目录在跑，如果定位一个文件用了相对地址的话，那么在其他的路径下就很可能找不到它。</p><p>具体就是：</p><ul><li><code>search.xml</code>是一个相对路径，只有在包含了这个文件的目录下，才可以准确找到它。</li><li><code>/search.xml</code>是一个绝对路径，无论在站点的那个地方都可以找到它。</li></ul><p>所以将 _config.yml 里面的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><del>就大功告成了。</del></p><h3 id="真-改法"><a href="#真-改法" class="headerlink" title="真 - 改法"></a>真 - 改法</h3><p>在修改成功后的 _config.yml 中有这样一段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.chensmallx.top</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p>原来是这样的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://blog.chensmallx.top</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p>区别就在于 http 和 https 的区别上。</p><p>在启用了 ssl 的站点上还设置站点域名为 http 的话，会导致 search.xml 这样的文件被链接到 http 协议上，而没有经过 https，这样自然就无法加载了。</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO 支持 PWA</title>
      <link href="/2018/11/23/post-everyday-2018-11-23/"/>
      <url>/2018/11/23/post-everyday-2018-11-23/</url>
      
        <content type="html"><![CDATA[<p>今天发生的大事：</p><ol><li>计协讲座依旧这么水，那么尬。真实难受。</li><li>配置了一通 hexo，支持了 PWA，更加舒服了。</li></ol><h1 id="HEXO-支持-PWA-桌面应用"><a href="#HEXO-支持-PWA-桌面应用" class="headerlink" title="HEXO 支持 PWA 桌面应用"></a>HEXO 支持 PWA 桌面应用</h1><h2 id="安装-npm-模块"><a href="#安装-npm-模块" class="headerlink" title="安装 npm 模块"></a>安装 npm 模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-offline 或者 yarn add hexo-offline</span><br></pre></td></tr></table></figure><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 _config.yml</h2><p>在 _config.yml 中加入 PWA 的配置，以使开启站点编译支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Offline</span><br><span class="line">## Config passed to sw-precache</span><br><span class="line">## https://github.com/JLHwung/hexo-offline</span><br><span class="line">offline:</span><br><span class="line">  maximumFileSizeToCacheInBytes: 10485760</span><br><span class="line">  staticFileGlobs:</span><br><span class="line">    - public/**/*.&#123;js,html,css,png,jpg,jpeg,gif,svg,json,xml&#125;</span><br><span class="line">  stripPrefix: public</span><br><span class="line">  verbose: true</span><br><span class="line">  runtimeCaching:</span><br><span class="line">    # CDNs - should be cacheFirst, since they should be used specific versions so should not change</span><br><span class="line">    - urlPattern: /*</span><br><span class="line">      handler: cacheFirst</span><br><span class="line">      options:</span><br><span class="line">        origin: cdnjs.cloudflare.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置-melody-yml"><a href="#配置-melody-yml" class="headerlink" title="配置 melody.yml"></a>配置 melody.yml</h2><p>在主题配置文件中开启 pwa 支持，使得主题在编译的时候启用 pwa 选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwa:</span><br><span class="line">  enable: true</span><br><span class="line">  manifest: /manifest.json</span><br></pre></td></tr></table></figure><h2 id="生成-PWA-的配置文件-manifest-json"><a href="#生成-PWA-的配置文件-manifest-json" class="headerlink" title="生成 PWA 的配置文件 manifest.json"></a>生成 PWA 的配置文件 manifest.json</h2><p>在 <a href="https://app-manifest.firebaseapp.com/">App Manifest Generator</a> 配置好自己网页要生成 PWA 的应用的格式，例如主题背景颜色图标等等。</p><p>本站点的 manifest 配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Case of Xeon&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SmallXeon&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#2196f3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b1ddff&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fullscreen&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon/idpi.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36x36&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon/mdpi.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48x48&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon/xhdpi.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;96x96&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon/xxhdpi.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;144x144&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon/xxxhdpi.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以很清楚的看到，站点名称，站点短名等等，都是可以设置的。</p><p>而有一点比较有意思，就是 display 模式的选择：</p><table><thead><tr><th align="center">显示类型</th><th align="center">描述</th><th align="center">降级显示类型</th></tr></thead><tbody><tr><td align="center">fullscreen</td><td align="center">应用的显示界面将占满整个屏幕</td><td align="center">standalone</td></tr><tr><td align="center">standalone</td><td align="center">浏览器相关UI（如导航栏、工具栏等）将会被隐藏</td><td align="center">minimal-ui</td></tr><tr><td align="center">minimal-ui</td><td align="center">显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同</td><td align="center">browser</td></tr><tr><td align="center">browser</td><td align="center">浏览器模式，与普通网页在浏览器中打开的显示一致</td><td align="center">(None)</td></tr></tbody></table><p>要根据自己的需求来选择 display 的现实模式，我想就让博客像一个应用一样打开像一个全屏化的 APP，所以就选了<code>fullscreen</code>。</p><p>最后将配置好的 manifest.json 拷贝下来放到 hexo 的 source 目录下，就大功告成了！</p><h2 id="配置图标"><a href="#配置图标" class="headerlink" title="配置图标"></a>配置图标</h2><p>在看到 manifest.json 的内容之后，估计也能看出来图标是怎么配置的了。</p><p>就贴几个好用的在线工具，可以直接生成不同大小的图标。</p><p>1：1图片生成不同尺寸的 app 图标，格式为 png。需要使用特殊的上网方式才能顺利上去。<a href="https://resizeappicon.com/">resizeappicon.com - Web-based icon resizer for iOS and Android</a></p><p>典型的 SVG 图标网页，直接可以下载或者拷贝 svg 信息。<a href="https://simpleicons.org/">simpleicons</a></p><p>svg在线解析。<a href="https://yoksel.github.io/url-encoder/">URL-encoder for SVG</a></p><p>png 转 ico。此外还有很多转换功能。<a href="https://www.aconvert.com/cn/icon/png-to-ico/">aconvert</a></p><hr><p>明天也要加油~</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL错位输出原因与解决办法</title>
      <link href="/2018/11/23/MySQL-disorder-output-solution/"/>
      <url>/2018/11/23/MySQL-disorder-output-solution/</url>
      
        <content type="html"><![CDATA[<p>使用数据导入的时候会因为解析不同的原因，使得数据类型不匹配，从而出现显示乱码（这种情况充其量也算是一种乱码了吧）。</p><p>解决办法：使用 DataGrip 将错误的<code>NULL</code>改为正确的<code>&lt;null&gt;</code>，将与此类型匹配的数据传入并覆盖源数据即可。</p><span id="more"></span><h1 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h1><p>前倾提要：<a href="https://hexo.chensmallx.top/2018/11/21/post-everyday-2018-11-21/#%E7%94%A8-dataGrip-%E6%8A%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A1%A8%E4%BF%AE%E5%A5%BD%E4%BA%86">用 dataGrip 把数据库的一个表修好了</a></p><h1 id="终于找到问题所在"><a href="#终于找到问题所在" class="headerlink" title="终于找到问题所在"></a>终于找到问题所在</h1><p>使用数据导入的时候会因为解析不同的原因，使得数据类型不匹配，从而出现显示乱码（这种情况充其量也算是一种乱码了吧）。</p><p>解决办法：使用 DataGrip 将错误的<code>NULL</code>改为正确的<code>&lt;null&gt;</code>，将与此类型匹配的数据传入并覆盖源数据即可。</p><p>如果按照原来的错误输出，显示的应该是下面这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_dp;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> departmentID <span class="operator">|</span> departName      <span class="operator">|</span> comment      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line">        <span class="operator">|</span>      <span class="operator">|</span> 人力资源部      <span class="operator">|</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="operator">|</span>      <span class="operator">|</span> 经理办公室      <span class="operator">|</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="operator">|</span>      <span class="operator">|</span> 研发部          <span class="operator">|</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="operator">|</span>      <span class="operator">|</span> 市场部          <span class="operator">|</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>令我百思不得其解，用了很多种办法都没办法正确输出，曾一度不想继续做这个实验。</p><p>然而今天，在对数据库进行改动操作的时候，发现了下面的这种情况。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> v_dp <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;广告部&#x27;</span>,<span class="string">&#x27;推广产品&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;策划部&#x27;</span>,<span class="string">&#x27;策划产品&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_dp;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> departmentID <span class="operator">|</span> departName      <span class="operator">|</span> comment      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line">        <span class="operator">|</span>      <span class="operator">|</span> 人力资源部      <span class="operator">|</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="operator">|</span>      <span class="operator">|</span> 经理办公室      <span class="operator">|</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="operator">|</span>      <span class="operator">|</span> 研发部          <span class="operator">|</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="operator">|</span>      <span class="operator">|</span> 市场部          <span class="operator">|</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>            <span class="operator">|</span> 广告部          <span class="operator">|</span> 推广产品     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>            <span class="operator">|</span> 策划部          <span class="operator">|</span> 策划产品     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>出现了这样的情况，让我喜出望外，立马意识到，肯定是原来的<code>NULL</code>数据格式不正确。<br>果不其然，打开 DataGrip 看了一下 comment 字段的数据，虽然表面上都是 NULL，但是右键 Set NULL 之后，神奇的事情出现了。正确的 NULL 识别应该为<code>&lt;null&gt;</code>。</p><p><img src="/../img/sql-null.png" alt="正确的 NULL"></p><p>全部 Set NULL 之后，再回到 command line 界面查询表就能看到表的打印完全舒服了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_dp;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> departmentID <span class="operator">|</span> departName      <span class="operator">|</span> comment      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span> 人力资源部      <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>            <span class="operator">|</span> 经理办公室      <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>            <span class="operator">|</span> 研发部          <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>            <span class="operator">|</span> 市场部          <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>            <span class="operator">|</span> 广告部          <span class="operator">|</span> 推广产品     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>            <span class="operator">|</span> 策划部          <span class="operator">|</span> 策划产品     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+--------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> DataGrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H61+G550 通过测试</title>
      <link href="/2018/11/22/post-everyday-2018-11-22/"/>
      <url>/2018/11/22/post-everyday-2018-11-22/</url>
      
        <content type="html"><![CDATA[<h1 id="几件大事："><a href="#几件大事：" class="headerlink" title="几件大事："></a>几件大事：</h1><ol><li>测试新平台成功 没翻车。</li><li>今天肯德基感恩节活动，忍住了，没去。</li><li>开始复习软件需求工程</li></ol><h2 id="intel-H61-G550-通电测试"><a href="#intel-H61-G550-通电测试" class="headerlink" title="intel H61 + G550 通电测试"></a>intel H61 + G550 通电测试</h2><p>顺利的装上了系统，就是视频输出颜色有问题，过于偏蓝。</p><p><img src="/../img/testH61.jpg" alt="H61+G550"></p><hr><p>明天也要好好继续加油哦~</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOSX下VMWareFusion-Ubuntu回收空间</title>
      <link href="/2018/11/22/VMWare-Fusion-recycle-storage/"/>
      <url>/2018/11/22/VMWare-Fusion-recycle-storage/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要回收-VMWare-的空间？"><a href="#为什么要回收-VMWare-的空间？" class="headerlink" title="为什么要回收 VMWare 的空间？"></a>为什么要回收 VMWare 的空间？</h2><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>例行清理 mac 的垃圾文件，虽然自己的硬盘有512g，然而里头东西超过250g 的时候对于强迫症患者来说还是难受的一批。</p><p>用 cleanmymac 清来清去也只能清一点点。删除了 Download 文件夹里面不需要的东西之后，发现也才多了半个 G，是我平时下的东西太小了吗【问号脸</p><p>用 DaicyDisk 分析了一下磁盘，发现在用户文件夹下，占空间较大的就是两个虚拟机——Parallels Desktop 和 VMWare Fusion。</p><p>因为在 PD 上装的是 Windows，搭了一个 C&#x2F;C++ 的开发环境，总共 VS 下来加系统也得30多 g，基本上是回收不了太多空间了。</p><p>所以就盯上了 VM。</p><p>VM 特别的诡异，在 Linux 里面看包含 swap 也只用了8g 多的空间，结果整个 vmdk 文件就占了13g 多，所以这就需要用手术刀咔擦一下调教调教。</p><p>而且！而且！不知道为啥我的 VM 里头的可回收没有！</p><p><img src="/../img/vm-recycal.png" alt="可回收空间是没有的！"></p><p>没办法死马当活马医了，总是有办法的。</p><h2 id="折腾开始"><a href="#折腾开始" class="headerlink" title="折腾开始"></a>折腾开始</h2><h3 id="清-apt-缓存"><a href="#清-apt-缓存" class="headerlink" title="清 apt 缓存"></a>清 apt 缓存</h3><p>首先例行的就是清除 apt 的缓存，这个稍微用过 Ubuntu 的小伙伴都知道怎么清掉不用的依赖和缓存。（但是其实空不出多少空间来的，因为软件包什么的也就几百几时 mb 这样）</p><p>总之有一点是一点吧【习习蛤蛤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoclean <span class="comment"># autoremove 也一样</span></span><br><span class="line">sudo apt-get clean</span><br></pre></td></tr></table></figure><p>结果清掉了一点。结果还是没法回收。</p><h3 id="Linux-神奇的-zero"><a href="#Linux-神奇的-zero" class="headerlink" title="Linux 神奇的 zero"></a>Linux 神奇的 zero</h3><p>因为找不到占空间的东西，所以推测应该是硬盘缓存之类的，明明删除了但是还是留下了没有清除的数据。</p><p>摘自维基百科：</p><blockquote><p>在类UNIX 操作系统中, &#x2F;dev&#x2F;zero 是一个特殊的文件，当你读它的时候，它会提供无限的空字符(NULL, ASCII NUL, 0x00)。其中的一个典型用法是用它提供的字符流来覆盖信息，另一个常见用法是产生一个特定大小的空白文件。BSD就是通过mmap把&#x2F;dev&#x2F;zero映射到虚地址空间实现共享内存的。可以使用mmap将&#x2F;dev&#x2F;zero映射到一个虚拟的内存空间，这个操作的效果等同于使用一段匿名的内存（没有和任何文件相关）。</p></blockquote><p>所以我们可以直接读取这个文件写到一个新的文件里面直到硬盘占满，然后删除这个文件就可以把那些幽灵空间都置零。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /dev/zero &gt; zero <span class="comment"># 此处的 zero 文件就可以是想要回收空间的挂载点</span></span><br><span class="line">sudo <span class="built_in">sync</span> <span class="comment"># 有些系统需要同步一下才可以把内存的文件改动写进硬盘</span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line">sudo <span class="built_in">sync</span></span><br><span class="line">sudo <span class="built_in">rm</span> zero</span><br></pre></td></tr></table></figure><p>有一点很重要，就是执行完了 zero 的文件写入之后可能会提示硬盘已满，这时候不要惊慌，要的就是这种效果。</p><p>这时候虽然在系统里面看是没有啥变化的，但是在虚拟硬盘的逻辑上已经发生了空余空间全置零的改变。</p><h3 id="宿主机操作-调用-vm-自带工具"><a href="#宿主机操作-调用-vm-自带工具" class="headerlink" title="宿主机操作 调用 vm 自带工具"></a>宿主机操作 调用 vm 自带工具</h3><p>这时候就需要宿主机这边的空间回收操作了，然而 GUI 界面给的接口完全没法用，回收不到啥。所以查了半天，还是看到了骚操作。</p><p>这个 vmware-vdiskmanager 也是 vm 自带的工具，然而并没有用在 GUI 的操作界面上，只能手动调用。</p><p>先整理一下硬盘碎片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Applications/VMware\ Fusion.app/Contents/Library</span><br><span class="line">$ ./vmware-vdiskmanager -d ~/VMWare/Ubuntu\ 64\ 位.vmwarevm/虚拟磁盘.vmdk</span><br><span class="line">  Defragment: 100% <span class="keyword">done</span>.</span><br><span class="line">Defragmentation completed successfully.</span><br></pre></td></tr></table></figure><p>然后看一下现在虚拟硬盘文件的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l ~/VMWare/Ubuntu\ 64\ 位.vmwarevm/虚拟磁盘.vmdk</span><br><span class="line">-rw-------  1 chenke  staff  14744485888 11 22 12:08 /Users/chenke/VMWare/Ubuntu 64 位.vmwarevm/虚拟磁盘.vmdk</span><br></pre></td></tr></table></figure><p>正式开始回收空间，等到进度跑满就完成了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./vmware-vdiskmanager -k ~/VMWare/Ubuntu\ 64\ 位.vmwarevm/虚拟磁盘.vmdk</span><br><span class="line">  Shrink: 100% <span class="keyword">done</span>.</span><br><span class="line">Shrink completed successfully.</span><br></pre></td></tr></table></figure><p>再来看看回收空间之后的空间大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l ~/VMWare/Ubuntu\ 64\ 位.vmwarevm/虚拟磁盘.vmdk</span><br><span class="line">-rw-------  1 chenke  staff  8921939968 11 22 12:11 /Users/chenke/VMWare/Ubuntu 64 位.vmwarevm/虚拟磁盘.vmdk</span><br></pre></td></tr></table></figure><p>可以看到，虚拟硬盘从<code>14744485888</code>字节减小到了<code>8921939968</code>字节，也就是<code>13.73</code>G 减小到了<code>8.3</code>G，可以说效果十分拔群了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux Learning </category>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VMWare Fusion </tag>
            
            <tag> MacOSX </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 错乱 - Gr09 傻评</title>
      <link href="/2018/11/21/post-everyday-2018-11-21/"/>
      <url>/2018/11/21/post-everyday-2018-11-21/</url>
      
        <content type="html"><![CDATA[<p>日期：2018年11月21日 星期三<br>天气：晴</p><span id="more"></span><p><strong>每日一记第二天</strong></p><p>今天的几件大事~</p><h2 id="GR09终于到货"><a href="#GR09终于到货" class="headerlink" title="GR09终于到货"></a>GR09终于到货</h2><p>盼星星盼月亮，终于在双十一之后的第十天收到了迟来的 GR09。</p><p>这也是至今为止玩过最贵的入耳了吧。以前也就玩过a73, titan5都是799价位的，声音可以说是已经很不错了。gr09却是1999价位的，就等煲100个小时之后看看真正的声音吧~</p><p>噜噜：</p><blockquote><p>评价耳机从高中低频 解析声场动态瞬态出发</p></blockquote><p>高频：圆润不刺耳，甚至听起来有些暗。也许是没煲开的原因。<br>中频：人声稍微有点远，在歌手的结像上也比较清晰，相比于 a73和 titan5不知道要高到哪里去了。<br>低频：低频是我喜欢的那种低频，量感不足但是点到即止，快放块收，不拖沓。</p><p><strong>挖坑待补</strong></p><p>解析：<br>声场：<br>动态：<br>瞬态：</p><h2 id="用-dataGrip-把数据库的一个表修好了"><a href="#用-dataGrip-把数据库的一个表修好了" class="headerlink" title="用 dataGrip 把数据库的一个表修好了"></a>用 dataGrip 把数据库的一个表修好了</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> departmentID <span class="keyword">FROM</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> departmentID <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line">           <span class="operator">|</span></span><br><span class="line">           <span class="operator">|</span></span><br><span class="line">           <span class="operator">|</span></span><br><span class="line">           <span class="operator">|</span></span><br><span class="line">           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>总是显示不完全，此处 departmentID 是一个 <code>CHAR(8)</code>，status 也显示所有的编码均为 utf8，理论上不存在编码问题。然而使用<code>UPDATE</code> 指令也没办法让数据输出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> status</span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line">mysql  Ver <span class="number">14.14</span> Distrib <span class="number">5.7</span><span class="number">.21</span>, <span class="keyword">for</span> macos10<span class="number">.13</span> (x86_64) <span class="keyword">using</span>  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:        <span class="number">62</span></span><br><span class="line"><span class="keyword">Current</span> database:    dbem</span><br><span class="line"><span class="keyword">Current</span> <span class="keyword">user</span>:        root<span class="variable">@localhost</span></span><br><span class="line">SSL:            <span class="keyword">Not</span> <span class="keyword">in</span> use</span><br><span class="line"><span class="keyword">Current</span> pager:        less</span><br><span class="line"><span class="keyword">Using</span> outfile:        <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">Using</span> delimiter:    ;</span><br><span class="line">Server version:        <span class="number">5.7</span><span class="number">.21</span> MySQL Community Server (GPL)</span><br><span class="line">Protocol version:    <span class="number">10</span></span><br><span class="line">Connection:        Localhost via UNIX socket</span><br><span class="line">Server characterset:    utf8</span><br><span class="line">Db     characterset:    utf8</span><br><span class="line">Client characterset:    utf8</span><br><span class="line">Conn.  characterset:    utf8</span><br><span class="line">UNIX socket:        <span class="operator">/</span>tmp<span class="operator">/</span>mysql.sock</span><br><span class="line">Uptime:            <span class="number">5</span> days <span class="number">13</span> hours <span class="number">47</span> min <span class="number">1</span> sec</span><br><span class="line"></span><br><span class="line">Threads: <span class="number">1</span>  Questions: <span class="number">2346</span>  Slow queries: <span class="number">0</span>  Opens: <span class="number">716</span>  Flush tables: <span class="number">1</span>  <span class="keyword">Open</span> tables: <span class="number">485</span>  Queries <span class="keyword">per</span> <span class="keyword">second</span> avg: <span class="number">0.004</span></span><br><span class="line"><span class="comment">--------------</span></span><br></pre></td></tr></table></figure><p>当然，使用<code>\G</code>也是个不错的选择，但是这样输出十分的丑，没办法截图放到实验报告里面呀，颜值还是很重要的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> departmentID <span class="keyword">FROM</span> employee\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">departmentID: <span class="number">2</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">departmentID: <span class="number">1</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">departmentID: <span class="number">1</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">4.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">departmentID: <span class="number">5</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">5.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">departmentID: <span class="number">3</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">6.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">departmentID: <span class="number">3</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">7.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">departmentID: <span class="number">4</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">8.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">departmentID: <span class="number">4</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line"><span class="keyword">No</span> query specified</span><br></pre></td></tr></table></figure><p>走投无路，治好选择使用其他优化的比较好的 GUI Client 写指令。正好有 JetBrains 家的教育版全家桶 License，而且质量过关，所以直接就下DataGrip来用了。</p><p><img src="/../img/datagrip.png" alt="DataGrip"></p><p>结果还是被我找到一个骚操作：</p><ol><li>使用 GUI 界面设置 CHAR 类型为 NULL （需要数据库定义的时候设置column 为 null）</li><li>submit 结果</li><li>再使用同个 GUI 把 null 值改回去</li><li>接着再 submit 一次</li></ol><p>大功告成！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> departmentID,gender <span class="keyword">FROM</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------+</span></span><br><span class="line"><span class="operator">|</span> departmentID <span class="operator">|</span> gender <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>            <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>            <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>            <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>            <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>            <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>很舒服了。</strong></p><h2 id="羽绒服还是太给力了"><a href="#羽绒服还是太给力了" class="headerlink" title="羽绒服还是太给力了"></a>羽绒服还是太给力了</h2><p>前两天在银泰 new balance 买的一条1500+的羽绒服，有帽子，帽子带绒，不要再舒服。</p><p>今天早上起来感觉是真的冷，然后就穿着去上课了。结果真是热的要死。回来的时候再次感受到武汉天气的沙雕。</p><p>被老乡吐槽：</p><blockquote><p>不愧是来自赤道的，羽绒服都这么夸张。</p></blockquote><p>以后不敢穿了 mmp 哦。</p><hr><p>明天也要一样加油哦~</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有时间就每天写点什么吧~</title>
      <link href="/2018/11/20/post-everyday-2018-11-20/"/>
      <url>/2018/11/20/post-everyday-2018-11-20/</url>
      
        <content type="html"><![CDATA[<p>日期：2018年11月20日 星期二<br>天气：晴</p><span id="more"></span><p><strong>开始一次坚持的每日一记</strong></p><h3 id="为什么要开始每日一记"><a href="#为什么要开始每日一记" class="headerlink" title="为什么要开始每日一记"></a>为什么要开始每日一记</h3><p>之前在使用日程本的时候还有写日记的习惯，然而在使用嘀嗒清单之后，有了智能日程就不再写日记了。总觉得每天总要例行做点什么来记录一下自己的所做所为所想。</p><h4 id="坚持是一种好习惯"><a href="#坚持是一种好习惯" class="headerlink" title="坚持是一种好习惯"></a>坚持是一种好习惯</h4><p>“道理我都懂”，话是这么说，然而做就不是这么做了。</p><p>从很久之前就知道写日记做记录是好习惯，也做过也推荐别人这做过，效果的确是好，但是心血来潮这种事情，开始的第一天挺简单，坚持两天也不困难，三天需要一丝丝毅力，再多的话也许就需要我们自身有目标驱动自己去做这件事情，我个人是这么认为的。</p><p>坚持是做一件事情的必备条件，的确是。像之前打算开始学 TensorFlow 的时候，就是三天打鱼两天晒网，一直就学不到什么。然而事实证明，就算是天天废寝忘食的学，以自己的实力也基本完成不了机器学习的编写。【难受</p><p>所以想以此为契机，用这个来督促自己吧（以前也有这样的博文，然而还是坚持不下来）。让自己养成坚持的习惯。</p><h4 id="给自己一点回忆的资本"><a href="#给自己一点回忆的资本" class="headerlink" title="给自己一点回忆的资本"></a>给自己一点回忆的资本</h4><p>我的一句话：回忆是美好的，但是前提是要有能勾起回忆的东西。</p><p>还有一句不知道是谁的话：什么时候开始都不算迟，迟的是迟迟没有意识到要去开始。</p><p>我觉得我写日记断断续续的，也没怎么能够坚持特别久，就算是用日程本，也是写着写着就断了，并不能写到让自己感到愉悦的程度。曾经想过自己某一天拿出自己的日记看着看着就笑了，看着看着就哭了的感觉，是会多美好。但是从来就没有付诸实践和完成过。</p><p>所以想到这里，我就会想去写点什么，虽然从小语文就差出天际，写不出华丽的辞藻，别人看了也许没什么（日记啊喂，别人看不看有啥关系【蛤蛤），但是自己总是可以找到感动自己的理由，对吧？</p><p>我写日记的理由就在想要让以后的自己看到今天的自己，看到自己成长的历程。</p><h4 id="可以让-Github-的活跃格子亮起来（误"><a href="#可以让-Github-的活跃格子亮起来（误" class="headerlink" title="可以让 Github 的活跃格子亮起来（误"></a>可以让 Github 的活跃格子亮起来（误</h4><p>当然还想到一点就是，博客搭在 github 上，po博文就是 git push 啊，那岂不是可以亮一格？（又想起那个火车站都比你努力的图片</p><p><img src="/../img/%E5%9C%B0%E9%93%81%E7%AB%99.jpeg" alt="地铁站都比你努力"></p><p>想想就刺激，说不定还可以通过这个来让这个习惯坚持下去呢【hiahiahia~</p><h3 id="每日一记都要记一些什么"><a href="#每日一记都要记一些什么" class="headerlink" title="每日一记都要记一些什么"></a>每日一记都要记一些什么</h3><p>我就想吧，既然要感动自己，那就是记录一些每天脑子里面蹦出来的的感想，做过的有意义的事情，和朋友之间的互动呀，和亲人之间的陪伴呀，都是可以写的，当然太过隐私的事情当然不能当做招牌去炫耀，对吧~</p><p>既然还有成长历程，那就还要记录每天学了什么，成功做出了什么，学到了什么道理之类的，这应该能写的就很多了呢，想想就有些小激动，嘿嘿。（能不能坚持还是问题</p><h2 id="今日所记"><a href="#今日所记" class="headerlink" title="今日所记"></a>今日所记</h2><p>今天就是很平常的一天啦，上课下课逃课睡觉。</p><p>上课的时候还是一样的没什么劲，就是自己看自己关于数据库的东西，写写实验报告，应付一下任务。看到大佬们都写了很多高端的东西，用来当做校招的垫脚石，着实是觉得自己和他们差距很大。</p><p>这几天在做的事情，那就是看《进击的巨人》。花了两三天的时间吧，除了学习吃饭睡觉，基本都在看了。截止现在是出到了第三季第12集。</p><p>看到巨人再加上这几天发生了一些事情，就比如说马拉松递国旗呀、还有金马奖上“希望大家正视我们的国家”之后激起的一些言论，感觉就是任何事情背后都有所谓的“大佬”在推波助澜，制造舆论。</p><p>上纲上线之类的不说，还有各种网络暴力，以所为的“爱国”之名义进行人身攻击，能不能说 naive？然而也开始感觉到，这个社会上，达到一定地位后的“领导”也许真的不把人民群众当做人看吧。唉。</p><p>就是这样啦。虽说是对社会感到绝望，但是不是还是活的好好的嘛，有黑暗也有光明美好，即使是面对惨淡，也要面带微笑去度过。更何况生活如此多娇~</p>]]></content>
      
      
      <categories>
          
          <category> 日常水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机协会干事暑假作业-2018</title>
      <link href="/2018/07/13/computerInstitution-summerassignment-2018/"/>
      <url>/2018/07/13/computerInstitution-summerassignment-2018/</url>
      
        <content type="html"><![CDATA[<h2 id="计协干事假期任务【选一或二个题目完成"><a href="#计协干事假期任务【选一或二个题目完成" class="headerlink" title="计协干事假期任务【选一或二个题目完成"></a>计协干事假期任务【选一或二个题目完成</h2><p>作业期间会长将不定期跟进项目进度，开学后将安排知识讲座进行经验分享。<br>选择编程题的同学请提前学习 github 且作业务必使用 github，以便展示你的心路历程【手动滑稽】</p><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="计费系统-or-简易聊天软件-【难度-】【推荐】"><a href="#计费系统-or-简易聊天软件-【难度-】【推荐】" class="headerlink" title="计费系统 or 简易聊天软件 【难度@】【推荐】"></a>计费系统 or 简易聊天软件 【难度@】【推荐】</h3><p>选择此题的干事自行组成一个小组利用 github 协助编写一个系统（简易计费系统或者简易网络聊天软件）语言：C&#x2F;C++ OR JAVA OR OTHER</p><ul><li>自己组队，分工【产品】【技术】【前端】【后端】（一人可兼多职）</li><li>需求：<ul><li>计费系统：使用数据库或文件进行计费，系统设计自行完成</li><li>网络聊天软件：使用网络 socket 进行数据互传，必要时应有服务端进行账号验证</li></ul></li></ul><p>git 仓库：</p><p><a href="https://github.com/Computer-Institution-WUT/SummerAssignment-EZChatSoftware-2018.git">SummerAssignment-EZChatSoftware-2018</a></p><p><a href="https://github.com/Computer-Institution-WUT/SummerAssignment-AcountManagement-2018.git">SummerAssignment-AcountManagement-2018</a></p><hr><h3 id="计算器-【难度-】【推荐】"><a href="#计算器-【难度-】【推荐】" class="headerlink" title="计算器 【难度@@】【推荐】"></a>计算器 【难度@@】【推荐】</h3><p>独立完成一个计算器编程，语言自选</p><ul><li>迭代1：实现加减乘除</li><li>迭代2：实现括号和开根号</li><li>可选迭代：实现用户交互界面</li></ul><p>git 仓库：</p><p><a href="https://github.com/Computer-Institution-WUT/SummerAssignment-Calculator-2018.git">SummerAssignment-Calculator-2018</a></p><hr><h3 id="Andriod-or-iOS-App-【难度-】【有设备限制】"><a href="#Andriod-or-iOS-App-【难度-】【有设备限制】" class="headerlink" title="Andriod or iOS App 【难度@@@】【有设备限制】"></a>Andriod or iOS App 【难度@@@】【有设备限制】</h3><p>自学 AndroidStudio 或 Xcode 制作简单的手机端 APP（可利用 github 团队协作），要求如下：</p><ul><li>至少界面符合当前设计标准，例如 Google Material design、Apple iOS</li><li>有流畅的用户操作交互</li><li>不要求实际功能实现【即：只有UI】</li><li>可与选了第一题的队伍合作开发</li></ul><p>git 仓库：</p><p><a href="https://github.com/Computer-Institution-WUT/SummerAssignment-iOSAPP-2018.git">SummerAssignment-iOSAPP-2018</a></p><p><a href="https://github.com/Computer-Institution-WUT/SummerAssignment-AndriodAPP-2018.git">SummerAssignment-AndriodAPP-2018</a></p><hr><h2 id="软件应用题"><a href="#软件应用题" class="headerlink" title="软件应用题"></a>软件应用题</h2><h3 id="双系统-Linux-【难度-】【推荐，将来有用】"><a href="#双系统-Linux-【难度-】【推荐，将来有用】" class="headerlink" title="双系统 + Linux 【难度@@】【推荐，将来有用】"></a>双系统 + Linux 【难度@@】【推荐，将来有用】</h3><p>研究主流虚拟机，练习各种系统的，并练习 WINDOWS+LINUX 不同版本的双系统的部署，独立排错，掌握 LINUX 系统的简单使用。</p><ul><li>VMWare 或 VM VirtualBox 的熟练使用</li><li>熟练掌握 WinXP&#x2F;7&#x2F;10的原版安装、PE 安装器安装、GHOST 安装，包括 BIOS 引导与 EFI 引导</li><li>了解掌握 LINUX 系统的安装【目前世面上亲民的几款发行版自选：Ubuntu、DeepinLinux、Debian、CentOS 或者 RedHat、Manjaro、Arch</li><li>在以上一款 Linux 中选择一款进行 Linux 学习，学习熟练度至少可以达到可作为日常开发或娱乐使用</li><li>可选进程：使用 VPS 搭建一台 ShadowSocks&#x2F;R 服务端</li></ul><p>参考资料：群文件 Linux就该这么学.pdf</p><h3 id="Windows-系统封装操作-【难度-】【偏门技术】"><a href="#Windows-系统封装操作-【难度-】【偏门技术】" class="headerlink" title="Windows 系统封装操作 【难度@@】【偏门技术】"></a>Windows 系统封装操作 【难度@@】【偏门技术】</h3><p>自行研究 WINDOWS （XP&#x2F;7&#x2F;10 之一）系统的部署和封装（可选用现有解决方案），实现常用软件内嵌、安装期间驱动自解压安装、紧跟最新布丁更新等必须功能</p><ul><li>原版系统的安装技术</li><li>DISM++的系统精简优化打补丁技术【至少会皮毛使用</li><li>部署工具的使用与定制【弄清各种选项之间不同的优劣</li><li>驱动、软件内嵌优化</li><li>ghost 压缩镜像操作</li><li>可选feature：<ul><li>制作一套可用于装机的 ISO 光盘镜像</li><li>给系统加入后门</li></ul></li></ul><h3 id="自制-PE-系统-【难度-】【真丶偏门技术】"><a href="#自制-PE-系统-【难度-】【真丶偏门技术】" class="headerlink" title="自制 PE 系统 【难度@@@】【真丶偏门技术】"></a>自制 PE 系统 【难度@@@】【真丶偏门技术】</h3><p>自行研究 Windows （XP&#x2F;7&#x2F;10 之一）系统内核提取以及程序内置和封装，硬盘引导方法的选用以及引导菜单制作。</p><ul><li>原版系统的安装技术</li><li>内核提取（NT5、NT6）</li><li>学习引导技术（grub、UEFI 等）</li><li>程序封装（参考 Windows 系统封装操作 作业）</li><li>驱动封装（支持 nvme 的硬盘则最好）</li></ul><p>说白了我也不会，靠大家自己摸索啦。</p><hr><h2 id="硬件题【材料自备，成果归自己所有"><a href="#硬件题【材料自备，成果归自己所有" class="headerlink" title="硬件题【材料自备，成果归自己所有"></a>硬件题【材料自备，成果归自己所有</h2><p>硬件题应该有的基础东西包括焊工套（烙铁、松香、焊锡等）、测电套（电笔、万用表等）、基础工具（螺丝刀、游标卡尺等），自己备有一套工具不存在损失一说，甚至对于某些专业来说都是“吃饭的家伙”，锻炼自己的动手能力总是好的，并且工具是可以沿用的，将来用得上的时候自己既有工具又有经验。</p><h3 id="室内穿梭无人机-【难度-（据说）】"><a href="#室内穿梭无人机-【难度-（据说）】" class="headerlink" title="室内穿梭无人机 【难度@@@（据说）】"></a>室内穿梭无人机 【难度@@@（据说）】</h3><p>做一台室内穿梭无人机（可用现有解决方案），要求如下：</p><ul><li>第一步：能飞就行</li><li>有遥控端</li><li>可达到续航10分钟并平稳</li><li>可选功能：上下、向前飞行</li><li>可选功能：左转、右转、空翻等</li></ul><h3 id="自避障小车-【难度-（据说）】"><a href="#自避障小车-【难度-（据说）】" class="headerlink" title="自避障小车 【难度@@@（据说）】"></a>自避障小车 【难度@@@（据说）】</h3><p>做一台室内自避障小车（可用现有解决方案），要求如下：</p><ul><li>第一步：能跑就行</li><li>遇到障碍物可自动转向避开障碍物（测障功能可选红外或者超声或者别的）</li><li>可选：用遥控器控制</li></ul><h3 id="机械键盘-【难度-】【推荐，做好了可以卖】"><a href="#机械键盘-【难度-】【推荐，做好了可以卖】" class="headerlink" title="机械键盘 【难度@】【推荐，做好了可以卖】"></a>机械键盘 【难度@】【推荐，做好了可以卖】</h3><p>做一块机械键盘，要求实现两个layer，可实现 F 区、文稿编辑区、小键盘、各种快捷键（例如音量增减、亮度增减、播放快捷键等）</p><ul><li>入手方案可选择%60、64、87、104键方案，选择此题的同学如有需要应跟有渠道的大佬上配件车</li><li>查找资料充分了解轴体之间的区别，不限于不同参数的轴体，还有不同标准构造的轴体，例如静电容轴、三脚&#x2F;五脚轴等</li><li>查找资料了解不同版本的 PCB 板的区别，并选区自己中意的 PCB 板进行制作</li><li>自行练习焊工操作，将练习后的技术用于键盘焊接</li><li>自行查找资料了解固件和配列刷写，明白不同固件对应的硬件的区别，配列 制作和刷写方法</li></ul><p><em>计协</em></p>]]></content>
      
      
      <categories>
          
          <category> 计算机协会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机协会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 错误：Caught deadly signal SEGV</title>
      <link href="/2018/07/11/vim-caught-deadly-signal-segv/"/>
      <url>/2018/07/11/vim-caught-deadly-signal-segv/</url>
      
        <content type="html"><![CDATA[<p>GVim 一直用的挺顺手的，没出过什么问题。<br>今天闲来无事，更新了一下插件，也就是<code>:PluginUpdate</code>之后，心里寻思着 you-complete-me （以下简称 ycm）这个插件不是还要手动编译一下？<br>于是就进到了 ycm 的目录下，用了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.py --clang-completer</span><br></pre></td></tr></table></figure><p>进行编译。<br>结果再次运行 GVim 的时候就崩了，出现了一下的错误代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vim: Caught deadly signal SEGV</span><br><span class="line">Vim: Finished.</span><br></pre></td></tr></table></figure><p>由于是第一次遇到 Vim 的问题，所以就直接懵逼了，上网查了很多，然而都说的是一些无关痛痒的解决办法，例如有的说是<code>.vimrc</code>文件出错，要删掉。<br>但是经过仔细分析，我的<code>.vimrc</code>文件根本就没改过，之前也一样正常使用，怎么会是配置文件出错呢？（再说了，这可是花了大心血配置的呀，哪能说删就删呢）</p><p>于是仔细分析了事情的前因后果，意识到可能是 ycm 的配置错了，因为之前执行<code>:PluginUpdate</code>没出过问题，所以最有可能的就是 ycm 编译的时候出错了。于是找了网上关于 ycm 编译配置的问题，发现了端倪。<br>因为之前用的编译都是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh --clang-completer</span><br></pre></td></tr></table></figure><p>而不是.py 结尾的脚本，所以可能是由于版本不兼容或者是 MacOS 导致的。<br>于是把 ycm 的文件全部删除重新<code>：PluginUpdate</code>下载 ycm，并用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh --clang-completer</span><br></pre></td></tr></table></figure><p>进行编译，然后 vim 就可以正常启动了。</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
          <category> Linux Learning </category>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim/GVim </tag>
            
            <tag> bash </tag>
            
            <tag> Unix </tag>
            
            <tag> Programming Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又能玩 Hacknet 了</title>
      <link href="/2018/07/03/hacknet-again/"/>
      <url>/2018/07/03/hacknet-again/</url>
      
        <content type="html"><![CDATA[<h1 id="Hacknet"><a href="#Hacknet" class="headerlink" title="Hacknet"></a>Hacknet</h1><p>时隔多年又玩到了 Hacknet，再次玩的确是得心应手。<br>占坑，后补~</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Games </tag>
            
            <tag> Hacknet </tag>
            
            <tag> Hacker Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习之旅：list</title>
      <link href="/2018/07/03/python-learning-list/"/>
      <url>/2018/07/03/python-learning-list/</url>
      
        <content type="html"><![CDATA[<p>list 是类似 C 语言中的数组的东西，但是它其中的构造比数组要复杂的多，是 Python 中自带的一个类型，包含了多种方法和成员。<br>既然与数组类似，那么 list 里面的成员一定也是有序的集合。但是相比与数组，我们又可以随时自由的添加或者删除里面的成员，甚至是插入。</p><h1 id="与传统-C-的联系"><a href="#与传统-C-的联系" class="headerlink" title="与传统 C 的联系"></a>与传统 C 的联系</h1><h2 id="声明-list"><a href="#声明-list" class="headerlink" title="声明 list"></a>声明 list</h2><p>list 和 <code>[]</code> 中括号有着直接的关系，无论是声明还是取出，都需要通过中括号实现。<br>声明一个 list 可以通过 <code>=</code> 等号来对一个变量名进行赋值为 list，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;Jason&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>price = [<span class="number">3.99</span>, <span class="number">6.47</span>, <span class="number">1.66</span>, <span class="number">7.7</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;Jason&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>price</span><br><span class="line">[<span class="number">3.99</span>, <span class="number">6.47</span>, <span class="number">1.66</span>, <span class="number">7.7</span>]</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到，在 Python 的解释器中，通过 <code>=</code> 等号声明之后，变量名就自动变为一个 list 了，在解释器中直接输入变量名 Python 解释器就会直接把这个 list 对象输出。</p><h2 id="取出"><a href="#取出" class="headerlink" title="取出"></a>取出</h2><p>因为 list 是通过下标来进行成员的定位的，按照定义可以通过 <code>[]</code> 中括号对 list 进行指定的成员取出，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;Mike&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;Jason&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;Kate&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">3</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><p>从代码可以看出，Python 还是和传统的编程语言一样，元素编号从0开始，延续了程序员的传统。<br>但是和传统编程语言不同的是，Python 还提供倒序下标的取出，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;Kate&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[-<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;Jason&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[-<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;Mike&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[-<span class="number">4</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><p>可以看出，Python 这一点显得和人性化，可以通过负数下标进行倒序的取出，这是十分方便的，但是其中的实现过程用掉了的性能的多少也不难理解了吧。</p><h2 id="成员赋值"><a href="#成员赋值" class="headerlink" title="成员赋值"></a>成员赋值</h2><p>赋值和传统的编程语言相同，一般都为【取出】-&gt;【修改】两个步骤。和传统的 C 相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;Jason&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">1</span>] = <span class="string">&#x27;SmallXeon&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这样就实现了修改成员。</p><h1 id="成员方法（与传统的数组不同的地方"><a href="#成员方法（与传统的数组不同的地方" class="headerlink" title="成员方法（与传统的数组不同的地方"></a>成员方法（与传统的数组不同的地方</h1><h2 id="获取长度-len"><a href="#获取长度-len" class="headerlink" title="获取长度 len()"></a>获取长度 <code>len()</code></h2><p>熟悉 C 的话就可以知道需要获得数组的长度需要一连串的操作，获取占用的内存字节、获取成员的大小、总内存大小除成员的内存大小，结合起来就是 <code>int lenth = sizeof(array1) / sizeof(array1[0]);</code> 这样一串复杂的操作，对新手也不友好。</p><p>而 Python 中人性化的一点就是用了通用的函数对其直接处理就可以返回我们需要的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(classmates)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们可以看到，我们使用 Python 中的通用函数 <code>len()</code> 可以直接读取到 list 的长度。<br><code>len()</code> 不难理解，就是我们英文单词中的 lenth 的缩写，对于新手来说也可以通过猜而一知半解。我们在 Python 解释器中查看 <code>len()</code> 函数的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">len</span>&gt;</span><br></pre></td></tr></table></figure><p>可以看到是显示的是一个内建的函数，既然是内建的函数，那么多数可以用在内建的类型——list 上。</p><h2 id="添加成员"><a href="#添加成员" class="headerlink" title="添加成员"></a>添加成员</h2><p>说到数组，有一个问题困扰了新手时期的我很久，就是如何给数组添加新的成员呢？</p><p>拷贝原数组到一个新的数组中：获取原数组长度；由于 C 不支持动态数组的声明，所以需要在内存的层面直接分配新数组大小；拷贝成员。总结一下就是一下几点步骤：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> lenth = <span class="keyword">sizeof</span>(array_old) / <span class="keyword">sizeof</span>(array_old[<span class="number">0</span>]);</span><br><span class="line">type *array_new = (type *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(type) * (lenth + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line">    array_new[i] = array_old[i];</span><br></pre></td></tr></table></figure><p>这样一段复杂的操作之后，数组就延长了，但是随之而来的问题就是数组名发生了改变。再后来，遇到了和 <code>malloc()</code> 一起的 <code>realloc()</code> 函数之后，问题又简单了一些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> lenth = <span class="keyword">sizeof</span>(array_old) / <span class="keyword">sizeof</span>(array_old[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">array</span> = (type *)<span class="built_in">realloc</span>(<span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]) * (lenth + <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>但是缺点还是会存在，因为想要使用 <code>realloc()</code> 函数重新分配内存的话，那么内存名就必须是由<code>malloc()</code> 、 <code>realloc()</code> 或 <code>alloc()</code>分配的内存。这就十分的不方便了。</p><hr><p>由上可以看出，在传统 C 中延长一个数组是有多么的麻烦（充满程序员艺术美？我竟然沉迷其中）。<br>而 Python 里面只需要简单的一步就可以直接实现对 list 的添加、插入、弹出</p><h3 id="尾部链接新成员-append"><a href="#尾部链接新成员-append" class="headerlink" title="尾部链接新成员 append()"></a>尾部链接新成员 <code>append()</code></h3><p>list 类型自带一个 <code>append()</code> 方法，将元素自然的链接到 list 的尾部，实现 list 的延长：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.append(<span class="string">&#x27;Smith&#x27;</span>)  <span class="comment"># 实际上只有这步在操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]</span><br></pre></td></tr></table></figure><p>可以看出，这是让 C 的程序员很眼红的事情了，只需要一个 <code>append()</code> 就可以延长数组并且添加元素的操作。只能叹服…</p><h3 id="中间插入成员-insert"><a href="#中间插入成员-insert" class="headerlink" title="中间插入成员 insert()"></a>中间插入成员 <code>insert()</code></h3><p>插入成员，在 C 中更是一度作为考题来对程序员的能力进行考核。而 Python 则又是让人眼红不已：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.insert(<span class="number">2</span>, <span class="string">&#x27;Ubuntu&#x27;</span>)      <span class="comment"># 实际上只有这步操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Ubuntu&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="删除成员"><a href="#删除成员" class="headerlink" title="删除成员"></a>删除成员</h2><h3 id="通用删除函数-del"><a href="#通用删除函数-del" class="headerlink" title="通用删除函数 del"></a>通用删除函数 <code>del</code></h3><p>删除 list 的指定成员，可以直接是使用 <code>del</code> 来删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Ubuntu&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> classmates[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这样就直接删除了 list 中的成员了。</p><h3 id="自带成员函数-remove"><a href="#自带成员函数-remove" class="headerlink" title="自带成员函数 remove()"></a>自带成员函数 <code>remove()</code></h3><p><code>remove()</code> 的操作则更加直接，对指定的成员进行删除，不需要获取下标。而缺点是需要知道完整的成员。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Kate&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.remove(<span class="string">&#x27;Kate&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="成员函数——栈操作：弹出-pop"><a href="#成员函数——栈操作：弹出-pop" class="headerlink" title="成员函数——栈操作：弹出 pop()"></a>成员函数——栈操作：弹出 <code>pop()</code></h3><p>栈是什么又得另说了。<br>实现弹出操作——即在栈取出顶部元素将其返回，并在栈中删除其。<br>通过弹出则可以在 list 中实现删除最后一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class="line"><span class="string">&#x27;Smith&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;SmallXeon&#x27;</span>]</span><br></pre></td></tr></table></figure><p>可以看出弹出操作 <code>pop()</code> 是有返回的，即与栈的弹出概念是相同的。</p><h1 id="list-的成员类型可以不同"><a href="#list-的成员类型可以不同" class="headerlink" title="list 的成员类型可以不同"></a>list 的成员类型可以不同</h1><p>这一点对于 C 的程序员来说十分不可思议，然而 C++ 程序员就比较好接受。因为类模板可以让相同模板类型的成员适应不同的类型。<br>而此处 Python 的 list 则更加神奇。一个 list 中的成员之间的类型居然也可以不同，这着实令人难以接受。但是反过来看看，是不是可以通过 list 实现简单的结构体呢？（误）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>differentList = [<span class="string">&#x27;myName&#x27;</span>, <span class="number">21</span>, <span class="literal">True</span>, [<span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;software engine&#x27;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>differentList</span><br><span class="line">[<span class="string">&#x27;myName&#x27;</span>, <span class="number">21</span>, <span class="literal">True</span>, [<span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;software engine&#x27;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>differentList[<span class="number">1</span>]</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>differentList[<span class="number">3</span>]</span><br><span class="line">[<span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;software engine&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>differentList[<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;software engine&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>differentList[<span class="number">3</span>].pop()</span><br><span class="line"><span class="string">&#x27;software engine&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>differentList</span><br><span class="line">[<span class="string">&#x27;myName&#x27;</span>, <span class="number">21</span>, <span class="literal">True</span>, [<span class="string">&#x27;student&#x27;</span>]]</span><br></pre></td></tr></table></figure><p>从代码可以看出，list 中还可以嵌套 list 实现二维数组，并且可以直接取出并对内部的 list 进行单独操作，这可以说 Python 这门语言的博大精深了。</p><hr><p>这就是 list 的学习简单记录。<br>明天也要一样加油~</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
            <tag> Python 3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 报错 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
      <link href="/2018/06/19/sshWarning-solution/"/>
      <url>/2018/06/19/sshWarning-solution/</url>
      
        <content type="html"><![CDATA[<p>防崩补丁</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the RSA key sent by the remote host is</span><br><span class="line">SHA256:rAJOIPBCrRCUJwA9QIqHclCOj4EDfBw/v71T6g2vIRg.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key <span class="keyword">in</span> /Users/chenke/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending RSA key <span class="keyword">in</span> /Users/chenke/.ssh/known_hosts:13</span><br><span class="line">RSA host key <span class="keyword">for</span> 104.168.28.60 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure><p>上面这段代码是 Linux&#x2F;Unix 上连接远程系统有更改时出现的报错。</p><p>会出现这些信息是因为，第一次SSH连接时，会生成一个认证，储存在客户端（也就是用SSH连线其他电脑的那个，自己操作的那个）中的known_hosts，但是如果服务器验证过了，认证资讯当然也会更改，服务器端与客户端不同时，就会跳出错误</p><p>因此，只要把电脑中的认证资讯删除，连线时重新生成即可。<br>要删除很简单，只要在客户端输入一个指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R IP        <span class="comment"># IP 更改为所要连接的服务器 IP</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux Learning </category>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VPS </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Digital Ocean 上 CentOS 更换内核并开启 BBR 魔改版加速小记</title>
      <link href="/2018/06/19/digitalocean-centos6-enable-bbr-to-upspeed/"/>
      <url>/2018/06/19/digitalocean-centos6-enable-bbr-to-upspeed/</url>
      
        <content type="html"><![CDATA[<p>依稀记得全年在 github 上完成了学生认证，获得了学生福利，然而里面的东西却一点都没用上。包括各种各样的开发者工具，像 atom 的授权啊（其实不知道开源的东西为什么还包含在学生福利包中），网页开发工具啊，域名啊之类的。对于我来说这些都没太大用处，除了 DO 的50刀额度以外。</p><p>然而，以前也折腾过学生包，不过不知为何工单不通过，并没有获得50刀的额度。（或许是我当初英语太差的缘故，表达不清晰导致）</p><p>前几天在物色 VPS 的时候又想到了这茬事情，于是就开始折腾了起来。</p><hr><p>使用 <code>BBR</code> 前提与 <code>net-speeder</code> 相同，不能为 OpenVZ 架构的 VPS。<br>若是使用 CentOS 的话推荐使用6，当然7也行，但是加速效果不如6好。</p><h1 id="激活-Digitl-Ocean-的-github-学生包"><a href="#激活-Digitl-Ocean-的-github-学生包" class="headerlink" title="激活 Digitl Ocean 的 github 学生包"></a>激活 Digitl Ocean 的 github 学生包</h1><p>进入 DO 的 Billing 页面，寻找 promo code 的选项，然而并没有找到，看来是 DO 的网站改版了。以前教程上的做法都不适用了，于是开启工单大法。</p><p>页面滑到最下面，点击 Support 进入支持页面。在上面的一堆选项中的各种问题查找是无法解决 github 学生包激活的问题的，要选择下方的 get more help 中的Contect Support 提交工单进行人工服务。</p><h2 id="提交工单申请学生额度"><a href="#提交工单申请学生额度" class="headerlink" title="提交工单申请学生额度"></a>提交工单申请学生额度</h2><p>创建一个 Billing 分类的工单，问题选择 promo code and credit<br>Subject 一栏中填写工单的主题，比如我填写的是 Student promo code from my github pack<br>而在问题一栏中则不填写<br>问题描述中要语言清晰，语气正式并且有礼貌，说明问题的来龙去脉以及自己的要求。例如我写的是</p><blockquote><p>Hello staff,<br>I’m a student from China, and I’ve got my student pack on github. But there is a puzzling question that no input box on my billing tag.<br>And my code is: <em>#FCK#jd</em>******-1aa9f47a (此处做打码处理)<br>Could you help me activate the code to my account? I’ll appreciate it if you made this for me!<br>thanks!</p></blockquote><p>一般效果如下：<br><img src="/../img/DOticket.jpg" alt="工单格式"></p><p>工单发过去之后，大概十分钟就收到回复了，并且账户额度增加了50刀，白嫖 DO 一年是预订了 hhh</p><h1 id="启用-BBR-内核加速-SS-x2F-SSR"><a href="#启用-BBR-内核加速-SS-x2F-SSR" class="headerlink" title="启用 BBR 内核加速 SS&#x2F;SSR"></a>启用 BBR 内核加速 SS&#x2F;SSR</h1><h2 id="BBR"><a href="#BBR" class="headerlink" title="BBR"></a>BBR</h2><p>摘自网络</p><blockquote><p>在使用<code>Google BBR</code>之前，我们首先要了解它是什么。<br>了解计算机网络的人都知道，在TCP连接中，由于需要维持连接的可靠性，引入了拥塞控制和流量管理的方法。<code>Google BBR</code>就是谷歌公司提出的一个开源TCP拥塞控制的算法。在最新的<code>linux 4.9</code>及以上的内核版本中已被采用。对于该算法的分析，这里有一篇文章值得一读。在本人的网络环境（武汉电信20MB）测试下，ss不经过其它的任何的优化就能轻松的跑满带宽。（speedtest测试或fast测试）。由于<code>Google BBR</code>非常新，任何低于4.9的linux内核版本都需要升级到4.9及以上才能使用，故若VPS本身内核版本较低的话，只有KVM架构的VPS才能使用本教程升级内核并使用，openvz的VPS用户若内核版本较低则无法使用！<br>最近，Google 开源了其 <code>TCP BBR</code> 拥塞控制算法，并提交到了 Linux 内核，从 4.9 开始，Linux 内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。<br>根据实地测试，在部署了最新版内核并开启了 <code>TCP BBR</code> 的机器上，网速甚至可以提升好几个数量级。</p></blockquote><h2 id="更换-Droplet-内核"><a href="#更换-Droplet-内核" class="headerlink" title="更换 Droplet 内核"></a>更换 Droplet 内核</h2><p>可以事先在<a href="https://raw.githubusercontent.com/0oVicero0/serverSpeeder_kernel/master/serverSpeeder.txt">可用内核</a>中查找，若是自己的内核在这里面，则无需进行更换了。</p><p>由于 <code>BBR</code> 中包含了各种各样的加速工具，其支持的内核有限，所以我们要更换我们 VPS 的内核以适配所有工具来达到最佳效果。</p><p>在更换内核之前要先检测内核，如果是 OpenVZ 的话则不要继续后面的了。</p><h3 id="检测-VPS-架构"><a href="#检测-VPS-架构" class="headerlink" title="检测 VPS 架构"></a>检测 VPS 架构</h3><p>Ubuntu &#x2F; Debian</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virt-what</span><br></pre></td></tr></table></figure><p>CentOS &#x2F; RedHat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y virt-what</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo virt-what</span><br></pre></td></tr></table></figure><p>运行之后的效果如下</p><p><img src="/../img/KVM-OVZ-XEN.png" alt="检测VPS架构"></p><h3 id="更换-CentOS-6-内核"><a href="#更换-CentOS-6-内核" class="headerlink" title="更换 CentOS 6 内核"></a>更换 CentOS 6 内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r                <span class="comment">#查看当前内核版本</span></span><br><span class="line">rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm</span><br><span class="line">rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</span><br><span class="line">rpm -qa | grep kernel   <span class="comment">#查看是否安装成功</span></span><br><span class="line">reboot                  <span class="comment">#重启VPS</span></span><br><span class="line"><span class="built_in">uname</span> -r                <span class="comment">#当前使用内核版本</span></span><br></pre></td></tr></table></figure><h3 id="更换-CentOS-7-内核"><a href="#更换-CentOS-7-内核" class="headerlink" title="更换 CentOS 7 内核"></a>更换 CentOS 7 内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r                <span class="comment">#查看当前内核版本</span></span><br><span class="line">rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm --force</span><br><span class="line">rpm -qa | grep kernel   <span class="comment">#查看内核是否安装成功</span></span><br><span class="line">reboot                  <span class="comment">#重启VPS</span></span><br><span class="line"><span class="built_in">uname</span> -r                <span class="comment">#当前使用内核版本</span></span><br></pre></td></tr></table></figure><h2 id="安装-BBR-内核加速"><a href="#安装-BBR-内核加速" class="headerlink" title="安装 BBR 内核加速"></a>安装 <code>BBR</code> 内核加速</h2><p>一键安装脚本</p><p>这个脚本由千影制作（在这里感谢一下），github 上仓库已经404了。</p><p>首次下载使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">&quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span> &amp;&amp; <span class="built_in">chmod</span> +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>后面想要再次使用这个脚本可以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tcp.sh</span><br></pre></td></tr></table></figure><p>脚本内容可以大概看一下：</p><p><img src="/../img/BBRscript.png" alt="BBR 一键脚本"></p><p>依次执行<code>1</code>安装 <code>BBR</code> 内核，后使<code>8</code>进行系统优化或直接用<code>4</code>启用加速服务。切记，每一步完成后都要重启。</p><hr><p>这是我在 DO 的 kvm 上的对比图</p><p><img src="/../img/before_BBR.png" alt="before"></p><p><img src="/../img/after_BBR.png" alt="after"></p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> BBR </tag>
            
            <tag> CentOS </tag>
            
            <tag> DigitalOcean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_Program_Language:个人遇到的 java.util.NoSuchElementException 异常以及问题所咋与解决方法</title>
      <link href="/2018/06/13/javaprogramlanguage-personal-encountered-javautilnosuchelementexception-anomalies-and-problems-and-solutions/"/>
      <url>/2018/06/13/javaprogramlanguage-personal-encountered-javautilnosuchelementexception-anomalies-and-problems-and-solutions/</url>
      
        <content type="html"><![CDATA[<p>下面是输出的异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.util.NoSuchElementException</span><br><span class="line">at java.util.Scanner.throwFor(Scanner.java:<span class="number">862</span>)</span><br><span class="line">at java.util.Scanner.next(Scanner.java:<span class="number">1485</span>)</span><br><span class="line">at java.util.Scanner.nextInt(Scanner.java:<span class="number">2117</span>)</span><br><span class="line">at java.util.Scanner.nextInt(Scanner.java:<span class="number">2076</span>)</span><br><span class="line">at User.Operator.main(Operator.java:<span class="number">71</span>)</span><br><span class="line">at User.Main.login(Main.java:<span class="number">63</span>)</span><br><span class="line">at User.Main.main(Main.java:<span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>在正常的输出中，在函数结束的位置还有一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span></span><br></pre></td></tr></table></figure><hr><p>索性让我们看看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">downloadFile</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, IOException&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.print(<span class="string">&quot;输入文件编号：&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileID</span> <span class="operator">=</span> input.next();</span><br><span class="line">    input.close();</span><br><span class="line">    <span class="type">Doc</span> <span class="variable">fileDoc</span> <span class="operator">=</span> DataProcessing.searchDoc(fileID);</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">initedFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.uploadPath+fileDoc.getFilename());</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">creatFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.downloadPath+fileDoc.getFilename());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      creatFile.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ioe)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;下载目录出错（无法创建新文件）！&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> ioe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(initedFile);</span><br><span class="line">      <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(creatFile);</span><br><span class="line"></span><br><span class="line">      <span class="type">byte</span> [] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>)initedFile.length()];</span><br><span class="line">      fis.read(temp);</span><br><span class="line">      fos.write(temp);</span><br><span class="line">      fis.close();</span><br><span class="line">      fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException notFound) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;未找到文件！&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> notFound;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;io接口错误！&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> ioe;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;下载文件... ...&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException sqle) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;sqle&quot;</span>);<span class="comment">// 这句用于检查是否出错</span></span><br><span class="line">    <span class="keyword">throw</span> sqle;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ioe&quot;</span>);<span class="comment">// 同上</span></span><br><span class="line">    <span class="keyword">throw</span> ioe;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;下载文件成功！&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法用于上传文件，在main函数中使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.downloadFile();</span><br><span class="line">    <span class="comment">//System.out.println(&quot;到了这里&quot;);</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException sqle) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;发生错误：数据库异常(&quot;</span>+sqle+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;发生错误：IO接口异常 (&quot;</span>+ioe+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><hr><p>在测试过程中，各种用于标记完成的println()都输出了，也未有捕捉到异常。在查找资料的时候，在一个百度知道中找到了答案。引用：<a href="https://zhidao.baidu.com/question/2009912403561279508.html" title="百度知道">百度知道</a><br>在最佳回答中，答主说到了是<code>Scanner</code>对象重复使用<code>close()</code>方法导致的，但是在问题中题主和答主未有讨论清楚的是，这里两次使用<code>close()</code>方法分别是不同的<code>Scanner</code>对象，出现错误不应该。</p><hr><p>解决方法：将语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input.close();</span><br></pre></td></tr></table></figure><p>删除即可。</p><hr><p>我在写这篇博文的时候也是突然灵光一闪，意识到一个严重的问题。详细即为：<br>在<code>downloadFile()</code>方法内使用的<code>Scanner</code>对象和<code>main()</code>方法内使用的<code>Scanner</code>对象，声明语句都为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><p>即两个<code>Scanner</code>对象指向的内存都是命令行输入端，所以实际上两者是同一个对象（在JAVA虚拟机层面，而非软件中）。所以问题解决，原因找到，皆大欢喜！</p>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS网络优化：锐速 [OpenVZ架构勿用]</title>
      <link href="/2018/06/09/net-optimize-for-VPS-serverspeeder/"/>
      <url>/2018/06/09/net-optimize-for-VPS-serverspeeder/</url>
      
        <content type="html"><![CDATA[<h1 id="锐速-serverspeeder"><a href="#锐速-serverspeeder" class="headerlink" title="锐速 serverspeeder"></a>锐速 serverspeeder</h1><p>锐速serverspeeder是一款TCP网络加速软件，能在Linux系统和Windows系统的服务器中安装，安装后能启到提高网络连接稳定性、带宽利用率、低访问失败率等作用，从而提高服务器网络访问速度。锐速并非实际增大服务器带宽，只是提高网络的稳定性和利用率而已。蜗牛在为服务器安装锐速后，测试服务器全球下载、本地上传下载速度变化不大；但使用超级ping发现，丢包现象明显减少。另外一个明显变化就是在同一VPS安装科学上网工具观看YouTube，没安装锐速前观看YouTube 720P视频非常不流畅，经常会出现缓冲现象；而安装锐速后能流畅观看YouTube 720P视频。</p><h2 id="锐速破解版"><a href="#锐速破解版" class="headerlink" title="锐速破解版"></a>锐速破解版</h2><p>锐速破解版linux一键自动安装包是由@91yun发布的，无限带宽版。锐速只支持在XEN和KVM虚拟技术价格的VPS中安装，不支持在OpenVZ虚拟技术架构的VPS安装，推荐在KVM VPS中安装。目前此一键安装包已支持在CentOS，ubuntu和debian系统中安装，而且能自动匹配服务器内核是否支持安装，如果支持就会全自动下载安装，无需任何操作；如果内核不支持，会在安装过程中提示可选内核。</p><p>目前锐速ServerSpeeder无限带宽破解版支持的内核有：</p><ul><li>CentOS-6.8：2.6.32-642.el7.x86_64</li><li>CentOS-7.2：3.10.0-327.el7.x86_64</li><li>CentOS：4.4.0-x86_64-linode63</li><li>Ubuntu_14.04：4.2.0-35-generic</li><li>Debian_8：3.16.0-4-amd64</li></ul><hr><p>文章内提供的是 <strong>破解版</strong>，可以直接使用脚本安装</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br><span class="line"><span class="comment">#chmod +x serverspeeder -all.sh</span></span><br><span class="line"><span class="comment">#./serverspeeder-all.sh</span></span><br></pre></td></tr></table></figure><p>卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Net-Optimize </tag>
            
            <tag> ServerSpeeder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 初步设置以及 C/C++ 开发环境部署</title>
      <link href="/2018/06/08/settings-for-a-new-or-minimal-centos/"/>
      <url>/2018/06/08/settings-for-a-new-or-minimal-centos/</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Centos-logo-light.svg/500px-Centos-logo-light.svg.png" alt="centos-logo"></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>摘自维基百科：</p><blockquote><p>CentOS（Community Enterprise Operating System）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定发布的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。两者的不同，在于CentOS并不包含封闭源代码软件。CentOS 对上游代码的主要修改是为了移除不能自由使用的商标。2014年，CentOS宣布与Red Hat合作，但CentOS将会在新的委员会下继续运作，并不受RHEL的影响。</p><p>CentOS和RHEL一样，都可以使用Fedora EPEL来补足软件。</p></blockquote><h3 id="支持的处理器"><a href="#支持的处理器" class="headerlink" title="支持的处理器"></a>支持的处理器</h3><p>Intel x86及兼容架构（32位）（CentOS 7 的32位版本由AltArch SIG提供支持<br>Intel Itanium（64位）（新版本不再支持）<br>x86-64 (AMD64和Intel 64，64位）<br>PowerPC G3及G4（测试版）（新版本不再支持）<br>IBM的eServer z系列及S&#x2F;390大型主机（新版本不再支持）<br>龙芯（Loongson）采用的MIPS架构（32位、64位 (非官方支持 )<br>AArch64（ARM架构中的ARMv8或ARM64，64位）（由AltArch SIG提供支持）<br>另外有限度的支持两款旧型处理器：<br>Alpha<br>SPARC（测试版）</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>官方网站 <a href="https://www.centos.org/">CentOS Project</a></p><p>官方下载站点 <a href="https://www.centos.org/download/">Download CentOS</a></p><p>阿里云开源镜像占 <a href="https://opsx.alibaba.com/mirror">OPSX</a></p><h2 id="为什么要用-CentOS？"><a href="#为什么要用-CentOS？" class="headerlink" title="为什么要用 CentOS？"></a>为什么要用 CentOS？</h2><p>无论是作为一个系统运营商，还是普通的运维人员，在很长的一段时间里，我们需要在多种大型系统中找到一个可靠的，可预测的系统，我们需要从世界上最强大的软件供应商和开源项目中获得强有力的支持。对于那些最常用的系统，我们需要文档，工具和全球性资源。</p><p>正因如此，RedHat &#x2F; CentOS系列发行版正是我们的选择。他们能够满足以上所有需求，而且问题相对较少、长期稳定，这使得我们能够为成千上万的运行了不同配置、服务和应用的系统提供世界级的维护。</p><p>RedHat Enterprise Linux (RHEL)是黄金标准的企业发行版。它每五年左右更新一次，在系统的稳定性，前瞻性和安全性上有着极大的优势。每当新的主版本发行后，比如 5.x亦或最近的6.x，所有版本和代码都将保留不变，只有安全问题或是主要的bug，例如后门，端口之类的问题，会通过发布新的子版本来修复。</p><p>CentOS是RHEL发行版对应的开源版本，通常在RedHat的发布后就会很快发行。我们使用CentOS的原因在于RHEL发行版的标准支持服务费用非常高，大约每台服务器800美元左右，对于我们很多拥有数十台甚至上百台服务器的用户来说，这是必须要控制的成本。</p><h3 id="RHEL-x2F-CentOS系统有两个潜在的问题"><a href="#RHEL-x2F-CentOS系统有两个潜在的问题" class="headerlink" title="RHEL&#x2F;CentOS系统有两个潜在的问题"></a>RHEL&#x2F;CentOS系统有两个潜在的问题</h3><p>首先，一旦确定了主版本，,除了安全问题和严重故障会被修复以外，其他内容将不会做任何改变。这虽然对稳定性有好处，但是对许多服务不利。比如MySQL和PHP服务，它们在这五年的CentOS&#x2F;RHEL主版本发布周期中会进行繁重的开发和大量的修改。例如，MySQL5.0 是当前RHEL&#x2F;CentOS主版本所默认使用的版本，但是当前MySQL已经更新到5.1和5.5版本了。</p><p>幸运的是，这个问题被Yum软件包管理器轻易地解决了。如此以来，那些主要的软件，例如当前RHEL&#x2F;CentOS中实际的组件，包括内核和所有工具等仍然来自发行版， 但是那些附加的软件，例如Nginx，Apache，PHP，Java和MySQL等等来自更新的软件源例如Fedora； 或者直接从开发商获取更新的版本例如MySQL。 在我们这里，我们有自己专用的安装镜像来全自动的处理所有这些事情。</p><p>其次，CentOS的发行会滞后于RedHat的发行，包括关键的补丁和修复。这在RHEL 6.x的发行周期中尤为显著。但是根据我们的经验，这没什么好担心的，对我们来说永远不会成为问题。</p><p>很多人询问我们为什么不用基于Debian的系统，例如Debian或者Ubuntu服务器。如果在别无选择的情况下，我们的确会支持这个建议，但是根据我们的经验来看，这些系统并不如RHEL&#x2F;CentOS来的稳定和可靠。</p><p>我们认为，这在某种程度上是由于他们过快的发展和各个版本、组合之间较少的测试且不成熟所导致的。然而尽管他们非常流行，但是主要的服务商和项目都仍然首选RHEL&#x2F;CentOS系统，因为这样他们就可以为企业顾客提供服务，（对Oracle和MySQL更是如此）。除此之外，基于Debian的系统有许多内核和稳定性问题，尤其是在我们的云计算服务中。</p><h3 id="对我们而言，唯一使用Debian-x2F-Ubuntu的原因是？"><a href="#对我们而言，唯一使用Debian-x2F-Ubuntu的原因是？" class="headerlink" title="对我们而言，唯一使用Debian&#x2F;Ubuntu的原因是？"></a>对我们而言，唯一使用Debian&#x2F;Ubuntu的原因是？</h3><p>“它们能够为一个系统提供必要的特殊服务时，尤其是当一些驱动程序或者一些IO 子系统需要一种新的内核的时候”。例如，ext4 文件系统或在最近的内核中日志的改变等；现在，所有这一切都包含在了RHEL&#x2F;CentOS6.x中。</p><p>当然，多数Linux开发者都使用的是Ubuntu的桌面版，而且可以理解的是，他们更倾向在开发生产时使用相同的系统，并且还能使用很多有趣的工具。但总体上来说，我们依然认为RHEL&#x2F;CentOS是一个更优越的部署平台，并且已经有十多个客户成功地转向使用CentOS 作为生产环境并且没有任何问题，但这仍然是艰巨的任务。</p><p>总的来说，你将更乐于看到一个良好管理的CentOS 系统。我们有成千上万台服务器使用CentOS平台，而每年平均只有一台服务器崩溃。我们也很难想象它竟如此罕见，所以，挑一个优秀、迅捷、可靠的平台吧！</p><hr><h2 id="对新装-CentOS-的配置以及-C-x2F-C-开发环境配置"><a href="#对新装-CentOS-的配置以及-C-x2F-C-开发环境配置" class="headerlink" title="对新装 CentOS 的配置以及 C&#x2F;C++ 开发环境配置"></a>对新装 CentOS 的配置以及 C&#x2F;C++ 开发环境配置</h2><p>对于我来说在拿到一台新的 VPS 的时候能 ping 上 baidu.com 就直接跳过前三步了。hhh</p><ul><li>配置主机名和hosts解析</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>修改 hostname&#x3D;server.domain.com</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><p>添加 127.0.0.1  server.domain.com<br>重启系统 reboot</p><ul><li>配置ip</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>修改onboot&#x3D;yes<br>修改bootproto&#x3D;static</p><p>添加<br>IPADDR&#x3D;192.168.1.100<br>NETMASK&#x3D;255.255.255.0<br>BROADCAST&#x3D;192.168.1.255<br>NETWORK&#x3D;192.168.1.0<br>GATEWAY&#x3D;192.168.1.1</p><ul><li>配置dns</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>nameserver 192.168.1.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service network restart <span class="comment">#重启网络</span></span><br><span class="line">ping baidu.com          <span class="comment">#看是否连通</span></span><br></pre></td></tr></table></figure><ul><li>安装 C&#x2F;C++ &amp; Makefile 开发环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install vim     <span class="comment">#强大的Vi编辑器，类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性</span></span><br><span class="line">yum install wget    <span class="comment">#从网络上自动下载文件的工具，支持通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载</span></span><br><span class="line">yum install gcc     <span class="comment">#一套由GNU工程开发的支持多种编程语言的编译器</span></span><br><span class="line">yum install cpp</span><br><span class="line">yum install gcc-c++</span><br><span class="line">yum install make    <span class="comment">#makefile</span></span><br><span class="line">yum install gdb     <span class="comment">#调试工具</span></span><br></pre></td></tr></table></figure><ul><li>添加epel源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</span><br><span class="line">rpm -ivh epel-release-latest-6.noarch.rpm</span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br></pre></td></tr></table></figure><ul><li>设置时区为亚洲&#x2F;上海。系统时间和硬件时间校准。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">yum -y install ntp</span><br><span class="line">ntpdate cn.pool.ntp.org     <span class="comment">#时钟同步</span></span><br><span class="line">hwclock --systohc           <span class="comment">#设置硬件时间和系统时间一致并校准</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux Learning </category>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VPS </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS管理面板：VPSMate</title>
      <link href="/2018/06/08/VPS-panel-VPSMate/"/>
      <url>/2018/06/08/VPS-panel-VPSMate/</url>
      
        <content type="html"><![CDATA[<h2 id="VPSMate-面板"><a href="#VPSMate-面板" class="headerlink" title="VPSMate 面板"></a>VPSMate 面板</h2><p>之前介绍过宝塔面板的安装和使用，也提到过VPSMate这个轻量级的面板，这次就把它的安装方法和使用写一下。</p><p>vpsmate是一款相当好用的 vps 管理面板，缺点是没有多用户管理，其他就没任何缺点了。个人使用的话，是相当好的。内存占用非常小，内存占用量约为 20MB，不使用时不会占用 CPU 资源。功能强大。</p><p>vpsmate 目前在 CentOS&#x2F;Redhat 的 5.4+、6.x 版本下测试通过，同时支持 32 位和 64 位版本。</p><p>能够快速安装常见的网站系统，包括 phpMyAdmin、WordPress、PHPWind 。</p><h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install wget python epel-release -y</span><br><span class="line">wget http://www.vpsmate.org/tools/install.py</span><br><span class="line">python install.py</span><br></pre></td></tr></table></figure><p>安装过程会让你输入用户名跟密码，可以直接回车，这样用户名跟密码均默认为 admin，安装好用<code>http://ip地址:8888/</code></p><p>登录后会让我们修改用户名跟密码，建立立即修改用户名跟密码。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>浏览器登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip地址:8888/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> VPS Panel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS网络优化：net-speeder</title>
      <link href="/2018/06/08/net-optimize-for-VPS-net-speeder/"/>
      <url>/2018/06/08/net-optimize-for-VPS-net-speeder/</url>
      
        <content type="html"><![CDATA[<h1 id="net-speeder"><a href="#net-speeder" class="headerlink" title="net-speeder"></a>net-speeder</h1><h2 id="为什么会有-net-speeder"><a href="#为什么会有-net-speeder" class="headerlink" title="为什么会有 net-speeder"></a>为什么会有 net-speeder</h2><p>当使用国外服务器时，经常会发现，下载速度只有十几k。平时可能不太注意，认为服务器带宽不足，或者自己使用的宽带不给力，其实很有可能原因并不在此。</p><p>由于光速的局限性，延迟会比较高（即使光沿直线传播，太平洋一个往返也要一百多毫秒）。并且由于距离较远，途径路由跳数较多，并且网络拥堵的原因。经常会发生丢包的情况。</p><p>对于平时使用最广泛的TCP协议来讲，发送端发出包后，接收端会回复ACK，表示自己收到了。用这种机制来保证可靠性。但对于高延迟链路来讲，如果每发送一个包都等待应答，那么大部分时间都在等待数据包到达，而链路则空置了。为此一般会采用滑动窗口技术。即在窗口满之前，发送端一直发送包，然后收到应答后将确认收到的包从窗口中移除。这样可以提高链路利用率。</p><p>TCP还有一个特性则是拥塞控制。当发送端检测到链路发生丢包时，则会主动缩小窗口大小以减慢发送速度，避免拥塞。不过对于跳数较多的链路来讲，只要有一个路由不够稳定丢包，就会被发送端判断为拥塞，从而影响网络速度。</p><p><strong>为了解决丢包问题，最简单粗暴的方法就是双倍发送，即同一份数据包发送两份。这样的话在服务器带宽充足情况下，丢包率会平方级降低。</strong></p><p>这种方式下，直接优点是降低丢包率，直接缺点是耗费双倍流量。一些延伸影响是更容易触发快速恢复逻辑，避免了丢包时窗口缩减过快。一定程度也能提高网络速度。</p><h2 id="测试情况（别人的）"><a href="#测试情况（别人的）" class="headerlink" title="测试情况（别人的）"></a>测试情况（别人的）</h2><p>最近比较忙，空闲时间做了一个最简单的程序，试用效果很好，在一台VPS上测试后发现，未开启时单线程下载、ssh管道速度在十几K级别。开启后可以达到平均300KB+的速度。效果非常明显。但对于不加速就可以跑满带宽的类型来讲（多线程下载），开启后反而由于多出来的无效流量，导致速度减半。所以对于多线程&#x2F;高速链路，这个方案是不适合的。</p><p>目前版本是最简单的逻辑，未来会进行细化（主动触发快速恢复、快速重传等），降低流量浪费，提升加速效果。</p><p>目前程序起名net-speeder，相对于修改协议栈来讲，由于后者需要重新升级编译内核，使用用户态程序部署更方便，稳定性更高，兼容性更好。缺点则是性能开销稍大和自由度有损失。总体比较起来，个人使用还是使用用户态程序更合适一些，特别是在虚拟机中使用（OpenVZ，LXC等虚拟机无法自己定制内核）。</p><hr><h1 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h1><ul><li>安装脚本：<br>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://gist.github.com/LazyZhu/dc3f2f84c336a08fd6a5/raw/d8aa4bcf955409e28a262ccf52921a65fe49da99/net_speeder_lazyinstall.sh</span><br><span class="line">sh net_speeder_lazyinstall.sh</span><br></pre></td></tr></table></figure><ul><li>安装脚本：<br>Debian &#x2F; Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/tennfy/debian_netspeeder_tennfy/master/debian_netspeeder_tennfy.sh</span><br><span class="line"><span class="built_in">chmod</span> a+x debian_netspeeder_tennfy.sh</span><br><span class="line">bash debian_netspeeder_tennfy.sh</span><br></pre></td></tr></table></figure><hr><ul><li>启动：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> /usr/local/net_speeder/net_speeder venet0 <span class="string">&quot;ip&quot;</span> &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>设置开机启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;nohup /usr/local/net_speeder/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp; &#x27;</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure><hr><p>记录完毕</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Net-Optimize </tag>
            
            <tag> Net-Speeder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS管理面板：宝塔面板</title>
      <link href="/2018/06/08/VPS-panel-bt/"/>
      <url>/2018/06/08/VPS-panel-bt/</url>
      
        <content type="html"><![CDATA[<h2 id="VPS面板"><a href="#VPS面板" class="headerlink" title="VPS面板"></a>VPS面板</h2><h3 id="VPS-面板是什么？"><a href="#VPS-面板是什么？" class="headerlink" title="VPS 面板是什么？"></a>VPS 面板是什么？</h3><p>以我的理解，整个 <strong>Linux</strong> 是一辆车，内部过于复杂以至于我们使用者（Linux 小白）没办法去像汽车工程师（Linux 开发者）一样去了解其内部运行情况和操作细节。</p><p>而 <strong>VPS 面板</strong>就是相当于汽车仪表盘的东西，它可以让我们像实现驾驶汽车、控制汽车里面的各种部件例如空调灯等操作，还可以让我们实时获取汽车的速度、油量、甚至温度等信息一样对我们的 Linux VPS 完成 <strong>环境、软件安装，设置安全规则等，机器性能信息等获取</strong> 。起到了一种<strong>黑箱</strong>的作用，我们不必要去理解 Linux 怎么运行，只要知道怎么用控制面板就可以了。</p><p>当然，这也是需要一点基础的。就像是开车不需要明白汽车的运作原理，但是要考驾照。使用 Linux 需要一定的 <strong>计算机基础</strong> 和 <strong>Linux 基础</strong> 。</p><h4 id="市面上的-VPS-面板"><a href="#市面上的-VPS-面板" class="headerlink" title="市面上的 VPS 面板"></a>市面上的 VPS 面板</h4><ul><li>DircetAdmin</li><li>Plesk</li><li>cPanel</li><li>AppNode</li><li>Vesta</li><li>bt</li><li>oneinstack</li><li>VPSMate</li><li>AMH</li><li>wdcp</li></ul><p>实在是太多了，都各有千秋，有的功能强大，有的颜值担当。有空的时候做一个汇总，嘿嘿~</p><h3 id="我选择的面板"><a href="#我选择的面板" class="headerlink" title="我选择的面板"></a>我选择的面板</h3><p>用过两个面板，一个是以前在小内存VPS上用的，叫做VPSMate，一个是现在用的，适合大点内存的VPS(256M以上)。<br>这篇博文就记录一下安装宝塔的命令。以下都在CentOS6 x64位上试验成功。</p><h4 id="宝塔-bt-的安装脚本"><a href="#宝塔-bt-的安装脚本" class="headerlink" title="宝塔 bt 的安装脚本"></a>宝塔 bt 的安装脚本</h4><p>依次运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install screen wget &amp;&amp; <span class="built_in">echo</span> -e “defencoding utf-8\nencoding utf-8 utf-8” &gt;&gt; /etc/screenrc &amp;&amp; screen -S bt</span><br><span class="line">wget -O install.sh http://125.88.182.172:5880/src/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><hr><p>安装过程中会让我们选择PHP和MySQL的版本，还有管理员密码什么的，都要记住。安装完成后在浏览器地址栏用 <code>http://ip地址:8888/</code> 来登录。</p><p>初次登录，建议修改管理员名和密码，还有面板名字，用于伪装。</p><p>一般面板会提示安装网页运行环境，一般有lnmp和lamp两种，根据个人喜好选择一个安装，指定好各个组件的版本。这里推荐编译安装，这样支持会完整，极速安装我个人觉得类似windows下的绿色版，支持肯定是不完整的。</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> VPS Panel </tag>
            
            <tag> 宝塔面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近用的VPS推荐</title>
      <link href="/2018/06/08/recommend-VPS-recently/"/>
      <url>/2018/06/08/recommend-VPS-recently/</url>
      
        <content type="html"><![CDATA[<p>内容过时了，内容删除，代码仓库归档。</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建一台稳如狗的 ShadowsockS/R 服务器</title>
      <link href="/2018/06/08/build-shadowsocks-r-like-a-stable-dog/"/>
      <url>/2018/06/08/build-shadowsocks-r-like-a-stable-dog/</url>
      
        <content type="html"><![CDATA[<h2 id="ShadowSocks-x2F-ShadowSocksR"><a href="#ShadowSocks-x2F-ShadowSocksR" class="headerlink" title="ShadowSocks&#x2F;ShadowSocksR"></a>ShadowSocks&#x2F;ShadowSocksR</h2><p>一款基于 <code>Socks5</code> 的代理软件，可以用于搭建虚拟专用网络通道（不多说，怕喝茶）。<br>下面一段摘自维基百科-<a href="http://https//zh.wikipedia.org/wiki/Shadowsocks" title="Shadowsocks">Shadowsocks</a></p><blockquote><p>Shadowsocks可以指：一种基于Socks5代理方式的加密传输协议，也可以指实现这个协议的各种传输包。目前包使用Python、C、C++、C#、Go语言等编程语言开发，大部分主要实现（iOS平台的除外）采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。</p><p>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。2015年8月22日，Shadowsocks原作者Clowwindy称受到了C-N&#x2F;G-O-V的压力，宣布停止维护此计划（项目）并移除其个人页面所存储的源代码。因为移除之前就有大量的复制副本，所以事实上并未停止维护，而是转由其他贡献者们持续维护中。</p></blockquote><p>维基上没有收录 ShadowsocksR，所以我也不误人子弟了~</p><p>说白了就是开拓眼界的好东西。</p><hr><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>拥有一台 VPS 服务器，并且满足以下要求：<ol><li>处在长城防火墙（GFW）之外，可访问外网，可从内网访问（可以 ping，可以 ssh）。（此处的内外相对于防火墙而言）</li><li>掌握了其 root 权限（可以调用也可以）</li><li>内存大于64MB</li><li>关于选购可以随便看看我写的这篇文章<a href="http://blog.chensmallx.top/2018/06/08/recommend-VPS-recently/" title="最近用的VPS推荐">最近用的VPS推荐</a></li></ol></li><li>掌握简单的 Linux 使用技能，具体命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">基本的：</span><br><span class="line">  <span class="built_in">cd</span> [-options] [args ...]</span><br><span class="line">  <span class="built_in">ls</span> [-options] [file ...]</span><br><span class="line">  <span class="built_in">rm</span> [-options] [file ...]</span><br><span class="line">  ./</span><br><span class="line">  reboot  or  shutdown</span><br><span class="line">  ...</span><br><span class="line">进阶的：</span><br><span class="line">  curl  [options] [URL...]</span><br><span class="line">  wget [options] [URL ...]</span><br><span class="line">  apt-get [options] [options] ...</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><ul><li>会使用 ssh 工具登录自己的 vps<ul><li>比如 windows 上的 putty，xshell 等，mac 上的 termimal，Linux 的 bash 等等。</li></ul></li></ul><hr><h2 id="配置（优化）-VPS-的网络"><a href="#配置（优化）-VPS-的网络" class="headerlink" title="配置（优化） VPS 的网络"></a>配置（优化） VPS 的网络</h2><p> VPS 的系统推荐使用 CentOS 或者 Debian，单纯的为服务器设计的系统，资料齐全以及使用面广。【Ubuntu 还是不要用吧，个人不推荐使用（包括个人机 PC）】</p><p>可以根据需求在 <a href="http://blog.chensmallx.top/index.php/category/VPS/%22%E6%8A%98%E8%85%BE%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8_VPS%22">折腾云服务器_VPS</a> 里面选择进行配置和优化。</p><p> 强烈推荐使用 <a href="http://blog.chensmallx.top/index.php/VPS/vps-network-optimization-netspeeder.html" title="net-speeder">net-speeder</a> 进行网络优化。</p><hr><p>下面就是搭建 SS&#x2F;SSR 的本身</p><h2 id="ShadowSocks"><a href="#ShadowSocks" class="headerlink" title="ShadowSocks"></a>ShadowSocks</h2><p>搭建脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line"><span class="built_in">chmod</span> +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | <span class="built_in">tee</span> shadowsocks.log</span><br></pre></td></tr></table></figure><h2 id="ShadowSocksR"><a href="#ShadowSocksR" class="headerlink" title="ShadowSocksR"></a>ShadowSocksR</h2><p>搭建脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"><span class="built_in">chmod</span> +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | <span class="built_in">tee</span> shadowsocks-all.log</span><br></pre></td></tr></table></figure><p>在脚本运行的过程中，脚本会提示我们选择加密方式，选择服务端口，设置账号、密码等等。<br>我个人是比较倾向于传统的配置方式，至少用了这么久还没翻车过。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Your Server IP<span class="punctuation">:</span>  ***</span><br><span class="line">Your Server Port<span class="punctuation">:</span>  <span class="number">443</span></span><br><span class="line">Your Password<span class="punctuation">:</span>  ***</span><br><span class="line">Your Local IP<span class="punctuation">:</span>  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">Your Local Port<span class="punctuation">:</span>  <span class="number">1080</span></span><br><span class="line">Your Encryption Method<span class="punctuation">:</span>  aes<span class="number">-256</span>-cfb</span><br></pre></td></tr></table></figure><p>启动 | 停止 | 重启 | 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks-python start | stop | restart | status</span><br><span class="line"></span><br><span class="line">/etc/init.d/shadowsocks-r start | stop | restart | status</span><br><span class="line"></span><br><span class="line">/etc/init.d/shadowsocks-go start | stop | restart | status</span><br><span class="line"></span><br><span class="line">/etc/init.d/shadowsocks-libev start | stop | restart | status</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/shadowsocks-python/config.json</span><br><span class="line"></span><br><span class="line">/etc/shadowsocks-r/config.json</span><br><span class="line"></span><br><span class="line">/etc/shadowsocks-go/config.json</span><br><span class="line"></span><br><span class="line">/etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure><hr><h2 id="连接（测试）自己搭建好的-SS-x2F-SSR"><a href="#连接（测试）自己搭建好的-SS-x2F-SSR" class="headerlink" title="连接（测试）自己搭建好的 SS&#x2F;SSR"></a>连接（测试）自己搭建好的 SS&#x2F;SSR</h2><p>在 <a href="https://dl.onetive.com/" title="全版本 SSR 客户端下载">全版本 SSR 客户端下载</a> 下载自己设备能使用的软件版本（SSR 和 SS 的软件之间可以互联，但是 SSR 是粉色的，更骚更好看）。如果不喜欢的话可以在出墙之后上 GooglePlay 上下载 Shadowsocks 的 APP。<br>在 github 上也有下载各种平台版本的 Shadowsocks</p><blockquote><p>windows：shadowsocks-gui</p><p>linux&#x2F;unix(macOS): shadowsocks-qt5 or shadowsocks-py</p></blockquote><p>运行软件后，将我们服务端的配置填入本地软件设置中（或者编辑 shadowsocks 软件目录下的 config.json），然后运行服务即可。<br>测试：登录 <a href="http://www.google.com/">www.google.com</a> ，如果可以登录即证明已经在墙外了。</p><hr><p>推荐：PAC 模式。PAC 可以说是服务的一种简单配置，配置中含有一定的地址集合，可通过规则使流量分流。例如：</p><ol><li>海外地址走服务器，墙内地址走直连</li><li>需要安全链接的走服务器，不需要安全链接的走直连</li><li>……</li></ol><hr><p>明天也要一样加油哦~</p>]]></content>
      
      
      <categories>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Shadowsocks/R </tag>
            
            <tag> 开拓眼界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Vsocde 的配置文件问题</title>
      <link href="/2018/06/07/config-of-vscode-for-c-cpp-on-macos/"/>
      <url>/2018/06/07/config-of-vscode-for-c-cpp-on-macos/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h1><p>vscode 是我从 windows 到 MacOS 上都很喜欢的一款编辑器（辣鸡如我没用过其他的，例如：sublime、atom），它很强大，真的很强大，用武科大一个写 Python 的同学的说法就是：一流程序员用 vscode，二流程序员用 pycharm</p><h2 id="VScode-强大在哪里呢？"><a href="#VScode-强大在哪里呢？" class="headerlink" title="VScode 强大在哪里呢？"></a>VScode 强大在哪里呢？</h2><p>摘录自网络</p><blockquote><p>由于VS被评为最好用的IDE，所以出了VSC也是蛮让人期待的，看了官方使用介绍初步体验了一下，果然充满惊喜，比sublime开源，比atom更快，比webstorm更轻。</p><p>初步印象：</p><ul><li>文件目录管理很强大</li><li>自定义配置，主题，自动保存，可以设置延迟毫秒后保存，也可以设置文件失去焦点时自动保存</li><li>集成Git，快速diff,而且修改文件后会左边会显示指示器，比如删除会显示红色，增加显示绿色，修改则显示蓝色，很方便啊！</li><li>智能提示很强大，作为一款编辑器这是sublime和atom没法比的啊，正如知友所言，秒sublime和atom几条街，简直就是浓缩版的VS！</li><li>Go to Definition很方便,按F12自动跳转到方法定义处，如果不想跳转，直接shift+F12实现Peek功能！(泪流满面)</li><li>自带emmet支持html&#x2F;jade&#x2F;css&#x2F;less&#x2F;sass&#x2F;xml，前端福音啊</li><li>自带强大的调试功能，官方说这是大亮点，不过我node写的少，还没体验到，看这界面刁刁的</li></ul></blockquote><p>作者：动感小前端<br>链接：<a href="https://www.zhihu.com/question/29984607/answer/93300215">https://www.zhihu.com/question/29984607/answer/93300215</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><blockquote><p>优点：</p><p>1，好看，分分钟逼死notepad++。<br>2，加载大文件几乎秒开。<br>3，C#支持高亮，已经编译过的还支持引用。<br>4，JS、HTML等支持高亮和补全。<br>5，全平台，我再也不纠结买RMBP还是XPS了。<br>6，免费，这是必须的好评7，占用内存低，下图是我打开我正在写的开源（20M左右代码）文件夹后的内存占用，堪称神奇。<br><img src="https://pic3.zhimg.com/80/96426695ed4126287db1614f9204c051_hd.jpg"></p><p>缺点：</p><p>对C#支持还不够好。<br>不支持工程加载，只支持文件夹加载，引用比较复杂的大工程支持力度低。<br>支持git但是对github没提供接口。<br>debug需要手动输入参数，虽不复杂，但和VS一贯定位不符。</p><p>总结：</p><p>删除了notepad++，并将所有文本文件关联在了code上。<br>第一版本就这么给力，后续版本私钥sublime和atom去死么。<br>以后别收费才好。<br>建议捆绑在VS上，（逃</p></blockquote><p>作者：Caspar Cui<br>链接：<a href="https://www.zhihu.com/question/29984607/answer/46321538">https://www.zhihu.com/question/29984607/answer/46321538</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>太多了，不一一赘述了，总之就是太强大了，用一次就知道是我想要的。</p><h1 id="为什么要配置-VScode"><a href="#为什么要配置-VScode" class="headerlink" title="为什么要配置 VScode"></a>为什么要配置 VScode</h1><p>在 VScode 上写 C&#x2F;C++ 需要安装支持插件，插件需要配置文件来配合它的工作。下面是 MacOS 和 Windows 上的配置文件。</p><hr><h2 id="我个人在-MacOS-上的-C-x2F-C-配置文件"><a href="#我个人在-MacOS-上的-C-x2F-C-配置文件" class="headerlink" title="我个人在 MacOS 上的 C&#x2F;C++配置文件"></a>我个人在 MacOS 上的 C&#x2F;C++配置文件</h2><p>需要文件</p><ul><li>launch.json</li><li>tasks.json</li></ul><p>有一点要提一下，就是在最新的 MacOS 上已经全面禁用了 gdb 了，虽然有办法可以让 gdb 可用，但是就有与系统作对的嫌疑了。总之使用 clang 也是不错滴。</p><h3 id="launch-json-for-MacOS"><a href="#launch-json-for-MacOS" class="headerlink" title="launch.json for MacOS"></a>launch.json for MacOS</h3><p>launch.json, 是控制调试程序的配置文件，确定了程序运行的路径、参数、环境配置等等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。</span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(lldb) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang++&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="tasks-json-for-MacOS"><a href="#tasks-json-for-MacOS" class="headerlink" title="tasks.json for MacOS"></a>tasks.json for MacOS</h3><p>tasks.json, 通过通读文件，可以看出这个配置文件指定了用于编译的指令，指令结果输出方式和控制指令的参数等，其重要性可见一斑。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang++&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isShellCommand&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-std=c++11&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;fileBasenameNoExtension&#125;.out&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;showOutput&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="我个人在-Windows-上的-C-x2F-C-配置文件"><a href="#我个人在-Windows-上的-C-x2F-C-配置文件" class="headerlink" title="我个人在 Windows 上的 C&#x2F;C++配置文件"></a>我个人在 Windows 上的 C&#x2F;C++配置文件</h2><p>在 Windows 上使用 VScode 开发我个人喜好是使用 gcc&#x2F;g++ &amp; gdb，命令用起来更顺手，更加的清晰明了。MSVC 也不是说不好，其实就是用 VS 的时候 MSVC 会更强。</p><p>当然若是在 Windows 上写大项目的话使用 VS+MSVC 也是十分推荐的。</p><h3 id="launch-json-for-Win"><a href="#launch-json-for-Win" class="headerlink" title="launch.json for Win"></a>launch.json for Win</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C++ Launch (GDB)&quot;</span><span class="punctuation">,</span>                 <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span>                           <span class="comment">// 配置类型，这里只能为cppdbg</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span>                        <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line">            <span class="attr">&quot;launchOptionType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Local&quot;</span><span class="punctuation">,</span>                <span class="comment">// 调试器启动类型，这里只能为Local</span></span><br><span class="line">            <span class="attr">&quot;targetArchitecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x86&quot;</span><span class="punctuation">,</span>                <span class="comment">// 生成目标架构，一般为x86或x64，可以为x86, arm, arm64, mips, x64, amd64, x86_64</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;file&#125;.exe&quot;</span><span class="punctuation">,</span>                   <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;c:\\MinGW\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// miDebugger的路径，注意这里要与MinGw的路径对应</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>                                 <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span>                       <span class="comment">// 设为true时程序将暂停在程序入口处，一般设置为false</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span>                  <span class="comment">// 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;即代码所在目录</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>                    <span class="comment">// 调试时是否显示控制台窗口，一般设置为true显示控制台</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span>　　                  <span class="comment">// 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="tasks-json-for-Win"><a href="#tasks-json-for-Win" class="headerlink" title="tasks.json for Win"></a>tasks.json for Win</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-g&quot;</span><span class="punctuation">,</span><span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span><span class="string">&quot;-o&quot;</span><span class="punctuation">,</span><span class="string">&quot;$&#123;file&#125;.exe&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>    <span class="comment">// 编译命令参数</span></span><br><span class="line">    <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;relative&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programer Walk </category>
          
          <category> Geek&#39;s Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> programming tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test Editor.md</title>
      <link href="/2018/06/06/test/"/>
      <url>/2018/06/06/test/</url>
      
        <content type="html"><![CDATA[<p>如果这篇文章正常显示，则说明博客与发博功能正常上线。</p><span id="more"></span><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul><li>支持“标准”Markdown &#x2F; CommonMark和Github风格的语法，也可变身为代码编辑器；</li><li>支持实时预览、图片（跨域）上传、预格式文本&#x2F;代码&#x2F;表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；</li><li>支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；</li><li>支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;</li><li>支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；</li><li>支持 AMD &#x2F; CMD 模块化加载（支持 Require.js &amp; Sea.js），并且支持自定义扩展插件；</li><li>兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；</li><li>支持自定义主题样式；</li></ul><h1 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h1><p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png"></p><p><img src="https://img.shields.io/github/stars/pandao/editor.md.svg"><br><img src="https://img.shields.io/github/forks/pandao/editor.md.svg"><br><img src="https://img.shields.io/github/tag/pandao/editor.md.svg"><br><img src="https://img.shields.io/github/release/pandao/editor.md.svg"><br><img src="https://img.shields.io/github/issues/pandao/editor.md.svg"><br><img src="https://img.shields.io/bower/v/editor.md.svg"></p><p><strong>目录 (Table of Contents)</strong></p><p>[TOCM]</p><p>[TOC]</p><h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h1 id="Heading-1-link-Heading-link"><a href="#Heading-1-link-Heading-link" class="headerlink" title="Heading 1 link Heading link"></a>Heading 1 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h1><h2 id="Heading-2-link-Heading-link"><a href="#Heading-2-link-Heading-link" class="headerlink" title="Heading 2 link Heading link"></a>Heading 2 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h2><h3 id="Heading-3-link-Heading-link"><a href="#Heading-3-link-Heading-link" class="headerlink" title="Heading 3 link Heading link"></a>Heading 3 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h3><h4 id="Heading-4-link-Heading-link-Heading-link-Heading-link"><a href="#Heading-4-link-Heading-link-Heading-link-Heading-link" class="headerlink" title="Heading 4 link Heading link Heading link Heading link"></a>Heading 4 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a> Heading link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h4><h5 id="Heading-5-link-Heading-link"><a href="#Heading-5-link-Heading-link" class="headerlink" title="Heading 5 link Heading link"></a>Heading 5 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h5><h6 id="Heading-6-link-Heading-link"><a href="#Heading-6-link-Heading-link" class="headerlink" title="Heading 6 link Heading link"></a>Heading 6 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><em><strong>粗斜体</strong></em> <em><strong>粗斜体</strong></em></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/">普通链接</a></p><p><a href="http://localhost/" title="普通链接带标题">普通链接带标题</a></p><p>直接链接：<a href="https://github.com/">https://github.com</a></p><p><a href="http://www.this-anchor-link.com/">锚点链接</a></p><p>GFM a-tail link @pandao</p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似<code>&lt;pre&gt;</code>预格式化文本(Preformatted Text)的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> box.<span class="property">fn</span>.<span class="title function_">init</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    box.<span class="property"><span class="keyword">prototype</span></span> = box.<span class="property">fn</span> = &#123;</span><br><span class="line">        init : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;box.init()&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        add : <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;add&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        remove : <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;remove&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    box.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = box.<span class="property">fn</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">box</span> =box;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testBox = <span class="title function_">box</span>();</span><br><span class="line">testBox.<span class="title function_">add</span>(<span class="string">&quot;jQuery&quot;</span>).<span class="title function_">remove</span>(<span class="string">&quot;jQuery&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="HTML代码-HTML-codes"><a href="#HTML代码-HTML-codes" class="headerlink" title="HTML代码 HTML codes"></a>HTML代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>Image:</p><p><img src="https://pandao.github.io/editor.md/examples/images/4.jpg"></p><blockquote><p>Follow your heart.</p></blockquote><p><img src="https://pandao.github.io/editor.md/examples/images/8.jpg"></p><blockquote><p>图为：厦门白城沙滩</p></blockquote><p>图片加链接 (Image + Link)：</p><p><a href="https://pandao.github.io/editor.md/examples/images/7.jpg" title="李健首张专辑《似水流年》封面"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg"></a></p><blockquote><p>图为：李健首张专辑《似水流年》封面</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li><input checked="" disabled="" type="checkbox"> GFM task list 1</li><li><input checked="" disabled="" type="checkbox"> GFM task list 2</li><li><input disabled="" type="checkbox"> GFM task list 3<ul><li><input disabled="" type="checkbox"> GFM task list 3-1</li><li><input disabled="" type="checkbox"> GFM task list 3-2</li><li><input disabled="" type="checkbox"> GFM task list 3-3</li></ul></li><li><input disabled="" type="checkbox"> GFM task list 4<ul><li><input disabled="" type="checkbox"> GFM task list 4-1</li><li><input disabled="" type="checkbox"> GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th align="right">Value</th></tr></thead><tbody><tr><td>Computer</td><td align="right">$1600</td></tr><tr><td>Phone</td><td align="right">$12</td></tr><tr><td>Pipe</td><td align="right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&amp;copy; &amp;  &amp;uml; &amp;trade; &amp;iexcl; &amp;pound;<br>&amp; &lt; &gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot;</p><p>X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14;  &amp;times;  &amp;divide;   &amp;raquo;</p><p>18&amp;ordm;C  &quot;  &amp;apos;</p><h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li><input checked="" disabled="" type="checkbox"> :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li><input checked="" disabled="" type="checkbox"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li><input checked="" disabled="" type="checkbox"> [ ] :smiley: this is a complete item :smiley:;</li><li><input disabled="" type="checkbox"> []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li><input disabled="" type="checkbox"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li><input disabled="" type="checkbox"> :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li><input disabled="" type="checkbox"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E&#x3D;mc^2$$</p><p>行内的公式$$E&#x3D;mc^2$$行内的公式，行内的$$E&#x3D;mc^2$$公式。</p><p>$$(\sqrt{3x-1}+(1+x)^2)$$</p><p>$$\sin(\alpha)^{\theta}&#x3D;\sum_{i&#x3D;0}^{n}(x^i + \cos(f))$$</p><p>多行公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</span><br><span class="line">\leq</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">    \frac&#123;1&#125;&#123;</span><br><span class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</span><br><span class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</span><br><span class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</span><br><span class="line">         &#123;1+\cdots&#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(x) = <span class="keyword">\int</span><span class="built_in">_</span>&#123;-<span class="keyword">\infty</span>&#125;<span class="built_in">^</span><span class="keyword">\infty</span></span><br><span class="line">    <span class="keyword">\hat</span> f(<span class="keyword">\xi</span>)<span class="keyword">\,</span>e<span class="built_in">^</span>&#123;2 <span class="keyword">\pi</span> i <span class="keyword">\xi</span> x&#125;</span><br><span class="line">    <span class="keyword">\,</span>d<span class="keyword">\xi</span></span><br></pre></td></tr></table></figure><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks\nabout it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2018/06/06/hello-hexo/"/>
      <url>/2018/06/06/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
