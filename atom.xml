<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Case of Xeon</title>
  
  <subtitle>Welcome inside</subtitle>
  <link href="https://hexo.chensmallx.top/atom.xml" rel="self"/>
  
  <link href="https://hexo.chensmallx.top/"/>
  <updated>2022-11-22T01:28:07.061Z</updated>
  <id>https://hexo.chensmallx.top/</id>
  
  <author>
    <name>SmallXeon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于docker的nextcloud+aria2离线下载联动解决方案</title>
    <link href="https://hexo.chensmallx.top/2022/10/23/nextcloud-with-aria2-on-docker/"/>
    <id>https://hexo.chensmallx.top/2022/10/23/nextcloud-with-aria2-on-docker/</id>
    <published>2022-10-23T05:45:05.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>前几天，在 <a href="/2021/04/08/nextcloud-on-docker/">使用docker-compose搭建nextcloud+Nginx+MySQL+Redis</a> 这篇文章中的 <a href="https://github.com/ChenSmallX/ChenSmallX.github.io/issues/67#issuecomment-1283605433">这条评论</a> 引起了我的好奇心。这位兄弟的评论内容大致是想要将 Nextcloud 与 Aria2 联动实现网盘上的离线下载功能。</p><p>在看到这个主意后，转念一想，就目前市面上来看，离线下载不是已经成为一个网盘应用的基础功能了吗？我这 Nextcloud 那也必须整上啊 🤣 ！二话不说就开整。</p><p>经过几次尝试后，大致找到了一个能够与 <a href="/2021/04/08/nextcloud-on-docker/">使用docker-compose搭建nextcloud+Nginx+MySQL+Redis</a> 这篇文章中的 nextcloud 整体方案能够完美兼容，并实现部署后简单配置即可使用的效果。</p><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>套方案是基于 <a href="/2021/04/08/nextcloud-on-docker/">使用docker-compose搭建nextcloud+Nginx+MySQL+Redis</a> 这篇文章中搭建好的 Nextcloud 整体解决方案实现的，所以在部署上是沿用了 docker-compose 这种简单快速且方便迁移的基本方法。</p><p>而就 Nextcloud 与 Aria2 的交互方法采用的是目前已经成熟了且完美兼容 Nextcloud 的插件 ocDownload。这款插件支持 aria2、youtube-dl、curl 等网络下载组件，但我们这里仅使用 aira2 这一个功能，其他的下载组件看以后是否有充分的需求再去折腾吧 😂 。ocDownloader 与 Aria2 交互的方式是传统的 Aria2-RPC 协议，与 AriaNG 类似，也是一个可独立运行的前端，有效与否取决于 Aria2 的服务端是否正常工作。</p><p>在使用的过程中，发现 ocDownloader 在连接 Aria2 这方面几乎没有可配置的地方，只能选择在 HTTP 和磁力下载时使用 Aria2 还是 cURL，其余的类似 Aria2 的地址、端口等都找不到配置的地方。所以初步怀疑是 ocDownloader 将 Aria2 的地址和端口写死了，目标连接很可能就是经典的 <code>127.0.0.1:6800</code>。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023005412.png" alt="ocDownloader 的使用页面">  </p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023005622.png" alt="ocDownloader 的配置页面">  </p><p>经过以上的分析，这套操作的主要思路分为以下几步：</p><ol><li><a href="#%E9%85%8D%E7%BD%AE-Aria2-%E5%AE%B9%E5%99%A8">配置 Aria2 容器</a></li><li><a href="#%E5%AE%89%E8%A3%85-ocDownloader-%E6%8F%92%E4%BB%B6">安装 ocDownloader 插件</a></li><li><a href="#%E4%BF%AE%E6%94%B9-ocDownloader-%E6%8F%92%E4%BB%B6%E4%BB%A3%E7%A0%81">修改 ocDownloader 插件代码以使之能连上 Aria2 服务端</a></li></ol><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="配置-Aria2-容器"><a href="#配置-Aria2-容器" class="headerlink" title="配置 Aria2 容器"></a>配置 Aria2 容器</h3><p>由于之前的 nextcloud 的 docker 是使用了 docker-compose 来组织容器，所以这次也使用 docker-compose 的形式呈现。</p><p>由于 docker-compose 强依赖于 docker-compose.yml 文件中的参数配置，如果 yml 文件中的参数配置在 compose 运行过程中发生了变化，会导致 down 和 up 都发生错误。所以在开始之前，我们先将容器都 down 掉（就是删除容器的意思）。</p><blockquote><p>注意，这里要确保所有重要的数据都映射到了本地磁盘空间中，否则在重启这份 compose 后造成数据丢失。当然，按照我之前文章的映射方法映射后，就不会有问题，重要数据都是映射到本地了。</p></blockquote><ul><li><p>这里我们可以使用常规的 down 来关闭 compose，并在配置完成后常规 up</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭 compose</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="comment"># 重新构建 compose</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>也可以在全部配置完成后，强行使用新的配置重新构建 compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --force-recreate -d</span><br></pre></td></tr></table></figure></li></ul><p>这里我将 Aria2 的容器命名为 downloader，以下是容器的启动参数。镜像使用的是他人专门给 nextcloud 配置过的 <code>wahyd4/aria2-ui:nextcloud</code> 版本，当然也可以使用其他版本的，例如使用次数最多的 <code>p3terx/aria2-pro</code>，只要是能够配置 uid 和 gid 的就足够了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">downloader:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">wahyd4/aria2-ui:nextcloud</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  <span class="attr">expose:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&quot;6800&quot;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">./app/data:/var/www/html/data</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">PUID=33</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">PGID=33</span></span><br></pre></td></tr></table></figure><ul><li>这里使用 expose 将 6800 端口暴露在 docker 的网络中而不是宿主机的网络中，是因为我们后面要将 downloader 容器连接到 nextcloud 的容器中，只需要这两个容器可以数据交互即可，无需将多余的端口暴露给外部而增加安全风险。</li><li>这里使用 volumes 将 nextcloud 的 <code>/var/www/html/data</code> 以相同路径映射到 aria2 容器中，是因为 ocDownloader 会自动将每个用户创建的下载任务的下载目的路径拼接到 nextcloud 本地的路径中，以实现单个用户下载的数据只能由当前用户使用。</li><li>配置 PUID 和 PGID 为 33，是因为 nextcloud 容器中运行 nextcloud 进程的用户是 <code>www-data</code>，而这个用户的用户 ID 和组 ID 是 <code>33:33</code>，配置了相同的用户 ID 和组 ID 后，就可以让 Aria2 容器中的下载器下载下来的文件的所属权限与 nextcloud 完全相同，并使得两边的进程对这些文件都能操作。</li><li>不在 environment 中给 Aria2 配置用户名和密码主要也是因为这个容器并不对外暴露，唯一能够接触到这个容器的方式只有通过 nextcloud 容器间接接触，加之不配置认证选项可以降低配置的难度。</li></ul><hr><p>配置好 Aria2 的容器后，还需要修改一下 nextcloud 容器的配置，使得两个容器从网络上和数据上做到互通：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nextcloud:fpm</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">./app/data:/var/www/html/data</span></span><br><span class="line">   <span class="comment"># 这里只需要确保 data 的路径也同样映射到 aria2 中即可</span></span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">links:</span></span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">downloader:downloader</span></span><br><span class="line">   <span class="comment"># 这里将 downloader 容器以 downloader 的名字映射到 nextcloud 的容器中</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">   <span class="comment"># ...</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">downloader</span></span><br><span class="line">   <span class="comment"># 这里设置 nextcloud 容器依赖于 downloader 容器，使 nextcloud 容器启动顺序在 aria2 容器之后。其实这条配不配都是可以的</span></span><br></pre></td></tr></table></figure><h3 id="安装-ocDownloader-插件"><a href="#安装-ocDownloader-插件" class="headerlink" title="安装 ocDownloader 插件"></a>安装 ocDownloader 插件</h3><p>直接从应用商店安装与自己 nextcloud 匹配的 ocDownloader，或者从 <a href="https://apps.nextcloud.com/apps/ocdownloader">ocDownloader - Apps - App Store - Nextcloud</a> 下载与自己 nextcloud 版本匹配的拓展包上传到服务器后解压安装到 <code>/var/www/html/apps</code> 中。</p><p>并启用 ocDownloader。在设置中的“其他设置”中能够看到 ocDownloader 的配置选项，即为安装并启用完成。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023124318.png" alt="点击 ocDownloader 右侧的启用，使其操作按钮名称变为禁用，即为开启状态">  </p><p>此时已经可以可以看到导航栏中的 ocDownloader 图标了，并且可以进入它的页面。但是此时大家会发现，<strong>它其实是无法使用的</strong>，因为它根本连不上 Aria2 的 RPC。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023124843.png" alt="ocDownloader 图标">  </p><h3 id="修改-ocDownloader-插件代码"><a href="#修改-ocDownloader-插件代码" class="headerlink" title="修改 ocDownloader 插件代码"></a>修改 ocDownloader 插件代码</h3><p>之前在<a href="#%E5%A4%A7%E8%87%B4%E6%80%9D%E8%B7%AF">大致思路</a>中也讲到过，ocDownloader 在插件代码中将连接 Aria2 的地址写死了，导致除了 <code>127.0.0.1:6800</code>，其他地址一律不认。好在整个 nextcloud 体系是建立在 php 语言的基础上的，所有代码都是可以修改后直接运行的，不需要重新编译。</p><p>虽然我是做 c++&#x2F;python 后端开发的，不会 php，但是万变不离其宗，编码的中心思想基本都是通用的。依托于我那蹩脚阅读代码的能力，最后也还是找到了配置 Aria2 连接地址的位置，这里就不卖关子了，直接把文件路径放这里。</p><blockquote><p>容器内的代码路径为 <code>/var/www/html/apps/ocdownloader/controller/lib/aria2.php</code>，如果使用跟我的 docker-compose.yml 一样的映射方式，那么此时在宿主机中的位置就是 <code>./app/html/apps/ocdownloader/controller/lib/aria2.php</code></p></blockquote><p>先进入这个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> html/apps/ocdownloader/controller/lib/</span><br></pre></td></tr></table></figure><p>备份一下原文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> aria2.php aria2.php.bak</span><br></pre></td></tr></table></figure><p>然后使用编辑器编辑这个文件的第 34 行，或者搜索 <code>self::$Server</code> ，将其赋值的数据从 <code>&quot;127.0.0.1&quot;</code> 改为 <code>&quot;downloader&quot;</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aria2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$Name</span>, <span class="variable">$Args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$Settings</span> = <span class="keyword">new</span> <span class="title class_">Settings</span>();</span><br><span class="line">        <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">setKey</span>(<span class="string">&#x27;AriaAddress&#x27;</span>);</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$Server</span> = <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">getValue</span>() ? <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">getValue</span>() : <span class="string">&#x27;downloader&#x27;</span>;  <span class="comment">// 修改这里</span></span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$Server</span> .= <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">        <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">setKey</span>(<span class="string">&#x27;AriaPort&#x27;</span>);</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$Server</span> .= <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">getValue</span>() ? <span class="variable">$Settings</span>-&gt;<span class="title function_ invoke__">getValue</span>() : <span class="string">&#x27;6800&#x27;</span>;</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$Server</span> .= <span class="string">&#x27;/jsonrpc&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里改为 <code>&quot;downloader&quot;</code> 是因为我在 docker-compose.yml 中将 Aria2 的容器以 <code>downloader</code> 的名称映射到了 nextcloud 的容器 host 列表中，这样就可以直接通过 downloader 这个地址解析到 Aria2 容器在 docker 网桥内的内网地址。</p><p>保存这个文件。</p><p>重启重新构建 docker-compose 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>等待容器完全启动，页面服务可以访问后，就可以在 nextcloud 中使用 ocDownloader 与 Aria2 容器进行交互了！</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="日志排障"><a href="#日志排障" class="headerlink" title="日志排障"></a>日志排障</h3><p>因为这个方法有点骚，每个人在环境中面对的情况可能不一样，所以这里提供一些基本的排障手段。</p><p>持续监控查看某个容器的服务日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [容器名/容器ID] -f</span><br></pre></td></tr></table></figure><p>这里我们尝试从页面上的 ocDownloader 下载一个<a href="https://4e2f5ebe7c93af6dc2c7943c2576e19b.rdt.tfogc.com:49156/dldir1.qq.com/weixin/Windows/WeChatSetup.exe?mkey=6354e8e6d23746820ea3b4fecf66d684&arrive_key=1218989679613&cip=58.61.50.191&proto=https">微信的 windows 端安装包</a>。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023131732.png" alt="下载微信 windows 安装包">  </p><p>可以看到，下载是可以正常启动，并可以看到历史的下载记录的：</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023131827.png" alt="下载中与历史下载任务情况">  </p><p>从 Aria2 容器的日志中也可以看到下载的创建、进行情况：</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023132257.png" alt="Aria2 的日志">  </p><h3 id="ocDownloader-配置项"><a href="#ocDownloader-配置项" class="headerlink" title="ocDownloader 配置项"></a>ocDownloader 配置项</h3><p>打字太麻烦了，贴张图把</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023133530.png" alt="ocDownloader 配置项">  </p><p>在默认下载文件夹参数中配置了目录后，就会在个人的文件页面中创建对应的目录，并下载到这里面。</p><p><img src="/../img/nextcloud-with-aria2-on-docker-20221023133818.png" alt="下载目录配置">  </p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Geek&#39;s Work" scheme="https://hexo.chensmallx.top/categories/Geek-s-Work/"/>
    
    
    <category term="计算机协会" scheme="https://hexo.chensmallx.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A/"/>
    
    <category term="linux" scheme="https://hexo.chensmallx.top/tags/linux/"/>
    
    <category term="docker" scheme="https://hexo.chensmallx.top/tags/docker/"/>
    
    <category term="docker-compose" scheme="https://hexo.chensmallx.top/tags/docker-compose/"/>
    
    <category term="nextcloud&#39;" scheme="https://hexo.chensmallx.top/tags/nextcloud/"/>
    
    <category term="mysql" scheme="https://hexo.chensmallx.top/tags/mysql/"/>
    
    <category term="nginx" scheme="https://hexo.chensmallx.top/tags/nginx/"/>
    
    <category term="redis" scheme="https://hexo.chensmallx.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Timsort算法Python实现</title>
    <link href="https://hexo.chensmallx.top/2022/05/19/python-timsort/"/>
    <id>https://hexo.chensmallx.top/2022/05/19/python-timsort/</id>
    <published>2022-05-19T06:35:20.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<p>Timsort 算法是一个以人名命名的，工业级、稳定型排序算法。Python 中内置<code>sorted</code>函数和各类中的<code>sort</code>方法都是用的 Timesort。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><img src="/../img/timsort.png" alt="各种算法性能对比图"></p><p>最好的情况下可以达到 O(n)，最差情况下也不过 O(n log(n))，这属于是排序算法中最好的情况了。和堆排序的优劣在于，最好情况下堆排序为O(n log(n))（比timsort慢）,空间上堆排为 O(1)，timsort为 O(n)。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>Timsort的大致步骤可以分为3步：</p><ol><li>将数据按照单调递增或单调递减分割为多个独立的切片，每个切片称作一个<code>run</code>，并将单调递减的 run 翻转。</li><li>定义一个长度阈值，将长度低于这个阈值的 run 与相邻的 run 合并，以提高后续归并的效率。</li><li>将所有的 run 依次压入栈中，并使得在压入栈的过程中，三个连续的 run <code>[X, Y, Z] </code>始终满足 <code>len(X) + len(Y) &lt; len(Z)</code> 和 <code>len(X) &lt; len(Y)</code> 的条件。如果不满足以上条件，则将 Y run 与 X, Z 中较短的 run 通过归并排序合并。</li></ol><p>以上三个步骤为 timsort 算法的核心思想，每个步骤的实现会因人而异，总体的核心代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MIN_SORT_LEN = <span class="number">32</span>  <span class="comment"># 可以根据数据的规模规定长度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_timsort</span>(<span class="params">data</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤1：</span></span><br><span class="line">    <span class="comment"># 将数据按照单调递增或单调递减分割为多个数据切片，每个切片称作run</span></span><br><span class="line">    <span class="comment"># 其中，单调递减的切片会被反转为单调递增的</span></span><br><span class="line">    runs = splite_runs(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤2：</span></span><br><span class="line">    <span class="comment"># 将过短的run跟相邻的run通过插入排序合并，</span></span><br><span class="line">    <span class="comment"># 需要定义一个数值来判定run是否过短</span></span><br><span class="line">    runs = merge_short_runs(runs, MIN_SORT_LEN)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤3：</span></span><br><span class="line">    <span class="comment"># 将所有的run，依次压入栈中，</span></span><br><span class="line">    <span class="comment"># 使得栈中的任意三个连续的run [X, Y, Z] 满足：</span></span><br><span class="line">    <span class="comment"># 1. len(X) + len(Y) &lt; len(Z)</span></span><br><span class="line">    <span class="comment"># 2. len(X) &lt; len(Y)</span></span><br><span class="line">    <span class="comment"># 如果不满足以上条件，则 Y 与 X, Z 中较小的一个run通过归并排序合并</span></span><br><span class="line">    sorted_data = merge_runs(runs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted_data</span><br></pre></td></tr></table></figure><h3 id="分割-run"><a href="#分割-run" class="headerlink" title="分割 run"></a>分割 <code>run</code></h3><p>将数据按照单调递增或单调递减分割为多个独立的切片，每个切片称作一个<code>run</code>，并将单调递减的 run 翻转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">splite_runs</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    分割 run</span></span><br><span class="line"><span class="string">    将数据按照单调递增或单调递减分割为多个独立的切片，</span></span><br><span class="line"><span class="string">    每个切片称作一个run，并将单调递减的 run 翻转。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    runs = []</span><br><span class="line">    curr_run = []</span><br><span class="line">    need_reverse = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(curr_run) &lt; <span class="number">2</span>:</span><br><span class="line">            curr_run.append(i)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(curr_run) == <span class="number">2</span>:</span><br><span class="line">            need_reverse = <span class="literal">True</span> <span class="keyword">if</span> curr_run[<span class="number">0</span>] &gt; curr_run[<span class="number">1</span>] <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># start_a_new_run = False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> need_reverse <span class="keyword">and</span> i &lt; curr_run[-<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 单调递增时遇到了比最后一个元素小的元素</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> need_reverse <span class="keyword">and</span> i &gt; curr_run[-<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 单调递减时遇到了比最后一个元素大的元素</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr_run.append(i)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始下一个 run</span></span><br><span class="line">        <span class="keyword">if</span> need_reverse:</span><br><span class="line">            curr_run.reverse()</span><br><span class="line">        runs.append(curr_run)</span><br><span class="line">        curr_run = [i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> curr_run:</span><br><span class="line">        runs.append(curr_run)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> runs</span><br></pre></td></tr></table></figure><h3 id="合并短-run"><a href="#合并短-run" class="headerlink" title="合并短 run"></a>合并短 <code>run</code></h3><p>定义一个长度阈值，将长度低于这个阈值的 run 与相邻的 run 合并，以提高后续归并的效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_bisect_pos</span>(<span class="params">data, x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;二分查找&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> data[<span class="number">0</span>] &gt; x:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    mid = <span class="built_in">round</span>(<span class="built_in">len</span>(data)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> data[mid] &lt; x:</span><br><span class="line">        <span class="keyword">return</span> mid + my_bisect_pos(data[mid:], x)</span><br><span class="line">    <span class="keyword">elif</span> x &lt; data[mid]:</span><br><span class="line">        <span class="keyword">return</span> my_bisect_pos(data[:mid], x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_insertion_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;插入排序&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    p = <span class="number">1</span></span><br><span class="line">    new_data = [data[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">while</span> p &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        new_pos = my_bisect_pos(new_data, data[p])</span><br><span class="line">        new_data = new_data[:new_pos] + [data[p]] + new_data[new_pos:]</span><br><span class="line"></span><br><span class="line">        p += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_short_runs</span>(<span class="params">runs, min_run_len</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    合并短 run</span></span><br><span class="line"><span class="string">    定义一个长度阈值，将长度低于这个阈值的 run 与相邻的 run 合并，</span></span><br><span class="line"><span class="string">    以提高后续归并的效率。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sorted_runs = []</span><br><span class="line">    curr_run = []</span><br><span class="line">    <span class="keyword">for</span> run <span class="keyword">in</span> runs:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(curr_run) &gt;= min_run_len:</span><br><span class="line">            sorted_runs.append(my_insertion_sort(curr_run))</span><br><span class="line">            curr_run = run</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr_run.extend(run)</span><br><span class="line">    sorted_runs.append(my_insertion_sort(curr_run))</span><br><span class="line">    <span class="keyword">return</span> sorted_runs</span><br></pre></td></tr></table></figure><h3 id="按规则归并-run"><a href="#按规则归并-run" class="headerlink" title="按规则归并 run"></a>按规则归并 <code>run</code></h3><p>将所有的 run 依次压入栈中，并使得在压入栈的过程中，三个连续的 run <code>[X, Y, Z] </code>始终满足 <code>len(X) + len(Y) &lt; len(Z)</code> 和 <code>len(X) &lt; len(Y)</code> 的条件。如果不满足以上条件，则将 Y run 与 X, Z 中较短的 run 通过归并排序合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_run</span>(<span class="params">run_a, run_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;归并排序&quot;&quot;&quot;</span></span><br><span class="line">    new_run = []</span><br><span class="line">    p_a = p_b = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p_a &lt; <span class="built_in">len</span>(run_a) <span class="keyword">and</span> p_b &lt; <span class="built_in">len</span>(run_b):</span><br><span class="line">        <span class="keyword">if</span> run_a[p_a] &lt;= run_b[p_b]:</span><br><span class="line">            new_run.append(run_a[p_a])</span><br><span class="line">            p_a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_run.append(run_b[p_b])</span><br><span class="line">            p_b += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> p_a &lt; <span class="built_in">len</span>(run_a):</span><br><span class="line">        new_run.extend(run_a[p_a:])</span><br><span class="line">    <span class="keyword">if</span> p_b &lt; <span class="built_in">len</span>(run_b):</span><br><span class="line">        new_run.extend(run_b[p_b:])</span><br><span class="line">    <span class="keyword">return</span> new_run</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_runs</span>(<span class="params">runs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    按规则归并 run</span></span><br><span class="line"><span class="string">    将所有的run，依次压入栈中，</span></span><br><span class="line"><span class="string">    使得栈中的任意三个连续的run [X, Y, Z] 满足：</span></span><br><span class="line"><span class="string">    1. len(X) + len(Y) &lt; len(Z)</span></span><br><span class="line"><span class="string">    2. len(X) &lt; len(Y)</span></span><br><span class="line"><span class="string">    如果不满足以上条件，则 Y 与 X, Z 中较小的一个run通过归并排序合并</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    run_stack = []</span><br><span class="line">    <span class="keyword">for</span> run <span class="keyword">in</span> runs:</span><br><span class="line">        run_stack.append(run)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(run_stack) &gt;= <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">            Z = run_stack.pop()</span><br><span class="line">            Y = run_stack.pop()</span><br><span class="line">            X = run_stack.pop()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(X) + <span class="built_in">len</span>(Y) &lt; <span class="built_in">len</span>(Z) <span class="keyword">and</span> <span class="built_in">len</span>(X) &lt; <span class="built_in">len</span>(Y):</span><br><span class="line">                run_stack.append(X)</span><br><span class="line">                run_stack.append(Y)</span><br><span class="line">                run_stack.append(Z)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(Z) &lt; <span class="built_in">len</span>(X):</span><br><span class="line">                    run_stack.append(X)</span><br><span class="line">                    run_stack.append(merge_run(Y, Z))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    run_stack.append(merge_run(X, Y))</span><br><span class="line">                    run_stack.append(Z)</span><br><span class="line">    sorted_data = []</span><br><span class="line">    <span class="keyword">for</span> run <span class="keyword">in</span> run_stack:</span><br><span class="line">        sorted_data = merge_run(sorted_data, run)</span><br><span class="line">    <span class="keyword">return</span> sorted_data</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="Python" scheme="https://hexo.chensmallx.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>fortune+cowsay+lolcat：实现彩虹色终端随机问候语</title>
    <link href="https://hexo.chensmallx.top/2022/05/13/random-motd/"/>
    <id>https://hexo.chensmallx.top/2022/05/13/random-motd/</id>
    <published>2022-05-13T07:26:44.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<p>终端永远都是折腾的主场之一。<br>每次在登陆阿里云的 ubuntu 时都会展示一段欢迎词，并且并且带有 Alibaba Cloud 的字样，于是就开始琢磨，这个欢迎词应该是有办法自定义的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-104-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">Last login: Fri May 13 11:27:32 2022 from xx.xx.xx.xx</span><br></pre></td></tr></table></figure><p>针对每次登陆都展示相同的问候语，较为简单和通用的办法为修改 <code>/etc/motd</code> 这个文件，果不其然，查看其中的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">cat</span> motd</span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br></pre></td></tr></table></figure><h2 id="随机问候"><a href="#随机问候" class="headerlink" title="随机问候"></a>随机问候</h2><p>先来看看几个效果图。</p><p><img src="/../img/random-motd-0.png" alt="随即问候效果图1"><br><img src="/../img/random-motd-1.png" alt="随即问候效果图2"></p><p>要实现这样的效果，需要用到3个组件：</p><ul><li>fortune</li><li>cowsay</li><li>lolcat</li></ul><p>其中，fortune 负责输出随机问候语，cowsay 用于套框和加入小动物形象，而 lolcat 负责对这些字符画着色。</p><p>先安装这些组件（此处为ubuntu的安装办法，其他发行版可以自行上网查找安装方法）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 fortune 和 中文库</span></span><br><span class="line">sudo apt install fortune fortunes-zh</span><br><span class="line"><span class="comment"># 安装 cowsay</span></span><br><span class="line">sudo apt install cowsay</span><br><span class="line"><span class="comment"># 安装 lolcat</span></span><br><span class="line">sudo apt install lolcat</span><br></pre></td></tr></table></figure><h3 id="每个组件的作用"><a href="#每个组件的作用" class="headerlink" title="每个组件的作用"></a>每个组件的作用</h3><p>先来看看 fortune。fortune 用于输出随机的名言、诗词或者是一些程序文档。执行几次就能够明白：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ fortune</span><br><span class="line">常羡人间琢玉郎，天应乞与点酥娘。尽道清歌传皓齿，风起，雪飞炎海变清凉。</span><br><span class="line">万里归来颜愈少，微笑，笑时犹带岭梅香。试问岭南应不好，却道：此心安处是吾乡。</span><br><span class="line">      -- 苏轼《定风波》</span><br><span class="line">❯ fortune</span><br><span class="line">Nothing so needs reforming as other people&#x27;s habits.</span><br><span class="line">                -- Mark Twain</span><br><span class="line">❯ fortune</span><br><span class="line">白发悲花落，青云羡鸟飞。</span><br><span class="line">    -- 岑参《寄左省杜拾遗》</span><br></pre></td></tr></table></figure><p>接着是 cowsay。cowsay 用于将输入的内容放到小动物的说话的框中，使其更加地有观赏性和趣味性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❯ echo abcdefg | cowsay</span><br><span class="line"> _________</span><br><span class="line">&lt; abcdefg &gt;</span><br><span class="line"> ---------</span><br><span class="line">        \   ^__^</span><br><span class="line">         \  (oo)\_______</span><br><span class="line">            (__)\       )\/\</span><br><span class="line">                ||----w |</span><br><span class="line">                ||     ||</span><br></pre></td></tr></table></figure><p>通过查看 cowsay 的 usage，可以看到，不光是有牛一种小动物，还有很多内置的形象可以使用，通过 <code>-f</code> 参数后加内置的形象即可使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">❯ cowsay -h</span><br><span class="line">cow&#123;say,think&#125; version 3.03, (c) 1999 Tony Monroe</span><br><span class="line">Usage: cowsay [-bdgpstwy] [-h] [-e eyes] [-f cowfile]</span><br><span class="line">          [-l] [-n] [-T tongue] [-W wrapcolumn] [message]</span><br><span class="line">❯ echo abcdefg | cowsay -f sheep</span><br><span class="line"> _________</span><br><span class="line">&lt; abcdefg &gt;</span><br><span class="line"> ---------</span><br><span class="line">  \</span><br><span class="line">   \</span><br><span class="line">       __</span><br><span class="line">      UooU\.&#x27;@@@@@@`.</span><br><span class="line">      \__/(@@@@@@@@@@)</span><br><span class="line">           (@@@@@@@@)</span><br><span class="line">           `YY~~~~YY&#x27;</span><br><span class="line">            ||    ||</span><br></pre></td></tr></table></figure><p>而怎么能够知道内置了多少种小动物呢？其实每种小动物都是一个配置文件，并存在 <code>/usr/share/cowsay/cows</code> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">ls</span> /usr/share/cowsay/cows</span><br><span class="line">apt.cow             elephant-in-snake.cow  luke-koala.cow    stimpy.cow</span><br><span class="line">bud-frogs.cow       elephant.cow           mech-and-cow.cow  suse.cow</span><br><span class="line">bunny.cow           eyes.cow               milk.cow          three-eyes.cow</span><br><span class="line">calvin.cow          flaming-sheep.cow      moofasa.cow       turkey.cow</span><br><span class="line">cheese.cow          fox.cow                moose.cow         turtle.cow</span><br><span class="line">cock.cow            ghostbusters.cow       pony-smaller.cow  tux.cow</span><br><span class="line">cower.cow           gnu.cow                pony.cow          unipony-smaller.cow</span><br><span class="line">daemon.cow          hellokitty.cow         ren.cow           unipony.cow</span><br><span class="line">default.cow         kangaroo.cow           sheep.cow         vader-koala.cow</span><br><span class="line">dragon-and-cow.cow  kiss.cow               skeleton.cow      vader.cow</span><br><span class="line">dragon.cow          koala.cow              snowman.cow       www.cow</span><br><span class="line">duck.cow            kosh.cow               stegosaurus.cow</span><br></pre></td></tr></table></figure><p>如此一来，既然是随机问候，为什么不随机到底呢，索性小动物的形象也随机一下吧！</p><p>可以通过以下的 shell 指令获取到一个随机的小动物配置文件，并将其的名字作为参数传入 cowsay：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">❯ cow=`<span class="built_in">ls</span> /usr/share/cowsay/cows | <span class="built_in">sort</span> -R | <span class="built_in">tail</span> -n 1`</span><br><span class="line">❯ <span class="built_in">echo</span> abcdefg | cowsay -f <span class="variable">$&#123;cow%\.*&#125;</span></span><br><span class="line"> _________</span><br><span class="line">&lt; abcdefg &gt;</span><br><span class="line"> ---------</span><br><span class="line">          \      (__)</span><br><span class="line">           \     /oo|</span><br><span class="line">            \   (_<span class="string">&quot;_)*+++++++++*</span></span><br><span class="line"><span class="string">                   //I#\\\\\\\\I\</span></span><br><span class="line"><span class="string">                   I[I|I|||||I I `</span></span><br><span class="line"><span class="string">                   I`I&#x27;///&#x27;&#x27; I I</span></span><br><span class="line"><span class="string">                   I I       I I</span></span><br><span class="line"><span class="string">                   ~ ~       ~ ~</span></span><br><span class="line"><span class="string">                     Scowleton</span></span><br></pre></td></tr></table></figure><p>最后来看看 lolcat。lolcat 的作用就简单很多，就是对终端输出的字符进行彩虹色的着色：</p><p><img src="/../img/lolcat-qwer.png" alt="lolcat着色效果"></p><h3 id="整合后放入终端配置文件"><a href="#整合后放入终端配置文件" class="headerlink" title="整合后放入终端配置文件"></a>整合后放入终端配置文件</h3><p>经过以上的分析，我们可以通过管道符将以上三个软件组合起来使用，最终整合成这样一个流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一个随机小动物</span></span><br><span class="line">cow=`<span class="built_in">ls</span> /usr/share/cowsay/cows | <span class="built_in">sort</span> -R | <span class="built_in">tail</span> -n 1`</span><br><span class="line"><span class="comment"># 根据这个小动物形象输出随机文本</span></span><br><span class="line">fortune | cowsay -f <span class="variable">$&#123;cow%\.*&#125;</span> | lolcat</span><br></pre></td></tr></table></figure><p>将其填到终端配置文件，比如 .bashrc 或者 .zshrc（我是用的是 zsh，所以是 .zshrc），然后在之后的每次启动终端，在终端读取这个配置文件的时候，就会执行到这个命令，从而输出问候语。</p><p><img src="/../img/random-motd-2.png" alt="连续开启三个终端，都是不同的问候"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Geek&#39;s Work" scheme="https://hexo.chensmallx.top/categories/Geek-s-Work/"/>
    
    
    <category term="Linux" scheme="https://hexo.chensmallx.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python 集合(set) 创建实例效率</title>
    <link href="https://hexo.chensmallx.top/2022/05/12/python-set-performance/"/>
    <id>https://hexo.chensmallx.top/2022/05/12/python-set-performance/</id>
    <published>2022-05-12T01:30:21.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="set创建方式"><a href="#set创建方式" class="headerlink" title="set创建方式"></a>set创建方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字面值创建方式</span></span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造方法创建方式</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="两种创建实例方式反汇编"><a href="#两种创建实例方式反汇编" class="headerlink" title="两种创建实例方式反汇编"></a>两种创建实例方式反汇编</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis(<span class="string">&#x27;&#123;1&#125;&#x27;</span>)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">              <span class="number">2</span> BUILD_SET                <span class="number">1</span></span><br><span class="line">              <span class="number">4</span> RETURN_VALUE</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis(<span class="string">&#x27;set([1])&#x27;</span>)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> LOAD_NAME                <span class="number">0</span> (<span class="built_in">set</span>)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">              <span class="number">4</span> BUILD_LIST               <span class="number">1</span></span><br><span class="line">              <span class="number">6</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">              <span class="number">8</span> RETURN_VALUE</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>可以看出，通过字面值去创建一个集合，在解释器实现上是通过调用了一个叫做 <code>BUILD_SET</code> 的方法直接创建；</p><p>而使用 <code>set()</code> 方法创建集合，解释器实现上会先通过 set 的名字去寻找构造方法，并且调用 <code>BUILD_LIST</code> 方法去创建一个 list 传入 set 构造方法，从而创建一个集合。</p><hr><p>所以结论为：使用字面值直接创建集合要比使用 set 构造方法效率更高。</p><hr><p>同理地，<code>list()</code> 构造方法和 <code>[]</code> 字面值创建列表的效率也很容易得出高低：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis(<span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">              <span class="number">2</span> RETURN_VALUE</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis(<span class="string">&#x27;list()&#x27;</span>)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> LOAD_NAME                <span class="number">0</span> (<span class="built_in">list</span>)</span><br><span class="line">              <span class="number">2</span> CALL_FUNCTION            <span class="number">0</span></span><br><span class="line">              <span class="number">4</span> RETURN_VALUE</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="Python" scheme="https://hexo.chensmallx.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python random.choice 实现之数据模型魔术方法</title>
    <link href="https://hexo.chensmallx.top/2022/03/08/python-random-choice-implement/"/>
    <id>https://hexo.chensmallx.top/2022/03/08/python-random-choice-implement/</id>
    <published>2022-03-08T11:20:25.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>起因自《流畅的python》1.1 一摞Python风格的纸牌</p></blockquote><p>自实现类要支持 <code>random.choice</code> 方法只需要支持两个魔术方法即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__len__</span><br><span class="line">__getitem__</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(mc))  <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(mc[<span class="number">15</span>])  <span class="comment"># 4</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="built_in">print</span>(choice(mc))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>进入python内置库 <code>random</code> 中查看<code>choice</code> 的实现，可以看到实现正是使用了序列的 <code>__len__</code> 方法和 <code>__getitem__</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> seq[random.random() * <span class="built_in">len</span>(seq)]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="Python" scheme="https://hexo.chensmallx.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>记一次云主机硬盘扩容操作</title>
    <link href="https://hexo.chensmallx.top/2021/08/26/record-a-disk-expansion-on-alicloud-ubuntu/"/>
    <id>https://hexo.chensmallx.top/2021/08/26/record-a-disk-expansion-on-alicloud-ubuntu/</id>
    <published>2021-08-26T03:32:03.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<p>由于在折腾<code>青龙面板+XDD</code>的时候配置了一套 Golang 的环境，导致为数不多的硬盘空间被吃干净了（没错，剩余量就是这么少）。考虑到机器还会用很长一段时间，所以决定增加一块硬盘对机器进行扩容。</p><span id="more"></span><h2 id="增加硬盘"><a href="#增加硬盘" class="headerlink" title="增加硬盘"></a>增加硬盘</h2><p>在阿里云页面购买了硬盘并挂载到 ecs 实例上之后，在系统中出现了一个新的设备——<code>/dev/vdb</code>，表明新增的是一块 <code>virtio</code> 磁盘，和我们常见的 <code>sd*</code> 不同，<code>sd*</code> 表示的是 <code>SCSI</code> 类型的设备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">ls</span> /dev</span><br><span class="line">... vda vda1 vdb ...</span><br></pre></td></tr></table></figure><h2 id="确认磁盘信息"><a href="#确认磁盘信息" class="headerlink" title="确认磁盘信息"></a>确认磁盘信息</h2><p>通过 <code>ls</code> 查看代表硬件的文件还是比较粗糙的办法，而且无法查看关于硬件的更详细的内容。<br>对于磁盘类的设备，可以通过 <code>lshw -C disk</code> 查看硬盘信息和通过 <code>fdisk -l</code> 来查看各个分区信息。</p><ul><li>使用 <code>lshw</code> 查看硬盘信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">❯ lshw -C disk</span><br><span class="line">  *-virtio1                 </span><br><span class="line">       description: Virtual I/O device</span><br><span class="line">       physical <span class="built_in">id</span>: 0</span><br><span class="line">       bus info: virtio@1</span><br><span class="line">       logical name: /dev/vda</span><br><span class="line">       size: 20GiB (21GB)</span><br><span class="line">       capabilities: partitioned partitioned:dos</span><br><span class="line">       configuration: driver=virtio_blk logicalsectorsize=512 sectorsize=512 signature=13be70fb</span><br><span class="line">  *-virtio4</span><br><span class="line">       description: Virtual I/O device</span><br><span class="line">       physical <span class="built_in">id</span>: 0</span><br><span class="line">       bus info: virtio@4</span><br><span class="line">       logical name: /dev/vdb</span><br><span class="line">       size: 100GiB (107GB)</span><br><span class="line">       capabilities: partitioned partitioned:dos</span><br><span class="line">       configuration: driver=virtio_blk logicalsectorsize=512 sectorsize=512 signature=2681d385</span><br></pre></td></tr></table></figure><ul><li>使用 <code>fdisk</code> 查看硬盘分区信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">❯ fdisk -l</span><br><span class="line">Disk /dev/vda: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x13be70fb</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/vda1  *     2048 41940991 41938944  20G 83 Linux</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br></pre></td></tr></table></figure><h2 id="分区和格式化"><a href="#分区和格式化" class="headerlink" title="分区和格式化"></a>分区和格式化</h2><p>在着手分区之前，首先最重要的是确定分区方案。</p><h3 id="分区方案"><a href="#分区方案" class="headerlink" title="分区方案"></a>分区方案</h3><p>我的这台阿里云 ecs 自带的硬盘是 20G 的“高效云盘”（估计就是一般的 HDD），这次发生硬盘空间不足主要是 <code>home</code> 目录和 <code>var</code> 目录，所以本次扩容+迁移的主要目标也是这两个目录。</p><p>参考 n 个经典 linux 分区方案，另外一个可以纳入考虑的是 <code>swap</code> 分区，使用 <code>free -h</code> 查看当前系统中内存的使用情况，可以看到本机物理内存只有 2G，加之之前在运行 docker 的时候忘记开了性能限制，脚本逻辑导致机器内存吃满导致 ssh 都登录不上的情况，所以适当添加虚拟内存 <code>swap</code> 分区在本次是一个可取的方案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          1.8Gi       648Mi       204Mi       2.0Mi       1.0Gi       1.0Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><p>由于添加的是一个 100G 的硬盘，所以我决定的分配方案为：</p><table><thead><tr><th align="left">序号</th><th align="center">挂载点</th><th align="right">大小</th><th align="center">拓展分区</th></tr></thead><tbody><tr><td align="left">0</td><td align="center">swap</td><td align="right">16G</td><td align="center"></td></tr><tr><td align="left">1</td><td align="center">&#x2F;var</td><td align="right">20G</td><td align="center">√</td></tr><tr><td align="left">2</td><td align="center">&#x2F;home</td><td align="right">64G</td><td align="center">√</td></tr><tr><td align="left">总合</td><td align="center"></td><td align="right">100G</td><td align="center"></td></tr></tbody></table><p>因为 swap 分区的灵活性比较强，所以单独划分一个主分区给它，以备不时之需的时候划分用作其他用途（虽然分配 16G 对于这台机器来说着实是绰绰有余了）。</p><p>而 var 和 home 分区意义上都属于是数据区，所以可以放在一起，由一个逻辑拓展分区分出来。</p><p>以上只是我自己不成熟的理解，如果看到这篇文章的大佬有更好的见解，希望可以在评论区给予指导，谢谢！</p><h3 id="分区操作"><a href="#分区操作" class="headerlink" title="分区操作"></a>分区操作</h3><p>为了以防万一，即使系统中没有使用 swap 分区，也手动显式地关闭一下 swap 功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ swapoff -a  <span class="comment"># 关闭所有的 swap</span></span><br><span class="line">❯ swapoff /dev/xxx  <span class="comment"># 关闭某个 swap 分区</span></span><br></pre></td></tr></table></figure><p>如之前所说，添加的是一块 virtio 类型磁盘，所以显示的是<code>/dev/vdb</code>，使用 fdisk 对磁盘分区，分区具体步骤在下面，如果太长了看不下去，可以直接跳到 <a href="#%E6%A0%BC%E5%BC%8F%E5%8C%96">格式化操作</a>。分区操作我尽量加入注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">❯ fdisk /dev/vdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.34).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p  <span class="comment"># 查看当前硬盘分区结构</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot Start       End   Sectors  Size Id Type</span><br><span class="line">/dev/vdb1        2048 209715199 209713152  100G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): d  <span class="comment"># 删除分区，因为原来只有一个分区，所以默认删除了第一个分区</span></span><br><span class="line">Selected partition 1</span><br><span class="line">Partition 1 has been deleted.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p  <span class="comment"># 再次查看分区结构，显示已经没有分区</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment"># (new)新建分区，提示要选择分区类型，主分区或者逻辑分区。</span></span><br><span class="line">Partition <span class="built_in">type</span>              <span class="comment"># 逻辑分区也是一种主分区，占用一个主分区名额。</span></span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)      <span class="comment"># 主分区一共只能有4个。</span></span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): p       <span class="comment"># 选择新建一个主分区</span></span><br><span class="line">Partition number (1-4, default 1):      <span class="comment"># 直接&lt;回车&gt;使用默认给的1号分区号</span></span><br><span class="line">First sector (2048-209715199, default 2048):    <span class="comment"># 直接回车使用起始扇区</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-209715199, default 209715199): +16G <span class="comment"># 输入“+16G”表示分配16G的空间</span></span><br><span class="line"></span><br><span class="line">Created a new partition 1 of <span class="built_in">type</span> <span class="string">&#x27;Linux&#x27;</span> and of size 16 GiB.</span><br><span class="line">Partition <span class="comment">#1 contains a ext4 signature.</span></span><br><span class="line"></span><br><span class="line">Do you want to remove the signature? [Y]es/[N]o: Y  <span class="comment"># 移除原有分区标志</span></span><br><span class="line"></span><br><span class="line">The signature will be removed by a write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t     <span class="comment"># 输入t表示修改分区类型</span></span><br><span class="line">Selected partition 1        <span class="comment"># 因为当前只有一个分区，所以fdisk默认选择了这个</span></span><br><span class="line">Hex code (<span class="built_in">type</span> L to list all codes): 82     <span class="comment"># 输入82，表示swap分区的id类型</span></span><br><span class="line">Changed <span class="built_in">type</span> of partition <span class="string">&#x27;Linux&#x27;</span> to <span class="string">&#x27;Linux swap / Solaris&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p     <span class="comment"># 查看当前分区表</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/vdb1        2048 33556479 33554432  16G 82 Linux swap / Solaris</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 1 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment"># 新建分区</span></span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): e       <span class="comment"># 新建拓展分区</span></span><br><span class="line">Partition number (2-4, default 2):                      <span class="comment"># 直接回车使用默认起始扇区</span></span><br><span class="line">First sector (33556480-209715199, default 33556480):    <span class="comment"># 直接回车使用默认结束扇区</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (33556480-209715199, default 209715199): </span><br><span class="line"></span><br><span class="line">Created a new partition 2 of <span class="built_in">type</span> <span class="string">&#x27;Extended&#x27;</span> and of size 84 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p     <span class="comment"># 查看当前分区表</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot    Start       End   Sectors Size Id Type</span><br><span class="line">/dev/vdb1           2048  33556479  33554432  16G 82 Linux swap / Solaris</span><br><span class="line">/dev/vdb2       33556480 209715199 176158720  84G  5 Extended</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 1 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment"># 新建分区</span></span><br><span class="line">All space <span class="keyword">for</span> primary partitions is <span class="keyword">in</span> use.     <span class="comment"># fdisk提示目前所有空间都被主分区使用了</span></span><br><span class="line">Adding logical partition 5                      <span class="comment"># 所以在拓展分区中添加逻辑分区</span></span><br><span class="line">First sector (33558528-209715199, default 33558528):    <span class="comment"># 直接回车使用默认起始扇区</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (33558528-209715199, default 209715199): +20G     <span class="comment"># 输入“+20G”表示限制当前分区大小20G</span></span><br><span class="line"></span><br><span class="line">Created a new partition 5 of <span class="built_in">type</span> <span class="string">&#x27;Linux&#x27;</span> and of size 20 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p     <span class="comment"># 查看当前分区表</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot    Start       End   Sectors Size Id Type</span><br><span class="line">/dev/vdb1           2048  33556479  33554432  16G 82 Linux swap / Solaris</span><br><span class="line">/dev/vdb2       33556480 209715199 176158720  84G  5 Extended</span><br><span class="line">/dev/vdb5       33558528  75501567  41943040  20G 83 Linux</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 1 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment"># 新建分区</span></span><br><span class="line">All space <span class="keyword">for</span> primary partitions is <span class="keyword">in</span> use.     <span class="comment"># fdisk提示目前所有空间都被主分区使用了</span></span><br><span class="line">Adding logical partition 6                      <span class="comment"># 所以在拓展分区中添加逻辑分区</span></span><br><span class="line">First sector (75503616-209715199, default 75503616):    <span class="comment"># 直接回车使用默认起始扇区</span></span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (75503616-209715199, default 209715199): <span class="comment"># 直接回车使用默认结束扇区，使用所有剩余空间新建分区</span></span><br><span class="line"></span><br><span class="line">Created a new partition 6 of <span class="built_in">type</span> <span class="string">&#x27;Linux&#x27;</span> and of size 64 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p     <span class="comment"># 查看当前分区表</span></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot    Start       End   Sectors Size Id Type</span><br><span class="line">/dev/vdb1           2048  33556479  33554432  16G 82 Linux swap / Solaris</span><br><span class="line">/dev/vdb2       33556480 209715199 176158720  84G  5 Extended</span><br><span class="line">/dev/vdb5       33558528  75501567  41943040  20G 83 Linux</span><br><span class="line">/dev/vdb6       75503616 209715199 134211584  64G 83 Linux</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 1 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w     <span class="comment"># (write)写入改动，使得分区表生效</span></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><p>退出后使用<code>fdisk -l</code>查看分区结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">❯ fdisk -l</span><br><span class="line">Disk /dev/vda: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x13be70fb</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/vda1  *     2048 41940991 41938944  20G 83 Linux</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x2681d385</span><br><span class="line"></span><br><span class="line">Device     Boot    Start       End   Sectors Size Id Type</span><br><span class="line">/dev/vdb1           2048  33556479  33554432  16G 82 Linux swap / Solaris</span><br><span class="line">/dev/vdb2       33556480 209715199 176158720  84G  5 Extended</span><br><span class="line">/dev/vdb5       33558528  75501567  41943040  20G 83 Linux</span><br><span class="line">/dev/vdb6       75503616 209715199 134211584  64G 83 Linux</span><br></pre></td></tr></table></figure><p>使用 lsblk 查看块硬件信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❯ lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    252:0    0   20G  0 disk </span><br><span class="line">└─vda1 252:1    0   20G  0 part /</span><br><span class="line">vdb    252:16   0  100G  0 disk </span><br><span class="line">├─vdb1 252:17   0   16G  0 part [SWAP]</span><br><span class="line">├─vdb2 252:18   0    1K  0 part </span><br><span class="line">├─vdb5 252:21   0   20G  0 part </span><br><span class="line">└─vdb6 252:22   0   64G  0 part</span><br></pre></td></tr></table></figure><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><h4 id="swap-分区"><a href="#swap-分区" class="headerlink" title="swap 分区"></a>swap 分区</h4><p>格式化 swap 分区可以使用 mkswap。这里需要注意的是，swap 分区需要在分区的时候给分区 ID 注册为 82，这样在系统启动的时候才可以正常挂载分区为 swap（具体步骤在 <a href="#%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%89%E7%AB%A0%E8%8A%82">分区</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ mkswap /dev/vdb1  <span class="comment"># 格式化为 swap</span></span><br><span class="line">Setting up swapspace version 1, size = 16 GiB (17179865088 bytes)</span><br><span class="line">no label, UUID=220e512a-12a9-4a92-9668-24268004d8ab</span><br><span class="line">❯ swapon /dev/vdb1  <span class="comment"># 启用 swap 分区</span></span><br><span class="line">❯ free -h  <span class="comment"># 查看 swap 启用情况</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          1.8Gi       652Mi       201Mi       2.0Mi       1.0Gi       1.0Gi</span><br><span class="line">Swap:          15Gi          0B        15Gi</span><br></pre></td></tr></table></figure><p>swapon 是手动执行挂载 swap 的操作，关机重启会丢失挂载，所以我们还需要将挂载 swap 的操作添加到开机挂载目录的流程中。使用编辑器编辑<code>/etc/fstab</code>，加入下面这行内容即可，当然，开头的设备文件映射符要换成实际的设备映射符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ vim /etc/fstab  <span class="comment"># 添加下面这行</span></span><br><span class="line">/dev/vdb1  swap  swap  defaults  0  0</span><br></pre></td></tr></table></figure><h4 id="x2F-var-和-x2F-home-等数据分区"><a href="#x2F-var-和-x2F-home-等数据分区" class="headerlink" title="&#x2F;var 和&#x2F;home 等数据分区"></a>&#x2F;var 和&#x2F;home 等数据分区</h4><p>将 &#x2F;dev&#x2F;vdb5 和 &#x2F;dev&#x2F;vdb6 格式化为 ext4 格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">❯ mkfs.ext4 /dev/vdb5</span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Creating filesystem with 5242880 4k blocks and 1310720 inodes</span><br><span class="line">Filesystem UUID: 0d80f6eb-ac15-4bdf-8e03-d97508495618</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">    4096000</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span>   </span><br><span class="line"></span><br><span class="line">❯ mkfs.ext4 /dev/vdb6</span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Creating filesystem with 16776448 4k blocks and 4194304 inodes</span><br><span class="line">Filesystem UUID: 3fbc870d-3f3a-4182-86c2-690bcf1273b5</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">    4096000, 7962624, 11239424</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (65536 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span>   </span><br></pre></td></tr></table></figure><h4 id="转移数据和挂载"><a href="#转移数据和挂载" class="headerlink" title="转移数据和挂载"></a>转移数据和挂载</h4><p>将 &#x2F;dev&#x2F;vdb6 挂载到 &#x2F;mnt&#x2F;tmp 下，使用 rsync 同步 &#x2F;home 目录下内容到 vdb6 中。<br>rsync 据说是可以代替 cp 和 mv 指令的，具体使用情况可以看看 <a href="https://www.ruanyifeng.com/blog/2020/08/rsync.html">阮一峰的 rsync 教程</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">mkdir</span> /mnt/tmp                   <span class="comment"># 创建临时目录</span></span><br><span class="line">❯ mount /dev/vdb6 /mnt/tmp         <span class="comment"># 挂载 vdb6</span></span><br><span class="line">❯ rsync -ax /home/* /mnt/tmp       <span class="comment"># 同步文件</span></span><br><span class="line">❯ <span class="built_in">rm</span> -rf /home/*                   <span class="comment"># 删除原始目录下的文件</span></span><br><span class="line">❯ mount /dev/vdb6 /home            <span class="comment"># 将 vdb6 挂载到/home 上</span></span><br><span class="line">❯ umount /mnt/tmp                  <span class="comment"># 卸载临时目录的挂载</span></span><br><span class="line">❯ <span class="built_in">ls</span> /home                         <span class="comment"># 使用 ls 查看文件情况</span></span><br><span class="line">docker  download  go  lost+found  scripts</span><br></pre></td></tr></table></figure><p>可以看到，文件已经转移过来了，但是多了一个 <code>lost+found</code> 目录，这是因为在格式化分区时自动生成的目录，这次是新增的磁盘分区，所以无需理会直接删掉即可。</p><p>之后还需要将分区挂载流程像 swap 一样加入到&#x2F;etc&#x2F;fstab 文件中，使得开机自动挂载。</p><p>先使用 blkid 获取到每个分区的 id。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ blkid</span><br><span class="line">/dev/vda1: LABEL=<span class="string">&quot;/&quot;</span> UUID=<span class="string">&quot;abf381e7-98ce-491f-85d5-f16aa9b23811&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;13be70fb-01&quot;</span></span><br><span class="line">/dev/vdb1: UUID=<span class="string">&quot;220e512a-12a9-4a92-9668-24268004d8ab&quot;</span> TYPE=<span class="string">&quot;swap&quot;</span> PARTUUID=<span class="string">&quot;2681d385-01&quot;</span></span><br><span class="line">/dev/vdb5: UUID=<span class="string">&quot;0d80f6eb-ac15-4bdf-8e03-d97508495618&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;2681d385-05&quot;</span></span><br><span class="line">/dev/vdb6: UUID=<span class="string">&quot;3fbc870d-3f3a-4182-86c2-690bcf1273b5&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;2681d385-06&quot;</span></span><br></pre></td></tr></table></figure><p>像我这里因为是用 &#x2F;dev&#x2F;vdb6 挂载到 &#x2F;home，所以 UUID 是<code>3fbc870d-3f3a-4182-86c2-690bcf1273b5</code>，获取到了 UUID 之后，在&#x2F;etc&#x2F;fstab 添加下面一行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ vim /etc/fstab</span><br><span class="line">UUID=3fbc870d-3f3a-4182-86c2-690bcf1273b5 /home           ext4    defaults      0       2</span><br></pre></td></tr></table></figure><p>接着如法炮制 &#x2F;dev&#x2F;vdb5 挂载到 &#x2F;var 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ mount /dev/vdb5 /mnt/tmp</span><br><span class="line">❯ rsync -ax /var/* /mnt/tmp</span><br><span class="line">❯ <span class="built_in">rm</span> -rf /var/*</span><br><span class="line">❯ mount /dev/vdb5 /var</span><br><span class="line">❯ blkid</span><br><span class="line">/dev/vda1: LABEL=<span class="string">&quot;/&quot;</span> UUID=<span class="string">&quot;abf381e7-98ce-491f-85d5-f16aa9b23811&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;13be70fb-01&quot;</span></span><br><span class="line">/dev/vdb1: UUID=<span class="string">&quot;220e512a-12a9-4a92-9668-24268004d8ab&quot;</span> TYPE=<span class="string">&quot;swap&quot;</span> PARTUUID=<span class="string">&quot;2681d385-01&quot;</span></span><br><span class="line">/dev/vdb5: UUID=<span class="string">&quot;0d80f6eb-ac15-4bdf-8e03-d97508495618&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;2681d385-05&quot;</span></span><br><span class="line">/dev/vdb6: UUID=<span class="string">&quot;3fbc870d-3f3a-4182-86c2-690bcf1273b5&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;2681d385-06&quot;</span></span><br><span class="line">❯ vim /etc/fstab</span><br><span class="line">UUID=0d80f6eb-ac15-4bdf-8e03-d97508495618 /var           ext4    defaults      0       2</span><br></pre></td></tr></table></figure><p>最后，使用 df 查看，一切目录挂载占用正常即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">df</span> -hT</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">udev           devtmpfs  914M     0  914M   0% /dev</span><br><span class="line">tmpfs          tmpfs     189M  1.2M  188M   1% /run</span><br><span class="line">/dev/vda1      ext4       20G  7.1G   12G  38% /</span><br><span class="line">tmpfs          tmpfs     943M     0  943M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs          tmpfs     943M     0  943M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs          tmpfs     189M  4.0K  189M   1% /run/user/0</span><br><span class="line">/dev/vdb6      ext4       63G  5.9G   54G  10% /home</span><br><span class="line">/dev/vdb5      ext4       20G  6.9G   12G  37% /var</span><br></pre></td></tr></table></figure><h3 id="x2F-etc-x2F-fstab-文件填写要素"><a href="#x2F-etc-x2F-fstab-文件填写要素" class="headerlink" title="&#x2F;etc&#x2F;fstab 文件填写要素"></a>&#x2F;etc&#x2F;fstab 文件填写要素</h3><p>在编辑 fstab 的过程中对每个参数的意义产生了疑惑，所以查找了一些资料并且总结一下：</p><p>例如下面这条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=3fbc870d-3f3a-4182-86c2-690bcf1273b5  /home  ext4  defaults  0  2</span><br></pre></td></tr></table></figure><p>我们从 fstab 的文件的头部注释中可以获取到一些信息，例如第一个参数是能够代表挂载点的硬件文件系统，第二个是挂载点，第三个是硬件分区类型，第四个是挂载选项，但是还是很难明确最后两个数字的意义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># /etc/fstab: static file system information.</span><br><span class="line"># </span><br><span class="line"># Use &#x27;blkid&#x27; to print the universally unique identifier for a</span><br><span class="line"># device; this may be used with UUID= as a more robust way to name devices</span><br><span class="line"># that works even if disks are added and removed. See fstab(5).</span><br><span class="line">#</span><br><span class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line"># / was on /dev/vda1 during installation</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对于六个参数的意义的明确：</p><ol><li><p>设备</p><blockquote><p>意义：要挂载的设备<br>输入类型：</p><ul><li>设备文件</li><li>LABEL&#x3D;</li><li>UUID&#x3D;</li></ul></blockquote></li><li><p>挂载点</p><blockquote><p>swap 没有挂载点，挂载点为 swap<br>其余可以填写为目录名称，例如&#x2F;home</p></blockquote></li><li><p>文件系统类型</p><blockquote><p>ext2、ext3、ext4、xfs、nfs、smb、iso9660 等</p></blockquote></li><li><p>挂载选项</p><blockquote><p>async、sync、_netdev<br>defaults（ rw,  suid, dev, exec, auto, nouser, async, and relatime.）</p></blockquote></li><li><p>转储频度</p><blockquote><p>0：从不备份<br>1：每日备份<br>2：每隔一天备份</p></blockquote></li><li><p>自检次序</p><blockquote><p>0: 不自检<br>1：首先自检，通常只能被&#x2F;使用；<br>2：等数字为 1 的自检完成后，再进行自检</p></blockquote></li></ol><hr><p>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/5c12289dbcd1">简书 - Ubuntu 挂载新硬盘并把 home 目录迁移到新硬盘</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于在折腾&lt;code&gt;青龙面板+XDD&lt;/code&gt;的时候配置了一套 Golang 的环境，导致为数不多的硬盘空间被吃干净了（没错，剩余量就是这么少）。考虑到机器还会用很长一段时间，所以决定增加一块硬盘对机器进行扩容。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux Learning" scheme="https://hexo.chensmallx.top/categories/Linux-Learning/"/>
    
    
    <category term="Linux" scheme="https://hexo.chensmallx.top/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://hexo.chensmallx.top/tags/Ubuntu/"/>
    
    <category term="磁盘扩容" scheme="https://hexo.chensmallx.top/tags/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>使用docker-compose搭建nextcloud+Nginx+MySQL+Redis</title>
    <link href="https://hexo.chensmallx.top/2021/04/08/nextcloud-on-docker/"/>
    <id>https://hexo.chensmallx.top/2021/04/08/nextcloud-on-docker/</id>
    <published>2021-04-08T11:09:52.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<p>需要配置可以直接跳到<a href="/2021/04/08/nextcloud-on-docker/#docker-compose%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">docker-compose</a></p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年使用闲置的阿里云小鸡给协会搭建了一个公用的网盘，采用的是nextcloud作为框架，选择nextcloud的原因主要是因为它可以使用docker进行部署，而且又是开源的，没有免费版、捐赠版或者企业版之类的版本区别，只要能够部署，那就能用。</p><p>之前部署的时候匆匆忙忙，单纯为了抓紧时间上线就赶鸭子上架，搭建了一个最简陋的docker版nextcloud，虽然用起来没有什么问题，但是每次自己访问都会感觉到性能捉急，想要改善一下现状，利用有限的硬件资源发挥最大的性能。</p><p>所以最近，挑了一个大家不咋使用的时间把网盘下线了一个星期，升级了网盘的部署方式和添加了一些功能。</p><h3 id="稍微带过一下安装docker的方法"><a href="#稍微带过一下安装docker的方法" class="headerlink" title="稍微带过一下安装docker的方法"></a>稍微带过一下安装docker的方法</h3><p>以Ubuntu 20.04为例，其他操作系统可以自行查找资料。</p><ul><li><p>首先是卸载原有的Docker。这里要讲一个题外话，就是docker在老版本中是叫做Docker的，新版就把大写D改为了小写的d。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove docker \</span><br><span class="line">              docker-engine \</span><br><span class="line">              docker.io \</span><br><span class="line">              containerd \</span><br><span class="line">              runc</span><br></pre></td></tr></table></figure></li><li><p>安装新Docker</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方脚本 使用阿里云源</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"><span class="comment"># 或国内daocloud源</span></span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure></li><li><p>而本文需要使用docker-compose，所以这里还要安装一下，也比较简单，执行脚本就行了。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Docker Compose 的当前稳定版本</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 下载 Docker Compose 的当前稳定版本</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 创建软链</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>  但是使用以上方法安装比较繁琐，也比较难以管理，所以我推荐使用python的pip安装。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 pip 安装 docker-compose</span></span><br><span class="line">sudo pip install docker-compose</span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></li></ul><h3 id="原有的单容器nextcloud搭建方法"><a href="#原有的单容器nextcloud搭建方法" class="headerlink" title="原有的单容器nextcloud搭建方法"></a>原有的单容器nextcloud搭建方法</h3><p>docker的优越性想必都比较清楚了，独立运维、即开即用、不影响原有环境等等。</p><p>如果本地机器性能比较高，并且使用的人数、压力都没有太大的话，那么使用nextcloud独立容器的安装就足够了。</p><p>nextcloud独立容器版本使用的是apache做web服务器，自带SQLite作为数据库，也算是够用。</p><p>下面给一下单容器安装nextcloud的运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name nextcloud \</span><br><span class="line">  -p 7788:80 \</span><br><span class="line">  -v ~/nextcloud:/var/www/html \</span><br><span class="line">  docker.io/nextcloud</span><br></pre></td></tr></table></figure><p>稍微解释一下这几个参数：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">run</span><span class="language-bash">                   <span class="comment"># 运行镜像创建容器示例，后面跟着创建容器参数</span></span></span><br><span class="line">-d                    <span class="comment"># 在后台运行</span></span><br><span class="line">--restart=always      <span class="comment"># 总是随着宿主机重启而启动</span></span><br><span class="line">--name nextcloud      <span class="comment"># 容器的名字，可以不用解释吧 </span></span><br><span class="line">-p <span class="number">7788</span>:<span class="number">80</span>            <span class="comment"># 将容器的80端口映射到宿主机的7788端口</span></span><br><span class="line">-v ~/nextcloud:/var/www/html  <span class="comment"># 将容器的/var/www/html映射到宿主机的~/nextcloud</span></span><br><span class="line">docker.io/nextcloud   <span class="comment"># 创建容器需要用到的镜像</span></span><br></pre></td></tr></table></figure><p>等待docker执行创建容器实例完成后，则可以通过<u><code>http://ip:7788</code></u>来访问nextcloud了。但是这不是本文的重点，本文的目标是一台<strong>满血的nextcloud</strong>。</p><hr><h2 id="所谓满血"><a href="#所谓满血" class="headerlink" title="所谓满血"></a>所谓满血</h2><p>自己搭建过nextcloud的人可能都知道，nextcloud不仅可以在默认配置下使用，还可以通过加入各种各样的底层组件来提高它运行的性能。</p><p>而这次搭建的这台nextcloud则是与单镜像搭建不同，采用了：</p><ol><li>fpm——fastCgi作为呈现层——版本的nextcloud</li><li>nginx作为前置反向代理服务器提供https安全</li><li>mysql&#x2F;mariadb作为数据库，提高数据可靠性以及读写性能</li><li>redis作为热点数据缓存服务器以及文件锁管理器</li></ol><p>通过加入这些组件可以提高在多用户处理场景时系统的处理能力。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>由于这个搭建思路并不是nextcloud官方提供的解决方案（本身也不应该官方去解决这种事情），所以需要自己配置多个容器并将其连接起来，使其之间可以互相访问和操作，运用每个组件的优势提高整体系统的性能。</p><p>本次一共会使用到以下几个镜像：</p><ol><li>mariadb（目前mysql都过渡到mariadb了）</li><li>redis</li><li>nextcloud:fpm</li><li>nginx</li></ol><p>建议提前挂代理通过<code>docker pull</code>来下载，以免搭建的时候还要去拉去镜像而占用过多时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置代理</span></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080 <span class="comment"># 前提是在1080端口运行了你自己配置的代理服务，不然的话建议使用国内的镜像源</span></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull mariadb redis nextcloud:fpm nginx</span><br></pre></td></tr></table></figure><p>更换镜像源可以看看这篇<a href="https://www.jianshu.com/p/405fe33b9032">Docker中国源 - 简书</a>。</p><p>其中需要明确一下每个容器在这一套系统中扮演的角色。</p><blockquote><p>nextcloud作为此次的主角，也就是主体业务（app），它在存取数据的时候是会用到数据库（db）和缓存（cache）系统的，那么可以得出nextcloud依赖于mysql和redis。</p></blockquote><blockquote><p>而mysql和redis之间各司其职，其中一个挂了不会影响到另一个，所以优先级相同，之间没有依赖关系。</p></blockquote><blockquote><p>nginx作为代理业务和用户之间沟通的主体，首先是需要业务（app）正常运行才能够正常提供它自己本身的服务，所以nginx依赖于nextcloud。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 依赖关系如下</span><br><span class="line">                     /-&gt; mysql</span><br><span class="line">nginx -&gt; nextcloud -|</span><br><span class="line">                     \-&gt; redis</span><br><span class="line"></span><br><span class="line"># 启动顺序则需要反过来</span><br><span class="line">redix&amp;mysql -&gt; nextcloud -&gt; nginx</span><br></pre></td></tr></table></figure><h3 id="docker-compose配置文件"><a href="#docker-compose配置文件" class="headerlink" title="docker-compose配置文件"></a>docker-compose配置文件</h3><p>docker-compose是一个代理用户去管理docker的一个工具，使用docker-compose.yml配置文件就可以系统、方便地部署多容器项目，因为我们这次搭建的nextcloud也是基于多容器的，所以使用docker-compose进行部署和调试以及重建最为方便。</p><p>完整的docker-compose配置参数文档可以参考下面的这个文档，讲的还是比较细致，推荐给要深入docker-compose的同学学习。</p><blockquote><p><a href="https://www.jianshu.com/p/2217cfed29d7">Docker Compose 配置文件详解 - 简书</a></p></blockquote><p>以下就是本文输出的docker-compose配置文件。</p><blockquote><p><strong>注：</strong>参数的解释会通过备注的形式写在配置中</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.4&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span> <span class="comment"># 这里只是给每个容器单独配置一个名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span> <span class="comment"># 具体的镜像名称，可以使用“:”指定镜像的版本</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span> <span class="comment"># 重启的选项，分为no、on-failure、on-failure:x、always、unless-stopped，具体可以自行搜索查看区别</span></span><br><span class="line">    <span class="attr">expose:</span> </span><br><span class="line">    <span class="comment"># expose仅将指定的端口暴露给links的容器，而不对宿主机开放。</span></span><br><span class="line">    <span class="comment"># 和ports的区别在于，ports可以映射宿主机别的端口到容器中。</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># volumes指的是将宿主机的路径映射到容器中的指定位置</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="comment"># environment可以对容器创建指定多个环境变量</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root_password</span> <span class="comment"># 这里配置root密码</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">MYSQL_USER=user_name</span> <span class="comment"># 这里配置一个非root账户给nextcloud使用</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=user_password</span> <span class="comment"># 这里配置上面那个账号的密码</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./cache:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="string">&#x27;redis_password&#x27;</span> <span class="comment"># 这里的redis_password换成你要配置的redis密码</span></span><br><span class="line">    <span class="comment"># command指的是启动容器后代替默认启动指令来启动服务的指令</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nextcloud:fpm</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/html:/var/www/html</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/data:/var/www/html/data</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/config:/var/www/html/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/custom_apps:/var/www/html/custom_apps</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">    <span class="comment"># links将容器与当前容器链接起来，以使得当前容器可以访问目标容器expose的端口</span></span><br><span class="line">    <span class="comment"># 格式为 容器的原名:映射到当前容器中的名称</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">db:db</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">cache:cache</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="comment"># 依赖的容器列表，只有这些容器都成功启动了，才会启动当前容器</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">cache</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">proxy:</span> <span class="comment"># 叫做proxy是因为是作为代理来提供服务</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># ports可将容器内的端口映射到宿主机上</span></span><br><span class="line">    <span class="comment"># 这里是将容器的443端口映射到宿主机的7788端口</span></span><br><span class="line">     <span class="bullet">-</span> <span class="number">7788</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./app/html:/var/www/html</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./proxy/conf.d:/etc/nginx/conf.d:ro</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./proxy/ssl_certs:/etc/nginx/ssl_certs:ro</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">app:app</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">app</span></span><br></pre></td></tr></table></figure><p>把这些内容保存到<code>docker-compose.yml</code>文件中，然后将其放置在某个文件夹中，例如<code>~/super_nextcloud/</code>，我们之后就在这个路径下做后续的操作。</p><h3 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h3><p>接着我们要准备一下nginx的配置。需要创建两个文件夹，一个是<code>./proxy/conf.d</code>，一个是<code>./proxy/ssl_certs</code>。<br>其中<code>conf.d</code>放置nginx的配置文件，可以起名叫做<code>nextcloud.conf</code>，<code>ssl_certs</code>放置域名对应的SSL证书的pem和key文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ./proxy/conf.d ./proxy/ssl_certs</span><br></pre></td></tr></table></figure><p>具体可以参考以下的配置来写nextcloud.conf，其中域名和SSL证书文件的名字需要替换成你自己的。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> php-handler &#123;</span><br><span class="line">    <span class="attribute">server</span> app:<span class="number">9000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> 这里填写自己的域名;</span><br><span class="line">    <span class="comment"># enforce https</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>:443<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> 这里填写自己的域名;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use Mozilla&#x27;s guidelines for SSL/TLS settings</span></span><br><span class="line">    <span class="comment"># https://mozilla.github.io/server-side-tls/ssl-config-generator/</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> some settings below might be redundant</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl_certs/这里填写SSL证书的名字.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl_certs/这里填写SSL证书的名字.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add headers to serve security related headers</span></span><br><span class="line">    <span class="comment"># Before enabling Strict-Transport-Security headers please read into this</span></span><br><span class="line">    <span class="comment"># topic first.</span></span><br><span class="line">    <span class="comment">#add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># WARNING: Only add the preload option once you read about</span></span><br><span class="line">    <span class="comment"># the consequences in https://hstspreload.org/. This option</span></span><br><span class="line">    <span class="comment"># will add the domain to a hardcoded list that is shipped</span></span><br><span class="line">    <span class="comment"># in all major browsers and getting removed from this list</span></span><br><span class="line">    <span class="comment"># could take several months.</span></span><br><span class="line">    <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">    <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Robots-Tag <span class="literal">none</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Download-Options noopen;</span><br><span class="line">    <span class="attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="literal">none</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Referrer-Policy <span class="literal">no</span>-referrer;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security  <span class="number">15552000</span>;</span><br><span class="line">    <span class="comment">#add_header X-Frame-Options SAMEORIGIN;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Remove X-Powered-By, which is an information leak</span></span><br><span class="line">    <span class="attribute">fastcgi_hide_header</span> X-Powered-By;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Path to the root of your installation</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class="line">    <span class="comment"># Uncomment it if you&#x27;re planning to use this app.</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following rule is only needed for the Social app.</span></span><br><span class="line">    <span class="comment"># Uncomment it if you&#x27;re planning to use this app.</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/webfinger /public.php?service=webfinger last;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> = /.well-known/carddav &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://<span class="variable">$host</span>:<span class="variable">$server_port</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> = /.well-known/caldav &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://<span class="variable">$host</span>:<span class="variable">$server_port</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set max upload size</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">512M</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffers</span> <span class="number">64</span> <span class="number">4K</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enable gzip but do not remove ETag headers</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line">    <span class="attribute">gzip_proxied</span> expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private no_last_modified no_etag auth;</span><br><span class="line">    <span class="attribute">gzip_types</span> application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class="line">    <span class="comment"># This module is currently not supported.</span></span><br><span class="line">    <span class="comment">#pagespeed off;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^\/(?:\.|autotest|occ|issue|indie|db_|console)</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/)</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+?\.php)(\/.*|)$</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> HTTPS <span class="literal">on</span>;</span><br><span class="line">        <span class="comment"># Avoid sending the security headers twice</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span> modHeadersAvailable <span class="literal">true</span>;</span><br><span class="line">        <span class="comment"># Enable pretty urls</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span> front_controller_active <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> php-handler;</span><br><span class="line">        <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">fastcgi_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^\/(?:updater|oc[ms]-provider)(?:$|\/)</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">        <span class="attribute">index</span> index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adding the cache control header for js, css and map files</span></span><br><span class="line">    <span class="comment"># Make sure it is BELOW the PHP block</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.(?:css|js|woff2?|svg|gif|map)$</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=15778463&quot;</span>;</span><br><span class="line">        <span class="comment"># Add headers to serve security related headers (It is intended to</span></span><br><span class="line">        <span class="comment"># have those duplicated to the ones above)</span></span><br><span class="line">        <span class="comment"># Before enabling Strict-Transport-Security headers please read into</span></span><br><span class="line">        <span class="comment"># this topic first.</span></span><br><span class="line">        <span class="comment">#add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># WARNING: Only add the preload option once you read about</span></span><br><span class="line">        <span class="comment"># the consequences in https://hstspreload.org/. This option</span></span><br><span class="line">        <span class="comment"># will add the domain to a hardcoded list that is shipped</span></span><br><span class="line">        <span class="comment"># in all major browsers and getting removed from this list</span></span><br><span class="line">        <span class="comment"># could take several months.</span></span><br><span class="line">        <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">        <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> X-Robots-Tag <span class="literal">none</span>;</span><br><span class="line">        <span class="attribute">add_header</span> X-Download-Options noopen;</span><br><span class="line">        <span class="attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="literal">none</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Referrer-Policy <span class="literal">no</span>-referrer;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to other assets</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>文件都准备好之后，文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">super_nextcloud</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── proxy</span><br><span class="line">    ├── conf.d</span><br><span class="line">    │   └── nextcloud.conf</span><br><span class="line">    └── ssl_certs</span><br><span class="line">        ├── SSL证书.key</span><br><span class="line">        └── SSL证书.pem</span><br></pre></td></tr></table></figure><h3 id="创建-amp-启动容器"><a href="#创建-amp-启动容器" class="headerlink" title="创建&amp;启动容器"></a>创建&amp;启动容器</h3><p>此时准备工作已经完成。使用docker-compose代理对docker的容器进行操作可以使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d    <span class="comment"># 创建所有容器并按顺序启动</span></span><br><span class="line">docker-compose down     <span class="comment"># 停止所有容器并删除</span></span><br><span class="line">docker-compose stop     <span class="comment"># 停止所有容器</span></span><br><span class="line">docker-compose start    <span class="comment"># 按顺序启动所有容器</span></span><br><span class="line">docker-compose restart  <span class="comment"># 停止所有容器并按顺序启动所有容器</span></span><br></pre></td></tr></table></figure><p>所以这里我们使用<code>docker-compose up -d</code>启动我们的服务。在docker-compose输出的提示中，所有目标都显示为<code>done</code>后，我们可以使用<code>netstat</code>查看nginx容器是否在监听7788端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ netstat -tnlp | grep 7788</span><br><span class="line">tcp6    0     0     :::7788     :::*    LISTEN    5155/docker-proxy</span><br></pre></td></tr></table></figure><p>如果没有输出，那就是创建容器有问题。可以通过<code>docker ps -a</code>查看哪些容器在疯狂重启，然后通过<code>docker logs [容器名or容器ID]</code>进到这个容器中查看容器服务日志，自行排障。</p><p>如果有输出，并且和上面的内容大致相同，那么恭喜你，构建已经成功大半了。</p><hr><h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><h4 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h4><p>从地址和端口进入站点，通常是https+域名+端口，如果是内网搭建并且不在意域名以及https的小锁头的话，则可以直接通过ip来访问，但是需要注意的是，在nginx中配置了特定域名后，它会检查访问时是否是正确的域名，如果不是正确的域名，那么就会拒绝访问网盘资源。</p><p>进入后，我们就需要进行网盘首次配置的一些操作，包括管理员的配置、数据库的配置、应用程序的配置等等。<br>其中需要注意的是，在数据库配置部分，数据库的地址需要填写我们在docker的links中映射marindb的主机名称，即<code>db</code>；而账号密码则是在配置数据库时制定的数据库用户密码以及数据库名称。</p><p>使用上一步配置好的管理员账号和密码登录网盘，点击头像进入设置，现将站点的参数配置好后再配置本账号的参数。</p><h4 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h4><p>由于在网站上线后，需要配置一系列安全参数，所以需要我们再次去修改一下Nginx的配置文件。</p><p>在<code>proxy/conf.d/nextcloud.conf</code>中找到这行（也就是上面那个nginx配置的41行），将前面的注释解开，然后重启nginx容器即可（也可以直接使用<code>docker-compose restart</code>重启整个项目）。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#add_header X-Frame-Options SAMEORIGIN;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要使用手机APP来访问的话，还需要将54 54 59行解开注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class="line"><span class="comment">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rewrite ^/.well-known/webfinger /public.php?service=webfinger last;</span></span><br></pre></td></tr></table></figure><h4 id="配置缓存"><a href="#配置缓存" class="headerlink" title="配置缓存"></a>配置缓存</h4><p>由于nextcloud默认使用的缓存机制是<code>APCu</code>，我们需要到配置中修改其使用Redis作为缓存。</p><p>将<code>app/config/config.php</code>中的内容按照如下方法改动：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x27;memcache.local&#x27; =&gt; &#x27;\\OC\\Memcache\\APCu&#x27; // 用本地式缓存使用APCu // 注释这行 </span></span><br><span class="line"><span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\Redis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;memcache.distributed&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\Redis&#x27;</span>, <span class="comment">// 分布式缓存使用Redis</span></span><br><span class="line"><span class="string">&#x27;memcache.locking&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\Redis&#x27;</span>, <span class="comment">// 启用Redis缓存的文件锁</span></span><br><span class="line"><span class="string">&#x27;redis&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;cache&#x27;</span>, <span class="comment">// 这里和mariadb的逻辑相同，填写容器links时映射的主机名</span></span><br><span class="line">  <span class="string">&#x27;port&#x27;</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">  <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;redis_password&#x27;</span> <span class="comment">// 这是之前在配置docker-compose时配置的redis密码</span></span><br><span class="line">),</span><br><span class="line"><span class="string">&#x27;filelocking.enabled&#x27;</span> =&gt; <span class="string">&#x27;true&#x27;</span>,</span><br></pre></td></tr></table></figure><p>使用以下命令进入nextcloud的docker容器，并将文件归属确认改为www-data：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [nextcloud容器的容器ID] /bin/bash</span><br><span class="line"><span class="comment"># 进入docker容器之后</span></span><br><span class="line"><span class="built_in">ls</span> -l /var/www/html/config/config.php</span><br><span class="line">-rw-r----- 1 www-data www-data 1646 Mar 30 07:27 /var/www/html/config/config.php</span><br><span class="line"><span class="comment"># 如果提示所有权不是www-data，那么就要改回www-data</span></span><br><span class="line"><span class="built_in">chown</span> www-data:www-data /var/www/html/config/config.php</span><br></pre></td></tr></table></figure><p>这时候再去访问nextcloud的页面，就是在使用redis做缓存了。</p><h4 id="配置cron定时任务"><a href="#配置cron定时任务" class="headerlink" title="配置cron定时任务"></a>配置cron定时任务</h4><p>由于nextcloud内部的文件和配置会在用户操作过程中产生变化，所以需要启用一个定时任务去定期整理和归档这些数据到数据库或者应用到配置中。</p><p>先确定自己的nextcloud容器的容器ID或者容器名字，可以使用<code>docker ps -a</code>查看。</p><p>然后使用<code>crontab -e</code>或<code>vim /etc/crontab</code>打开crontab的配置进行编辑，加入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># run nextcloud cron task every 5 min</span><br><span class="line">*/5 * * * * docker exec -u 33 [容器ID或容器名] php -f /var/www/html/cron.php 2&gt;&amp;1 /dev/null</span><br></pre></td></tr></table></figure><p>建议两个地方都加一次，避免配置不生效。</p><hr><p>至此，站点的基本内容已经配置完毕，可以满足个人用于网盘、webdav等使用场景了。</p><h3 id="手动安装拓展"><a href="#手动安装拓展" class="headerlink" title="手动安装拓展"></a>手动安装拓展</h3><p>nextcloud另一个吸引人的地方就是可以安装很多拓展，但是由于nextcloud是从github上安装<strong>拓展</strong>，国内的网络连接github又有许许多多的<strong>困难</strong>，所以直接在页面上点击安装按钮是绝对会报cURL的错的。</p><p>所以我想出了一个曲线救国的方法，虽然比直接点击安装要多了几步，但着实可行，实施起来也没有什么阻碍。（反倒是之前为了实现直接点页面安装而各种配置代理浪费了不少时间，而且还有搞不出来…）</p><p>手动安装拓展程序的步骤大致可以分为下面几个步骤：</p><ol><li>确保当前客户机环境可通过代理访问github；</li><li>进入nextcloud的应用页面，找到自己想装的拓展应用；</li><li>点击想要安装的应用展开详情，进入“访问网站”链接，此时一般会去到插件的<strong>github页面</strong>或者<strong>nextcloud官方发布插件页面</strong>；</li><li>进入github项目的release页面，下载最新的插件更新版本到当前本机。按照nextcloud的插件发布标准应该是一个<code>tar.gz</code>文件；</li><li>将下载下来的文件从nextcloud个人文件页面上传到网盘中；</li><li>进入nextcloud容器。<code>docker exec -u 33 -it [container ID or container name] /bin/bash</code>，其中[container ID or container name]要换成真实容器的ID或名字；</li><li>到路径下找到自己上传的拓展插件。例如<code>/var/www/html/data/[username]/files/nextcloud_extension/metadata.tar.gz</code>，其中[username]要换成用户的名字。这里装的是matadata插件，用于查看图片各种元数据的；</li><li>将其复制到<code>/var/www/html/apps</code>。<code>cp /var/www/html/data/[username]/files/nextcloud_extension/metadata.tar.gz /var/www/html/apps</code>；</li><li>解压后删除源压缩文件<code>cd /var/www/html/apps &amp;&amp; tar -xzf metadata.tar.gz &amp;&amp; rm metadata.tar.gz</code>；</li><li>进入nextcloud页面的【应用】-【已禁用的应用】页面，将其启用。</li></ol><p>按照以上步骤来操作就可以做到实现手动安装插件的目的了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经历了这次搭建网盘，算是初级入门了docker容器的部署，以及docker-compose的配置入门。</p><p>只能说，在开始一个项目之前，还有许多东西需要实现考虑和准备好，做好缺陷预防。这样在真正上手做的时候，才会尽可能的少出差错，以及处变不惊。</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>原版后记：本来以为这个网盘搭好之后可以养老地给自己和协会使用几年，结果最近阿里云发了续费通知，上去一看发现之前的轻量级应用服务器学生机已经不在学生优惠计划中了（只剩下了一个OSS，基本没啥用），续费一年得1k多，所以只能另寻他处或者项目搁浅了，哎。。</p></blockquote><p>后来的后来，在迁移原项目到阿里云的按量付费 ECS 后，自购了扩容云磁盘，并做了<a href="/2021/08/26/record-a-disk-expansion-on-alicloud-ubuntu/">扩容的记录</a>，感兴趣的同学也可以看看。</p><h2 id="更新-2022-10-23"><a href="#更新-2022-10-23" class="headerlink" title="更新 2022.10.23"></a>更新 2022.10.23</h2><p>更新了使用 docker-compose 组织的 nextcloud 与 aria2 配合实现的离线下载方案。<br>前往链接：<a href="/2022/10/23/nextcloud-with-aria2-on-docker/">基于docker的nextcloud+aria2离线下载联动解决方案</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;需要配置可以直接跳到&lt;a href=&quot;/2021/04/08/nextcloud-on-docker/#docker-compose%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&quot;&gt;docker-compose&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Geek&#39;s Work" scheme="https://hexo.chensmallx.top/categories/Geek-s-Work/"/>
    
    <category term="计算机协会" scheme="https://hexo.chensmallx.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A/"/>
    
    
    <category term="计算机协会" scheme="https://hexo.chensmallx.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A/"/>
    
    <category term="linux" scheme="https://hexo.chensmallx.top/tags/linux/"/>
    
    <category term="docker" scheme="https://hexo.chensmallx.top/tags/docker/"/>
    
    <category term="docker-compose" scheme="https://hexo.chensmallx.top/tags/docker-compose/"/>
    
    <category term="nextcloud&#39;" scheme="https://hexo.chensmallx.top/tags/nextcloud/"/>
    
    <category term="mysql" scheme="https://hexo.chensmallx.top/tags/mysql/"/>
    
    <category term="nginx" scheme="https://hexo.chensmallx.top/tags/nginx/"/>
    
    <category term="redis" scheme="https://hexo.chensmallx.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>K2P代理MAN端设备上网</title>
    <link href="https://hexo.chensmallx.top/2021/04/06/route-by-modem/"/>
    <id>https://hexo.chensmallx.top/2021/04/06/route-by-modem/</id>
    <published>2021-04-06T03:48:02.000Z</published>
    <updated>2022-11-22T01:28:07.065Z</updated>
    
    <content type="html"><![CDATA[<p>近日入坑了pt站点，并在NAS上新增了一个12T的希捷银河氦气盘，在闲暇之余下载一些大包刷刷上传量之外，总是逮着喜欢的资源就肆无忌惮的下载（上传量能刷得很快哈哈哈），不得不说，pt站的资源确实是优质，和普罗大众共用的bt确实不同，种子资源、做种量根本都是不能比拟的。</p><p>然而随之而来的问题就是，优质的资源它总得要播放才能看才能听吧？而播放过程中某个环节出了问题，则会影响整体的观感体验，没错，我就遇到了。</p><h2 id="原有网络拓扑"><a href="#原有网络拓扑" class="headerlink" title="原有网络拓扑"></a>原有网络拓扑</h2><p>下载的资源大多都是1080P、2K、4K的视频格式文件，而后两者大多还是蓝光原盘的ios或者是BDMV包，1080P的视频一两个小时可以从2G到10多G不等，而到了2K、4K级别的资源，少说也是一个多小时得有个20G到80G不等，这样就对NAS这种网络存储设备使用场景产生一定的考验，或者说是整条网络链路质量的考验。</p><p>现在手上的涉及到这一套基于网络的播放、网络设备就这么几个，电信给的普通光猫，K2P，蜗牛星际A款，小米电视E55A。</p><p>为啥要说是普通光猫呢？因为它就是最典型的单千兆+三百兆配置，其中千兆桥接出来给K2P拨号上网代理家庭网络上网，其他接口暂时没有使用。</p><p>K2P这么一款经典的全千兆良心路由器就没有什么好多说的了，刷了padavan（老毛子），更新了hiboy的v5驱动版本。而作为经典矿渣的蜗牛，我的这个蜗牛星际A款是第一批上的车，里头还是原装绿色主板，J1900，16G内存，单千兆网口，刷了黑群晖6.1.7（DS3617xs）。</p><p>小米电视和K2P之间使用5G wifi连接，使用小米自带的测速功能，测试与公网之间的速度可以达到20MB&#x2F;S，算是还行的程度，但是尚未知电视和NAS之间的速度，并且公网与内网之间的差别还有延迟等各种问题，以及延迟对小量数据的随机读取的影响等等。</p><p>总览一下，原来的网络拓扑如下图所示：</p><p><img src="/../img/NAS/route-by-modem-origin-topo.png" alt="原有网络拓扑"></p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>基于以上这一套网络拓扑，在通过小米电视观看1080P视频文件的时候就还好，而如果是观看2K以上清晰度视频的时候，就会出现播放一会，就要转圈圈读取一会的情况，频率大概是<strong>10s</strong>一次，非常影响观影体验。遇到这种情况，就算不是强迫症，也会想要去改善一番。</p><p>在尝试过将蓝光原盘拷贝到U盘中插入电视进行本地播放，并且非常顺畅之后，基本上就确认问题出现在视频文件数据传输到电视上这个环节了。</p><p>而影响视频文件从NAS通过wifi传输到电视上速度的因素也有很多，比如硬盘读速度、NAS到路由器的传输速率、路由器到电视之间的wifi传输速率、路由器各网口之间的交换速率，都有可能影响，所以我又开始了漫漫的排错之路。</p><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>在排错的策略上，我采取的是由易到难的顺序进行的。每个环节按照排错难易度来排序，以我个人的理解，可以排成下面这样：</p><ol><li>路由器到NAS（或者其他有线连接的终端）</li><li>路由器网口之间的交换性能</li><li>NAS中的硬盘读取速度</li><li>路由器通过wifi到电视（这基本没法测，因为电视的操作系统没法进入后台，只能直接放电影来观察现象）</li></ol><h3 id="路由器到NAS"><a href="#路由器到NAS" class="headerlink" title="路由器到NAS"></a>路由器到NAS</h3><p>测试链路带宽质量，最方便也最普适的方法应该就是iperf了吧。</p><p>Padavan虽说是华硕自家的系统，但是也内置了opkg，opkg是一个开源的包管理系统，是<code>Open PacKaGe management</code>的缩写。直接进入K2P的后台使用opkg安装iperf3即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install iperf3</span><br><span class="line"><span class="comment"># 这里需要注意的是，安装的路径是在tmpfs中的，也就是内存盘</span></span><br><span class="line"><span class="comment"># 所以重启会丢失安装的内容，以避免闪存被占满</span></span><br></pre></td></tr></table></figure><p>而在群晖上使用iperf3就更加简单了。只需要从docker套件中，安装iperf3的镜像，然后在配置容器的时候按照iperf3的语法规则配置启动命令即可。附上一个张大妈的参考文章：</p><blockquote><p><a href="https://post.smzdm.com/p/ag89wxk7/">如何快速测试网卡性能——群晖Docker 安装使用Iperf3教程 - 什么值得买</a></p></blockquote><p>运行iperf3。iperf3和iperf相同，有服务端和客户端两种运行模式，在测试的时候需要自己确定哪个设备是服务端，哪个设备是客户端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端启动</span></span><br><span class="line">iperf3 -s</span><br><span class="line"><span class="comment"># 客户端启动</span></span><br><span class="line">iperf3 -c [服务端IP]</span><br><span class="line"><span class="comment"># 其他更多选项，典型的也就下面这些</span></span><br><span class="line">iperf3 -c [服务端IP] -l 1024M -t 60 -i 5 -P 4 -u</span><br><span class="line"><span class="comment"># -l length   代表每个buffer的长度，可以跟kKmM单位</span></span><br><span class="line"><span class="comment"># -t time     是测试的总共时长，单位是秒</span></span><br><span class="line"><span class="comment"># -i interval 是每次测试发起的时间间隔</span></span><br><span class="line"><span class="comment"># -P parallel 并行数，一般写1或者CPU核心数</span></span><br><span class="line"><span class="comment"># -u udp      使用UDP进行测试，一般指定UDP之后客户端的带宽测试结果会大很多，两到三倍不等。</span></span><br><span class="line">iperf3 --<span class="built_in">help</span> <span class="comment"># 查询其他命令使用方法</span></span><br></pre></td></tr></table></figure><p>测试之后，只能说，很遗憾，问题也不是出在路由器到NAS之间的链路上。</p><h3 id="路由器网口之间的交换性能"><a href="#路由器网口之间的交换性能" class="headerlink" title="路由器网口之间的交换性能"></a>路由器网口之间的交换性能</h3><p>由于每个厂商的路由器设计不同，每个网口的工作行为虽然在用户侧看来是相同的，但是在内部实现上却是不同的。</p><p>例如大部分家用路由器只需要支持单WAN口，+N个LAN口的工作模式，这时候路由器厂商在设计时，是在CPU后方接一个带网管的交换机，通过不同的vLAN来区分WAN、LAN、DMZ等。在这种设计模式下，同属于LAN区域或者DMZ区域的流量会直接经过交换机里头的交换芯片，而不通过CPU，这样交换效率就会比较高。</p><p>而另一些工业级、企业级的路由器上，由于需要满足自定义网口配置（例如多WAN口、自定义WAN口、自定义vLAN等），这时候则可能将路由器内部实现为每个网口都是一个独立的网卡，每个网卡都直接接通CPU，在配置LAN区是某几个网口时，CPU会在系统内建立一个虚拟网卡（例如eth0）去桥接每个需要绑定在LAN区的网口（例如ge0、ge3、ge4），将其上的流量在CPU上模拟出来的交换机（虚拟网卡）上进行交换。在这种设计模式下，由于没有硬件交换机芯片，交换机功能是通过CPU模拟出来的，这时候同区域的网络流量的交换在经过CPU的时候就会产生性能的损失。</p><p>基于这种情况，所以需要看看是否是这一环节出了问题。为了排查这个影响因素，我还去专门买了一个USB3.0转2.5G RJ45口的网卡【捂脸】。</p><p>结果一顿操作猛如虎，一测，路由器到电脑有线连接跑iperf3可以跑满千兆，NAS到电脑中间经过路由器有线连接跑iperf3还是可以跑满千兆。</p><p>哦豁，这一波，白亏一个USB网卡。</p><h3 id="NAS中的硬盘读取速度"><a href="#NAS中的硬盘读取速度" class="headerlink" title="NAS中的硬盘读取速度"></a>NAS中的硬盘读取速度</h3><p>由于具备了上面的条件，就可以直接通过电脑拷贝NAS上的文件到本地来测试NAS上硬盘的读取速度了。</p><p>拷贝一个3G的文件到本地，速度可以维持在100到130MB&#x2F;S之间，这样的速度测试，反正看下来也是没啥问题，千兆极限妥妥的。</p><blockquote><p>一个题外话，使用windows电脑就可以跑满速度，而使用mac就跑不满，估计这mac系统也有问题，mmp…</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>到了这里，大概可以确定问题就出现在数据到达电视的“最后一公里”——接入网络的介质——上了。</p><p>本来是想着换一个牛批一点的路由器比如华硕AC86U或者小米AX3600这种以通过高功率wifi信号传输更大的带宽稳定性到电视。但是经过仔细分析，K2P原先号称千元最强不仅仅是因为它性价比、0元薅、全千兆，更是因为K2P的wifi信号的强大。有大佬拆机分析之后发现，K2P的硬件系统，对2.4G和5G wifi模块都有各自独立的功放，我的一个朋友甚至说在一楼都能收到K2P在6楼发出的信号，连上之后还能上网，不可谓牛哉。所以，在当下有如此强大的无线信号下，还是有这样的问题，那么通过更换路由器来改善网络的程度是非常不确定的。</p><p>放弃了走无线的思路后，我把目光转向了有线连接。但是再来看看这个难顶的网络拓扑结构和户型图：</p><p><img src="/../img/NAS/route-by-modem-origin-topo.png" alt="网络拓扑&amp;户型图"></p><p>在这样的户型结构下，光猫啥的还可以放在电视柜后面或者弱电箱中，而想要把K2P挪到客厅几乎是不可能的，因为客厅还有猫（真·猫，一只豹猫，一只橘猫，一只英短），把路由器搞挂了那就是真的挂了，毕竟影响到全家的上网。</p><p>那么现在只能寄希望于光猫。光猫除了一个千兆（LAN）口桥接给到K2P做PPPoE之外，还有三个百兆口。其中一个绑定了IPTV的vlan没法改（也不是没法改，就是怕改了出问题），剩下两个可以用于光猫的LAN区域。</p><p>电视接入光猫剩余的两个网口，此时对于光猫的LAN端和K2P的WAN端以及电视的网口之间，组成了一个无外网权限，也无K2P内网权限的局域网，或者可以说是城域网（MAN）。以下是对MAN城域网的一些定义：</p><blockquote><p><a href="https://zh.wikipedia.org/zh-hans/%E5%9F%8E%E5%9F%9F%E7%BD%91">wikipedia</a><br>都会网域（Metropolitan Area Network，MAN）指大型的计算机网络，属于IEEE802.6标准，是介于LAN和WAN之间能传输语音与资料的公用网络。MAN是改进LAN（局域网）中的传输介质，扩大局域网的范围，达到包含一个大学校园、城市或都会区。它是较大型的局域网，需要的成本较高，但可以提供更快的传输速率。例如：某一家企业把在一个城市或同一国家内的服务据点连接起来，就可以称为一个或多个城域网。一些常用于城市区网的技术包括：以太网（10Gbps&#x2F;100Gbps）、WiMAX（全球互通微波访问）。</p><p><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=199086&extra=page=1&page=1&mobile=no">PPPoE协议和MAN访问 这个是什么东西? - 恩山</a><br>BYFAN:</p><blockquote><p>man是一个网络工程术语，全称是Metropolitan Area Network，意思是城域网，指大型的计算机网络，属于IEEE802.6标准，是介于LAN和WAN之间能传输语音与数据的公用网络。<br>光猫会给你分配一个光猫的IP，然后你的路由PPPOE拨号会拿到运营商给你的外网IP<br>man网关是光猫分配的地址。</p></blockquote></blockquote><p>在组成WAN和LAN之间的中间网络MAN城域网之后，此时就形成了同网段下，电视需要使用K2P做网关，也就是熟知的旁路由场景，但是这个旁路由又有那么点不一样。</p><p><img src="/../img/NAS/route-by-modem-new-topo.png" alt="现在的网络拓扑成了这样"></p><p>既然说这个旁路由不那么一样，那它究竟不一样在哪里呢？</p><blockquote><p>传统旁路由并非是接入广域网的最后一关，而是旁路由自身还有一个指向的网关，用于旁路由的流量的下一跳，而旁路由自己则负责同网段内其他设备流量的加密解密以及各种转发策略等。</p></blockquote><ol><li>K2P要充当拨号上网的总网关来代理它自己LAN端的流量上网。</li><li>K2P要参与MAN端的组网，充当MAN端的旁路由代理电视流量上网以及访问K2P的LAN端设备（NAS）。</li></ol><p>所以说K2P一个设备既要做流量出口，又要做旁路由，这就给K2P的配置带来了一些纠结。K2P在刷了Padavan后，是有做AP的功能的，也就是可以在这个模式下用于做旁路由，但又要K2P运行pppd来拨号上网，那么又需要它运行在网关模式下。</p><p>本着优先不影响环境上网的原则，K2P是肯定要配置在网关模式下拨号上网的。基于这个原则，就开始折腾了。</p><h2 id="配置思路-amp-方法"><a href="#配置思路-amp-方法" class="headerlink" title="配置思路&amp;方法"></a>配置思路&amp;方法</h2><p><strong>注：以下提及的MAN、WAN、LAN都是从K2P的角度来讨论的。</strong></p><h3 id="MAN端需要访问LAN端"><a href="#MAN端需要访问LAN端" class="headerlink" title="MAN端需要访问LAN端"></a>MAN端需要访问LAN端</h3><p><strong>需求：</strong></p><blockquote><p>MAN端需要访问LAN端设备。<br>MAN端网段为192.168.1.0&#x2F;24，而LAN端网段为192.168.2.0&#x2F;24，需要满足192.168.1.4&#x2F;24之间192.168.2.65&#x2F;24互访。</p></blockquote><p><strong>思路：</strong></p><p>实现电视可以访问NAS，总体思路就无非以下几点，电视访问NAS的请求可以正确到达K2P，而K2P又能正确转发请求到NAS，并且反向可通。</p><p>其一，请求可达网关。这一点由于电视和K2P都属于MAN网段，即同一个广播域，电视发出的请求自然可以到达K2P，但是为了不被光猫转发到它的外部（因为我们不知道光猫外部的网络环境是什么样的），则需要手动指派发往LAN端的流量到K2P，也就是配置一个静态路由。</p><p>其二，K2P能够转发MAN端的流量到LAN端。这一点则需要手动放通防火墙规则，因为在默认情况下，路由器固件编写者是不会放通MAN到LAN的转发的，这样的场景实在是少之又少。而我们做的放通，也并非是完全放通，而是仅针对MAN端地址进行放通，因为我们不知道运营商PPPoE给到K2P的网段中是否有图谋不轨的人，对同网段进行端口扫描或者网络扫描等不良行为。毕竟安全大过天。</p><p><strong>配置步骤：</strong></p><p>光猫配置静态路由将MAN端（192.168.1.0&#x2F;24）中目的地址为LAN端（192.168.2.0&#x2F;24）的流量定向转发到K2P。</p><blockquote><ol><li>使用光猫的运营商管理员账号登录光猫后台，像电信的运营商管理员账号为<code>telecomadmin</code>，密码或者其他的运营商可以去网上搜索。</li><li>进入用户侧网络配置 - 静态路由配置</li><li>添加静态路由：</li></ol></blockquote><blockquote><table><thead><tr><th align="left">目的地址</th><th align="left">下一跳地址</th><th align="center">网络接口</th></tr></thead><tbody><tr><td align="left">192.168.2.65&#x2F;24<br>（NAS）</td><td align="left">192.168.1.2&#x2F;24<br>（K2P）</td><td align="center">LAN<br>（这里的LAN代表光猫的LAN，就是K2P的MAN）</td></tr><tr><td align="left">192.168.2.1&#x2F;24<br>（K2P - LAN IP）</td><td align="left">192.168.1.2&#x2F;24<br>（K2P - MAN IP）</td><td align="center">LAN</td></tr></tbody></table></blockquote><p>配置K2P开放MAN端到LAN端流量的转发</p><blockquote><p>在Padavan的自定义设置 - 脚本配置中 - <code>在防火墙规则启动后执行:</code>中添加以下iptables规则：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 放通FORWARD放通K2P的流量转发，可让电视访问nas</span></span><br><span class="line">iptables -A FORWARD -s 192.168.1.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="代理MAN端设备上网"><a href="#代理MAN端设备上网" class="headerlink" title="代理MAN端设备上网"></a>代理MAN端设备上网</h3><p><strong>需求：</strong></p><blockquote><p>K2P要代理MAN端设备上网。<br>MAN端设备需要配置网关和DNS为K2P地址。</p></blockquote><p><strong>思路：</strong></p><p>基于这个需求，可以看出MAN端设备的请求不仅需要能够被K2P转发，还需要能够进入K2P。为什么要进入K2P呢？因为：</p><ol><li>需要使用K2P作DNS服务器，也就是请求K2P本身的服务。</li><li>需要通过K2P代理上网。</li></ol><blockquote><p>这里明确一下，请求被转发和被代理是不同的概念，转发是将请求报文原封不动地再发出去，而代理则是将请求报文中的源地址从原来真实的地址换成自身的地址之后，再发出去，以起到“代理”的作用。<br>这里的<u><strong>能够进入</strong></u>，指的就是请求进到K2P中，被K2P接收之后处理完成后再发出去。在这个场景中就是我们常说的NAT——网络地址转换——也是一种代理方式。</p></blockquote><p>明确了以上的定义之后，也就明确了，为什么需要满足流量可以进入K2P了。</p><p><strong>配置步骤：</strong></p><p>有了上面光猫的配置之后，我们就只需要配置电视和K2P即可。</p><blockquote><p>电视配置以下网络参数：</p><table><thead><tr><th align="right">键</th><th align="left">值</th></tr></thead><tbody><tr><td align="right">IP</td><td align="left">192.168.1.4</td></tr><tr><td align="right">掩码</td><td align="left">255.255.255.0</td></tr><tr><td align="right">网关</td><td align="left">192.168.2.1<br>或者是<br>192.168.1.2</td></tr><tr><td align="right">DNS</td><td align="left">192.168.2.1</td></tr></tbody></table></blockquote><p>K2P还是在Padavan的自定义设置 - 脚本配置中 - <code>在防火墙规则启动后执行:</code>中添加以下iptables规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 放通INPUT 和OUTPUT 可以让MAN端的电视访问K2P做DNS代理</span></span><br><span class="line">iptables -A INPUT -s 192.168.1.0/24 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -s 192.168.1.0/24 -j ACCEPT</span><br><span class="line"><span class="comment">## 配置SNAT可以让K2P正确代理MAN端终端的流量</span></span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o ppp0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>至此，已经全部实现MAN端的电视可以访问LAN端的NAS以及通过K2P代理上网了。并且访问NAS播放蓝光原盘也可以没有卡顿得播放了。所以说这一套操作还是对了的。</p><h2 id="后记-amp-展望"><a href="#后记-amp-展望" class="headerlink" title="后记&amp;展望"></a>后记&amp;展望</h2><p>需求被满足了，但是新的需求永远都会产生。例如如果说我以后需要在K2P的LAN端网络中添加一个旁路由用于代理全网流量出国留学，那么就只需要配置电视的网关为旁路由的IP即可，而不是需要配置更多的参数。</p><p>所以说这一套方案实际上是已经考虑到了未来的拓展性的。</p><p>而另外一个因素，还记得前面说的电视通过wifi进行广域网测速可以跑到20M&#x2F;S吧？20MB&#x2F;S，也就是200Mbps（二百兆比特每秒）而接入光猫的接口只有100Mbps（百兆比特每秒），带宽整整小了一半。但是文件播放的顺畅程度却提高了，所以可以断言，影响NAS上文件的播放的因素不仅仅只是带宽，更多的可能是时延和抖动。</p><p>如果我采取了将K2P挪到客厅，将电视连接到K2P的LAN端的方案，将来添加旁路由的时候又需要在K2P上插一个设备，而在宠物猫眼底下多添加一个设备就是多一份危险。当然，除去使用交换机的场景（我认为家里的网络设备规模还打不到使用交换机的地步哈哈哈）。</p><p>如果有大佬朋友也有这样的需求，又正好看到了我的这个记录，那么在看到有纰漏的地方，请指出，感谢！</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Geek&#39;s Work" scheme="https://hexo.chensmallx.top/categories/Geek-s-Work/"/>
    
    
    <category term="K2P" scheme="https://hexo.chensmallx.top/tags/K2P/"/>
    
    <category term="iptables" scheme="https://hexo.chensmallx.top/tags/iptables/"/>
    
    <category term="network" scheme="https://hexo.chensmallx.top/tags/network/"/>
    
    <category term="MAN" scheme="https://hexo.chensmallx.top/tags/MAN/"/>
    
    <category term="modem" scheme="https://hexo.chensmallx.top/tags/modem/"/>
    
    <category term="网络" scheme="https://hexo.chensmallx.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="城域网" scheme="https://hexo.chensmallx.top/tags/%E5%9F%8E%E5%9F%9F%E7%BD%91/"/>
    
    <category term="光猫" scheme="https://hexo.chensmallx.top/tags/%E5%85%89%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>HEXO博客实现多端同步</title>
    <link href="https://hexo.chensmallx.top/2020/06/30/hexo-all-files-sync-by-github/"/>
    <id>https://hexo.chensmallx.top/2020/06/30/hexo-all-files-sync-by-github/</id>
    <published>2020-06-29T16:52:41.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<p>马上要去入职了，难免要碰到换电脑或者是在多台设备上写博文的场景。<br>就比如在家要用台式机，在出租屋要用笔记本，在公司要用公司的台式机，Hexo又是基于静态的pages，没有typecho那样可以在线写博文的后台系统，所以今天就把MacBook上的Hexo源文件做了多端同步。</p><p>本博文仅作记录。</p><h2 id="源文件同步"><a href="#源文件同步" class="headerlink" title="源文件同步"></a>源文件同步</h2><p>在博客源文件目录生成git配置和与github远端关联。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 仓库链接</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;设置同步&quot;</span></span><br><span class="line">git push --set-upstream origin master  <span class="comment"># 以后就可以直接git push了</span></span><br></pre></td></tr></table></figure><p>这里我用了另一个仓库做博客源文件存放地，因为如果使用另一个分支来存放的话，难免有命令输错的时候，比如<code>git push origin hexo</code>不小心顺手打成<code>git push</code>或者<code>git push origin master</code>（这都是有可能的，毕竟这些都是熟手操作了），这样子就全盘覆灭。再者就是在github被微软收购之后，每个帐号下的仓库个数已经没有限制了（private仓库也一样），所以这样做更安全，更方便。</p><p>还有一点是Hexo在创建博客之初即为支持git仓库同步，最好的证据就是在博客根目录下有一个<code>.gitignore</code>文件用于非必须文件的忽略。</p><h2 id="第三方主题同步"><a href="#第三方主题同步" class="headerlink" title="第三方主题同步"></a>第三方主题同步</h2><p>我用的主题是<a href="https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/">Melody</a>，采用了Hexo的data files特性，只用在<code>source/_data/melody.yml</code>中对主题配置进行改动，而不用改动主题本身文件，所以支持主题平滑升级，具体可以直接到melody官方文档里看看。</p><p>因为修改主题配置无需改动文件，已经升级主题只需要在主题目录中<code>git pull</code>即可，这样索性就讲主题设置为git仓库的一个submodule即可。无需像其他的主题一样要fork一份主题文件到自己的账号下。</p><p>首先删除原来的melody主题文件（这里无需担心出问题，因为还会下回来），然后以submodule的形式将melody的文件下载到主题路径下即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf theme/melody</span><br><span class="line">git submodule add https://github.com/Molunerfinn/hexo-theme-melody themes/melody</span><br></pre></td></tr></table></figure><p>等待它下好即可重新使用博客。以下命令测试一下能不能用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo g; hexo s</span><br><span class="line"><span class="comment"># 然后浏览器登录 http://127.0.0.1:4000 查看结果</span></span><br></pre></td></tr></table></figure><hr><h2 id="在新的机器上配置博客环境"><a href="#在新的机器上配置博客环境" class="headerlink" title="在新的机器上配置博客环境"></a>在新的机器上配置博客环境</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p><strong>MacOS</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node  <span class="comment"># 高版本node.js自带npm</span></span><br></pre></td></tr></table></figure><p><strong>Linux</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p><strong>Windows</strong><br>前往<a href="https://nodejs.org/zh-cn/">Mode.js</a>官网下载安装包安装。</p><p><strong>可选操作：npm换源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org  <span class="comment"># 更换淘宝源</span></span><br></pre></td></tr></table></figure><h3 id="搭建Hexo环境"><a href="#搭建Hexo环境" class="headerlink" title="搭建Hexo环境"></a>搭建Hexo环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g  <span class="comment"># 安装hexo脚手架</span></span><br></pre></td></tr></table></figure><h3 id="克隆仓库和同步主题子模块"><a href="#克隆仓库和同步主题子模块" class="headerlink" title="克隆仓库和同步主题子模块"></a>克隆仓库和同步主题子模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 仓库链接 dir_name  <span class="comment"># 克隆本仓库</span></span><br><span class="line"><span class="built_in">cd</span> dir_name</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h3 id="安装Hexo配置和主题所需依赖"><a href="#安装Hexo配置和主题所需依赖" class="headerlink" title="安装Hexo配置和主题所需依赖"></a>安装Hexo配置和主题所需依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在博客目录下运行</span></span><br><span class="line">npm i  <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><h3 id="每次写完博客同步到仓库"><a href="#每次写完博客同步到仓库" class="headerlink" title="每次写完博客同步到仓库"></a>每次写完博客同步到仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;新增XXX文章&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><hr><p>这样即可完成博客在多个终端中的同步问题了。<br>当然，这篇博文就是在家里头的台式机上写好并部署、同步到github上的~<br>美汁汁</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="HEXO" scheme="https://hexo.chensmallx.top/categories/HEXO/"/>
    
    
    <category term="Hexo" scheme="https://hexo.chensmallx.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>解决MacOS上mail.app自动弹出的另一种办法</title>
    <link href="https://hexo.chensmallx.top/2019/10/25/solve-mac-mail-pop-up-bug/"/>
    <id>https://hexo.chensmallx.top/2019/10/25/solve-mac-mail-pop-up-bug/</id>
    <published>2019-10-25T02:24:53.000Z</published>
    <updated>2022-11-22T01:28:07.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-发现问题"><a href="#0x00-发现问题" class="headerlink" title="0x00 发现问题"></a>0x00 发现问题</h2><p>因为平时都使用mac自带的mail.app来对邮箱进行管理，所以使用习惯基本就是不会关闭，最多是用command+W暂时的关闭窗口。<br>但是最近出现了一个问题：正常关闭mail的窗口之后，会时不时自动弹出mail的窗口；如果是在桌面还好，如果是正在全屏使用软件，突然被mail弹出占用半个屏幕，那可太难受了。</p><h2 id="0x01-初步解决方法"><a href="#0x01-初步解决方法" class="headerlink" title="0x01 初步解决方法"></a>0x01 初步解决方法</h2><p>在逛v2ex的时候看到一位仁兄提到使用command+H来隐藏窗口，通过这样“关闭”的mail窗口就不会自动弹出，测试之后发现的确不会弹出来。此事到此就告一段落，但是…</p><h2 id="0x02-符合习惯的终极解决方法"><a href="#0x02-符合习惯的终极解决方法" class="headerlink" title="0x02 符合习惯的终极解决方法"></a>0x02 符合习惯的终极解决方法</h2><p>在习惯中，其他软件都是使用command+W来关闭窗口，只有mail是用command+H来关闭，有时候总是记不住，还是手贱使用了command+W，这样一来，还是时常会被“半屏”打扰。</p><p>今天闲来无事，看了一下mac上快捷键修改的问题，这一看就发现了转机。</p><p>下面教程正式开始：</p><ol><li> &gt; System Preference &gt; Keyboard &gt; Shortcuts &gt; App shortcuts</li><li>点击加号添加一个新的选项</li><li>输入配置如下：<blockquote><p>Application: Mail.app &#x2F;&#x2F; 列表中手动选择<br>Menu Title: Hide Mail &#x2F;&#x2F; mail中顶栏菜单中的实际操作名称<br>Keyboard Shortcut: ⌘W &#x2F;&#x2F; 直接在键盘使用command+W就可以设定了</p></blockquote></li><li>点击add</li><li>关闭 System Preference</li><li>重新启动 Mail.app（其实关闭没必要，过一会就会改过来）</li></ol><p>现在就能开心的使用command+W来“关闭”mail的窗口也不会被“半屏”打扰到啦~</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Geek&#39;s Work" scheme="https://hexo.chensmallx.top/categories/Geek-s-Work/"/>
    
    
    <category term="MacOS" scheme="https://hexo.chensmallx.top/tags/MacOS/"/>
    
    <category term="mail.app" scheme="https://hexo.chensmallx.top/tags/mail-app/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题记-206.反转链表</title>
    <link href="https://hexo.chensmallx.top/2019/09/07/leetcode-206-reverseList/"/>
    <id>https://hexo.chensmallx.top/2019/09/07/leetcode-206-reverseList/</id>
    <published>2019-09-07T15:08:01.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>反转一个单链表。</p><p>示例:</p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote><p>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>来源：<a href="https://leetcode-cn.com/problems/reverse-linked-list">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">register</span> ListNode *prev = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">register</span> ListNode* curr = head;</span><br><span class="line">        <span class="keyword">register</span> ListNode* temp;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            temp = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 16 ms, 在所有 C++ 提交中击败了53.05%的用户<br>内存消耗 : 9.2 MB, 在所有 C++ 提交中击败了28.08%的用户</p></blockquote><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* p = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 12 ms, 在所有 C++ 提交中击败了85.51%的用户<br>内存消耗 : 9.1 MB, 在所有 C++ 提交中击败了47.27%的用户</p></blockquote><p>这个递归法有点意思，看了很久才赚过弯来。<br>在读代码+一步步画图解析之后，终于明白了其中的原理。<br>一行一行的讲解吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br></pre></td></tr></table></figure><p>第一行是每个递归都需要的开始返回的条件。<br>第一个条件<code>head == NULL</code> 是处理<code>[]</code>这样的链表的特殊条件，并且在第二个条件<code>head-&gt;next == NULL</code>之前进行运算是为了防止在<code>[]</code>这样的空链表中运行<code>head-&gt;next</code>导致内存访问错误。<br>第二个条件是正常的递归跳出。搭配第2句、第5句就可以将尾节点不断的往上层调用栈返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListNode* p = <span class="built_in">reverseList</span>(head-&gt;next);</span><br></pre></td></tr></table></figure><p>使用一个临时指针将第一句返回的尾节点存起来，以便最后返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head-&gt;next-&gt;next = head;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>这两句要一起看，我们先来看看每一次递归调用栈运行的时候链表的情况吧，以链表<code>[1,2,3,4,null]</code>为例。n在那个节点下面就代表那个节点的next指向null，h代表head指向，p代表临时指针p指向（最后返回的p也是这个）。</p><p>初始状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1-&gt;2-&gt;3-&gt;4</span><br><span class="line">         n</span><br></pre></td></tr></table></figure><p>第3层调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      h  p</span><br><span class="line">1-&gt;2-&gt;3&lt;-4</span><br><span class="line">      n</span><br></pre></td></tr></table></figure><p>第2层调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   h     p</span><br><span class="line">1-&gt;2&lt;-3&lt;-4</span><br><span class="line">   n</span><br></pre></td></tr></table></figure><p>第1层调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h        p</span><br><span class="line">1&lt;-2&lt;-3&lt;-4</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p>可以看出在head指向的那个节点处运算过后就会将后一个节点的next指向本节点，以此往复就会将整条链表都换向。<br>而将本节点的next指向null我觉得是加强算法完整性来做的，因为是一个函数自己递归，所以要保证最后返回的链表最后一个节点要指向null，所以需要这一步。<br>可以看出p指针永远都是指向尾节点，并且一层一层的往上返回，感觉这一点设计很巧妙就是了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="leetcode" scheme="https://hexo.chensmallx.top/tags/leetcode/"/>
    
    <category term="OJ" scheme="https://hexo.chensmallx.top/tags/OJ/"/>
    
    <category term="链表" scheme="https://hexo.chensmallx.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++模板类多文件编译 无定义 解决办法</title>
    <link href="https://hexo.chensmallx.top/2019/09/07/C-template-multi-files-compile/"/>
    <id>https://hexo.chensmallx.top/2019/09/07/C-template-multi-files-compile/</id>
    <published>2019-09-07T05:44:45.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-实现模板类"><a href="#0x01-实现模板类" class="headerlink" title="0x01 实现模板类"></a>0x01 实现模板类</h2><p>通常在C&#x2F;C++中实现一个类，都是将声明放在.h文件中，将定义（实现）放在.c或者.cpp文件中，例如：</p><h3 id="通常示例多文件编译"><a href="#通常示例多文件编译" class="headerlink" title="通常示例多文件编译"></a>通常示例多文件编译</h3><p>myClass.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_CLASS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_CLASS_H</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myClass</span>();</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>myClass.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myClass.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">myClass::<span class="built_in">myClass</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>myClass.main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myClass.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">myClass <span class="title">mClass</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译的时候直接运行makefile或者执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g++ -c myClass.cpp</span><br><span class="line">g++ -c myClass.main.cpp</span><br><span class="line">g++ myClass.o myClass.main.o -o main</span><br><span class="line">./main</span><br></pre></td></tr></table></figure><p>就可以运行了。这在没有设计模板类的时候一切都会很顺利，但是只要涉及到了模板类就…</p><h3 id="模板类多文件遇到的问题"><a href="#模板类多文件遇到的问题" class="headerlink" title="模板类多文件遇到的问题"></a>模板类多文件遇到的问题</h3><p>就拿一个循环队列来举例子吧。</p><p>cycleQueue.hpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CYCLE_QUEUE_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CYCLE_QUEUE_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cycleQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> front;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tail;</span><br><span class="line">    T* data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">cycleQueue</span>(<span class="type">unsigned</span> <span class="type">int</span> nsize);</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>cycleQueue.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cycleQueue.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">cycleQueue&lt;T&gt;::<span class="built_in">cycleQueue</span>(<span class="type">unsigned</span> <span class="type">int</span> nsize)</span><br><span class="line">    :<span class="built_in">size</span>(nsize + <span class="number">1</span>),</span><br><span class="line">    <span class="built_in">front</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">tail</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">int</span> cycleQueue&lt;T&gt;::<span class="built_in">length</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len = (<span class="type">int</span>)tail - (<span class="type">int</span>)front;</span><br><span class="line">    <span class="keyword">return</span> len &gt;= <span class="number">0</span> ? len : -len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cycleQueue.main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cycleQueue.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">cycleQueue&lt;<span class="type">int</span>&gt; <span class="title">queue</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照常理，正常使用g++编译即可生成main可执行文件，但是在执行最后一步链接的时候会出现问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -c cycleQueue.cpp</span><br><span class="line">$ g++ -c cycleQueue.main.cpp</span><br><span class="line">$ g++ cycleQueue.o cycleQueue.main.o -o main</span><br><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::isFull()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::length()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::deQueue()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::enQueue(int)&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::isEmpty()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::cycleQueue(unsigned int)&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">  <span class="string">&quot;cycleQueue&lt;int&gt;::~cycleQueue()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> cycleQueue.main.o</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br></pre></td></tr></table></figure><p>可以看到，单独编译实现代码的时候是可以通过的，但是在两个文件链接起来的时候出现了问题。经过查找资料，貌似是因为实现文件中实现的是<code>cycleQueue&lt;T&gt;</code>这个类型，但是main中使用了<code>cycleQueue&lt;int&gt;</code>这个类型，所以编译器找不到这个类型的定义。</p><p>想了想，这好办啊，只要把实现的定义也加进去就好了呀。</p><p>于是乎，cycleQueue.hpp就成了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CYCLE_QUEUE_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CYCLE_QUEUE_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cycleQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cycleQueue.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>而为了解决include重复问题，cycleQueue.cpp也变成了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CYCLE_QUEUE_CPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CYCLE_QUEUE_CPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cycleQueue.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>于是乎，搭配makefile就可以快速实现编译了</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">cycleQueue: cycleQueue.o cycleQueue.main.o</span></span><br><span class="line">    g++ cycleQueue.o cycleQueue.main.o -o cycleQueue</span><br><span class="line">    make clean</span><br><span class="line"></span><br><span class="line"><span class="section">cycleQueue.o: cycleQueue.cpp</span></span><br><span class="line">    g++ -c cycleQueue.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">cycleQueue.main.o: cycleQueue.main.cpp</span></span><br><span class="line">    g++ -c cycleQueue.main.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm *.o</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -la</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x  6 chenke  staff  192 Sep  7 13:50 .</span><br><span class="line">drwxr-xr-x  3 chenke  staff   96 Sep  7 14:10 ..</span><br><span class="line">-rw-r--r--  1 chenke  staff  956 Sep  7 13:40 cycleQueue.cpp</span><br><span class="line">-rw-r--r--  1 chenke  staff  403 Sep  7 13:32 cycleQueue.hpp</span><br><span class="line">-rw-r--r--  1 chenke  staff  695 Sep  7 13:43 cycleQueue.main.cpp</span><br><span class="line">-rw-r--r--  1 chenke  staff  242 Sep  7 13:01 makefile</span><br><span class="line"></span><br><span class="line">$ make</span><br><span class="line">g++ -c cycleQueue.cpp</span><br><span class="line">g++ -c cycleQueue.main.cpp</span><br><span class="line">g++ cycleQueue.o cycleQueue.main.o -o cycleQueue</span><br><span class="line">make clean</span><br><span class="line"><span class="built_in">rm</span> *.o</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> -la</span><br><span class="line">total 80</span><br><span class="line">drwxr-xr-x  7 chenke  staff    224 Sep  7 14:12 .</span><br><span class="line">drwxr-xr-x  3 chenke  staff     96 Sep  7 14:10 ..</span><br><span class="line">-rwxr-xr-x  1 chenke  staff  20512 Sep  7 14:12 cycleQueue</span><br><span class="line">-rw-r--r--  1 chenke  staff    956 Sep  7 13:40 cycleQueue.cpp</span><br><span class="line">-rw-r--r--  1 chenke  staff    403 Sep  7 13:32 cycleQueue.hpp</span><br><span class="line">-rw-r--r--  1 chenke  staff    695 Sep  7 13:43 cycleQueue.main.cpp</span><br><span class="line">-rw-r--r--  1 chenke  staff    242 Sep  7 13:01 makefile</span><br></pre></td></tr></table></figure><hr><p>一顿操作猛如虎23333</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="C++" scheme="https://hexo.chensmallx.top/tags/C/"/>
    
    <category term="template" scheme="https://hexo.chensmallx.top/tags/template/"/>
    
    <category term="模板" scheme="https://hexo.chensmallx.top/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题记-557.反转字符串中的单词III</title>
    <link href="https://hexo.chensmallx.top/2019/09/07/leetcode-557-reverseWord/"/>
    <id>https://hexo.chensmallx.top/2019/09/07/leetcode-557-reverseWord/</id>
    <published>2019-09-06T16:21:58.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p>示例 1:</p><p>输入: “Let’s take LeetCode contest”<br>输出: “s’teL ekat edoCteeL tsetnoc”</p><p>来源：<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题以另一题作为基础，就是上一篇<a href="https://hexo.chensmallx.top/2019/09/06/leetcode-344-reverseString/">leetcode题记-344.反转字符串</a>。</p><p>这里要注意的就是，这是一个“双指针法”，在运行的过程中会有一个头指针固定，尾指针不断向前移动，遇到空格即为头指针和尾指针之间为一个单词，对这个单词进行反转即可。而使用的交换算法是反转字符串中最快速的异或交换法，实际上还是一个双指针法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(<span class="type">int</span> front, <span class="type">int</span> tail, string&amp; str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (front &lt; tail) &#123;</span><br><span class="line">            str[front] ^= str[tail];</span><br><span class="line">            str[tail] ^= str[front];</span><br><span class="line">            str[front++] ^= str[tail--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> front = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">reverseString</span>(front, i - <span class="number">1</span>, s);</span><br><span class="line">                front = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverseString</span>(front, s.<span class="built_in">length</span>() - <span class="number">1</span>, s);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 : 16 ms, 在所有 C++ 提交中击败了98.24%的用户<br>内存消耗 : 11.6 MB, 在所有 C++ 提交中击败了95.48%的用户</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="leetcode" scheme="https://hexo.chensmallx.top/tags/leetcode/"/>
    
    <category term="OJ" scheme="https://hexo.chensmallx.top/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题记-344.反转字符串</title>
    <link href="https://hexo.chensmallx.top/2019/09/06/leetcode-344-reverseString/"/>
    <id>https://hexo.chensmallx.top/2019/09/06/leetcode-344-reverseString/</id>
    <published>2019-09-06T15:39:58.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例 1：</p><blockquote><p>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p></blockquote><p>示例 2：</p><blockquote><p>输入：[“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/reverse-string">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="解法一（辣鸡解法）直接下标交换"><a href="#解法一（辣鸡解法）直接下标交换" class="headerlink" title="解法一（辣鸡解法）直接下标交换"></a>解法一（辣鸡解法）直接下标交换</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> length = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            c = s[i];</span><br><span class="line">            s[i] = s[length - <span class="number">1</span> - i];</span><br><span class="line">            s[length - <span class="number">1</span> - i] = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 72 ms, 在所有 C++ 提交中击败了54.97%的用户<br>内存消耗 : 15.2 MB, 在所有 C++ 提交中击败了79.02%的用户</p></blockquote><h3 id="解法二-双指针法"><a href="#解法二-双指针法" class="headerlink" title="解法二 双指针法"></a>解法二 双指针法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">char</span>&amp; x, <span class="type">char</span>&amp; y)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> c = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">            i++, j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 64 ms, 在所有 C++ 提交中击败了85.40%的用户<br>内存消耗 : 15.1 MB, 在所有 C++ 提交中击败了90.38%的用户</p></blockquote><p>双指针的确比直接诶计算下标快了不少，毕竟在算加减的时候双指针法只用了两个基本的加减，而直接计算下标（算上改变i）则需要5此加减法，消耗了两倍多的计算量。</p><h3 id="优化的双指针"><a href="#优化的双指针" class="headerlink" title="优化的双指针"></a>优化的双指针</h3><h4 id="优化一-C-swap"><a href="#优化一-C-swap" class="headerlink" title="优化一 C++ swap"></a>优化一 C++ swap</h4><p>这里使用了c++自带的<code>swap()</code>函数，在底层上应该是有改进的，并且在使用的时候将自增运算运用得淋漓尽致，于是乎又加快了不少。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i++], s[j--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 60 ms, 在所有 C++ 提交中击败了94.45%的用户<br>内存消耗 : 15 MB, 在所有 C++ 提交中击败了94.68%的用户</p></blockquote><h4 id="优化二-位运算"><a href="#优化二-位运算" class="headerlink" title="优化二 位运算"></a>优化二 位运算</h4><p>这算是奇技淫巧的一种了，就是两个变量来回异或就可以交换数据，而且是从bit层面进行运算的，可以说是速度特别的快了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            s[i] ^= s[j];</span><br><span class="line">            s[j] ^= s[i];</span><br><span class="line">            s[i++] ^= s[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>执行用时 : 52 ms, 在所有 C++ 提交中击败了99.76%的用户<br>内存消耗 : 15.3 MB, 在所有 C++ 提交中击败了75.25%的用户</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="leetcode" scheme="https://hexo.chensmallx.top/tags/leetcode/"/>
    
    <category term="OJ" scheme="https://hexo.chensmallx.top/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题记 292.Nim游戏</title>
    <link href="https://hexo.chensmallx.top/2019/09/05/leetcode-292-canWinNum/"/>
    <id>https://hexo.chensmallx.top/2019/09/05/leetcode-292-canWinNum/</id>
    <published>2019-09-05T14:08:58.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。</p><p>你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p><p>示例:</p><blockquote><p>输入: 4<br>输出: false<br>解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；<br>因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/nim-game">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>刚开始看到这道题的难度为“简单”，我怀疑了一下，甚至无从下手。</p><p>看到题解的时候才发现，这是一个数学推理题，或者说是一道小学生做的“找规律”题目。</p><p>在条件中，有一个关键点——你作为先手。这一点重要在于之后的推理都有一个前提。</p><p>Leetcode 官方题解：</p><blockquote><p>如果石头堆中只有一块、两块、或是三块石头，那么在你的回合，你就可以把全部石子拿走，从而在游戏中取胜。而如果就像题目描述那样，堆中恰好有四块石头，你就会失败。因为在这种情况下不管你取走多少石头，总会为你的对手留下几块，使得他可以在游戏中打败你。因此，要想获胜，在你的回合中，必须避免石头堆中的石子数为 4 的情况。</p><p>同样地，如果有五块、六块、或是七块石头，你可以控制自己拿取的石头数，总是恰好给你的对手留下四块石头，使他输掉这场比赛。但是如果石头堆里有八块石头，你就不可避免地会输掉，因为不管你从一堆石头中挑出一块、两块还是三块，你的对手都可以选择三块、两块或一块，以确保在再一次轮到你的时候，你会面对四块石头。</p></blockquote><p>看看 ooolize 的回答中的表格：</p><blockquote><table><thead><tr><th>who\times</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>…</th></tr></thead><tbody><tr><td>us</td><td>√</td><td>√</td><td>√</td><td>×</td><td>√</td><td>√</td><td>√</td><td>×</td><td>√</td><td>···</td></tr><tr><td>enemy</td><td>×</td><td>×</td><td>×</td><td>√</td><td>×</td><td>×</td><td>×</td><td>√</td><td>×</td><td>···</td></tr></tbody></table></blockquote><p>所以说，想要获胜，那就必须使得存在的石子数量不为4的倍数。既然获得了这一步重要的推理结论，那么代码就不是问题了。</p><h3 id="模4法"><a href="#模4法" class="headerlink" title="模4法"></a>模4法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canWinNim</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果:</p><p>其实是会在0~8ms之间浮动的，所以不够稳定的算法，leetcode的判定机状况对结果会有影响。</p><blockquote><p>执行用时 : 0 ms, 在所有 C++ 提交中击败了100.00%的用户<br>内存消耗 : 8 MB, 在所有 C++ 提交中击败了52.50%的用户</p></blockquote><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>算法题做着做着就有点丢了初心了。算法题归根结底还是数学题，问题还是要从数学的角度出发去解决，而找规律就是数学上最基本的一种解题思路。基础多了高大上的算法之后，拿到一道题脑海里面冒出来的思路很少就是很简单的解法了。</p><p>只能说，千里之行始于足下，好吧。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="leetcode" scheme="https://hexo.chensmallx.top/tags/leetcode/"/>
    
    <category term="OJ" scheme="https://hexo.chensmallx.top/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题记-46.全排列</title>
    <link href="https://hexo.chensmallx.top/2019/08/22/leetcode-46-permute/"/>
    <id>https://hexo.chensmallx.top/2019/08/22/leetcode-46-permute/</id>
    <published>2019-08-22T15:00:20.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p><p>示例:</p><blockquote><p>输入: [1,2,3]<br>输出:[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/permutations">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>解这道题主要用了通过递归实现回溯的办法。<br>在处理数组的过程中，先确定当前正在遍历的位，例如第一位，那么就将每一位和第一位互换，然后在下一个递归过程中将第二位和其他数字依次替换，这样的过程和人类的思维几乎一样。</p><p>具体可以看这个<a href="https://leetcode-cn.com/problems/permutations/solution/quan-pai-lie-by-leetcode/">leetcode 官方题解</a>，讲的还是很具体的，还有动图可以看。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[<span class="number">0</span>]&#125;);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">process</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> front)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == nums.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(nums);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = front; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; _nums = nums;</span><br><span class="line">            <span class="type">int</span> temp = _nums[front];</span><br><span class="line">            _nums[front] = _nums[i];</span><br><span class="line">            _nums[i] = temp;</span><br><span class="line">            <span class="built_in">process</span>(_nums, front + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 16 ms, 在所有 C++ 提交中击败了86.15%的用户<br>内存消耗 : 10.2 MB, 在所有 C++ 提交中击败了13.65%的用户</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="leetcode" scheme="https://hexo.chensmallx.top/tags/leetcode/"/>
    
    <category term="OJ" scheme="https://hexo.chensmallx.top/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题记-1114.按序打印</title>
    <link href="https://hexo.chensmallx.top/2019/08/21/leetcode-1114-Foo-Bar/"/>
    <id>https://hexo.chensmallx.top/2019/08/21/leetcode-1114-Foo-Bar/</id>
    <published>2019-08-21T15:30:56.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>我们提供了一个类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123; <span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123; <span class="built_in">print</span>(<span class="string">&quot;two&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">three</span><span class="params">()</span> </span>&#123; <span class="built_in">print</span>(<span class="string">&quot;three&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个不同的线程将会共用一个 Foo 实例。</p><p>线程 A 将会调用 <code>one()</code> 方法<br>线程 B 将会调用 <code>two()</code> 方法<br>线程 C 将会调用 <code>three()</code> 方法<br>请设计修改程序，以确保 <code>two()</code> 方法在 <code>one()</code> 方法之后被执行，<code>three()</code> 方法在 <code>two()</code> 方法之后被执行。</p><p>示例 1:</p><blockquote><p>输入: [1,2,3]<br>输出: “onetwothree”<br>解释:<br>有三个线程会被异步启动。<br>输入 [1,2,3] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 two() 方法，线程 C 将会调用 three() 方法。<br>正确的输出是 “onetwothree”。</p></blockquote><p>示例 2:</p><blockquote><p>输入: [1,3,2]<br>输出: “onetwothree”<br>解释:<br>输入 [1,3,2] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 three() 方法，线程 C 将会调用 two() 方法。<br>正确的输出是 “onetwothree”。</p></blockquote><p>注意:<br>尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。<br>你看到的输入格式主要是为了确保测试的全面性。</p><p>来源：<a href="https://leetcode-cn.com/problems/print-in-order">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>因为是第一次做多线程的题目，之前对操作系统的锁之类的东西也没有好好学，这次做下来这题（包括看了其他人的题解）也算是复习了以下多线程的基础。</p><h3 id="Naive"><a href="#Naive" class="headerlink" title="Naive"></a>Naive</h3><p>一开始并不知道锁要怎么实现（体现了我的菜），所以就用了几个bool和while实现了简单的阻塞（我并不知道线程的阻塞是怎么实现的），结果运行结果一出来就傻眼了（太菜了）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span>() &#123;</span><br><span class="line">        f = s = t = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// printFirst() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFirst</span>();</span><br><span class="line">        f = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!(f &amp;&amp; !s));</span><br><span class="line">        <span class="comment">// printSecond() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printSecond</span>();</span><br><span class="line">        s = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!(f &amp;&amp; s &amp;&amp; !t));</span><br><span class="line">        <span class="comment">// printThird() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printThird</span>();</span><br><span class="line">        t = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> f, s, t;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果1"><a href="#结果1" class="headerlink" title="结果1"></a>结果1</h4><p>执行用时 : 1484 ms, 在所有 C++ 提交中击败了5.01%的用户<br>内存消耗 : 9 MB, 在所有 C++ 提交中击败了100.00%的用户</p><p>当然我也不知道为啥我的占用总是超过了100%的人。</p><h3 id="Use-mutex"><a href="#Use-mutex" class="headerlink" title="Use mutex"></a>Use mutex</h3><p>看过了别人的题解之后，我发现了多数人用了<code>std::mutex</code>和<code>std::condition_variable</code>这两个库用于互斥锁的实现。因为mutex比较简单，所以就顺便学了以下（还不是因为太菜）。</p><p>先来看看 <code>std::mutex</code> 的介绍：</p><blockquote><ul><li><p>构造函数，std::mutex不允许拷贝构造，也不允许 move 拷贝，最初产生的 mutex 对象是处于 unlocked 状态的。</p></li><li><p>lock()，调用线程将锁住该互斥量。线程调用该函数会发生下面 3 种情况：</p><blockquote><ol><li>如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁。</li><li>如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住。</li><li>如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。</li></ol></blockquote></li><li><p>unlock()， 解锁，释放对互斥量的所有权。</p></li><li><p>try_lock()，尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞。线程调用该函数也会出现下面 3 种情况，(1). 如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量。(2). 如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。</p></li></ul><p>reference:<a href="https://www.cnblogs.com/haippy/p/3237213.html">C++11 并发指南三(std::mutex 详解)</a></p></blockquote><p>从用法中可以看出来，在互斥量被锁住的时候，线程执行lock()函数是会被阻塞的，只有在互斥量被unlock()之后，lock()函数才会被执行。所以可以通过设置两个互斥锁分别对second和third进行锁定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span>() &#123;</span><br><span class="line">        smx.<span class="built_in">lock</span>();</span><br><span class="line">        tmx.<span class="built_in">lock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// printFirst() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFirst</span>();</span><br><span class="line">        smx.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        smx.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="comment">// printSecond() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printSecond</span>();</span><br><span class="line">        tmx.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        tmx.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="comment">// printThird() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printThird</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex smx, tmx;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果2"><a href="#结果2" class="headerlink" title="结果2"></a>结果2</h4><p>执行用时 : 40 ms, 在所有 C++ 提交中击败了31.67%的用户<br>内存消耗 : 9.2 MB, 在所有 C++ 提交中击败了100.00%的用户</p><p>这次的结果就好了许多。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="leetcode" scheme="https://hexo.chensmallx.top/tags/leetcode/"/>
    
    <category term="OJ" scheme="https://hexo.chensmallx.top/tags/OJ/"/>
    
    <category term="多线程" scheme="https://hexo.chensmallx.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>vscode在MacOS下无法调试C/C++语言 查病 和 解决</title>
    <link href="https://hexo.chensmallx.top/2019/08/07/vscode-debug-C-itermNternimal/"/>
    <id>https://hexo.chensmallx.top/2019/08/07/vscode-debug-C-itermNternimal/</id>
    <published>2019-08-07T09:39:21.000Z</published>
    <updated>2022-11-22T01:28:07.065Z</updated>
    
    <content type="html"><![CDATA[<p>调试，是每个Coder必须要具备的能力，然而具备了能力却没有环境和工具的支持，那岂不是“巧妇难为无米之炊”？<br>我就遇上了这样“操蛋”的事情，事情是这样的，且容我慢慢道来。</p><span id="more"></span><h2 id="起因【笔试中无法调试0w0！"><a href="#起因【笔试中无法调试0w0！" class="headerlink" title="起因【笔试中无法调试0w0！"></a>起因【笔试中无法调试0w0！</h2><p>昨天，也就是大疆笔试，做三道算法题的时候，调试没法用了（其实是早就没法用了，只是一直没管）。然后就计划着做完笔试之后把这个事情搞定了，于是回到家就开始一直google查查查。</p><h2 id="怀疑一：gdb没有签名"><a href="#怀疑一：gdb没有签名" class="headerlink" title="怀疑一：gdb没有签名"></a>怀疑一：gdb没有签名</h2><p>这个问题可就是历史遗留问题了，Mac把gcc和g++链接到clang和clang++之后就能够感觉的出来，苹果对gnu这些东西不是很待见。</p><p>每次brew升级完gdb之后，gdb的代码签名就失效了，只好每次都重新应用签名。好在签名的命令还算简单:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb-code-sign keychain中gdb代码签名的名字</span></span><br><span class="line"><span class="comment"># /usr/local/bin/gdb gdb命令的软链接地址</span></span><br><span class="line">codesign -fs gdb-code-sign /usr/local/bin/gdb</span><br></pre></td></tr></table></figure><h3 id="生成签名证书"><a href="#生成签名证书" class="headerlink" title="生成签名证书"></a>生成签名证书</h3><p>不过还是要说说这个<code>gdb-code-sign</code>的这个certification要怎么generate出来。</p><p>运行Keychan Access.app，也就是钥匙串，这个东西管理了记录在系统中的所有钥匙，包括wifi密码，网络证书等等，只要有系统管理员的密码就可以随意查看（chrome里头记录的密码看不到，因为chrome不把它们记录在系统中，但是Safari的可以）。</p><p><img src="/../img/keychain.png" alt="Keychain Access.app"></p><p>选择 Keychain Access -&gt; Certificate Assistant -&gt; Create a Certifitate…，在名字处取一个自己能够分辨的名字，然后选择代码签名(Code sign)，在Mojave版本的MacOS中就只要点击确定两下就可以生成了。</p><p><img src="/../img/gdb-code-sign.png" alt="Create Certificate"></p><p>生成证书之后，讲生成的三个同名项目全都移到System目录下，分别是证书(Self-signed Certificate)、公钥(Public Key)和私钥(Private Key)。</p><p>接着双击生成的证书，将信任一栏改为任何时候都信任。</p><p><img src="/../img/gdb-code-sign-trust.png" alt="Trust the Certificate"></p><p>这时候就可以关闭Keychain了。</p><h3 id="给gdb应用签名"><a href="#给gdb应用签名" class="headerlink" title="给gdb应用签名"></a>给gdb应用签名</h3><p>接着打开终端，使用<code>sudo -i</code>进入root权限。</p><p>我一开始使用的是上面的那条命令，但是怎么都签不好，开始调试之后都显示(例如我调试一个叫做sleep的程序)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: /Users/chenke/Documents/ProgramerMaker/C:C++/C/test/sleep</span><br><span class="line">Unable to find Mach task port for process-id 65245: (os/kern) failure (0x5).</span><br><span class="line"> (please check gdb is codesigned - see taskgated(8))</span><br></pre></td></tr></table></figure><p>只好又去查。发现有两个解决办法：</p><ol><li>运行gdb的时候使用<code>sudo gdb xxx.out</code></li><li>在Mojave里头需要附加一个xml的配置文件，并且签名的命令也要做出一些改动。</li></ol><p>因为后面要给vscode用的调试器，总不能每次调试都输一次密码吧。所以不行，得一劳永逸。所以进行第二个解决办法。</p><p>将一个文件命名为gdb.xml或者别的什么都可以，然后写入下面的内容，然后保存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.debugger<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在本目录下，使用root权限，重新运行签名命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign --entitlements gdb.xml -fs gdb-code-sign /usr/local/bin/gdb</span><br></pre></td></tr></table></figure><p>签名完了之后，再运行gdb调试，这回就好了一些了，可以run，但是会卡住。。。显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: /Users/chenke/Documents/ProgramerMaker/C:C++/C/test/sleep</span><br><span class="line">[New Thread 0xd03 of process 65791]</span><br><span class="line">[New Thread 0xf03 of process 65791]</span><br></pre></td></tr></table></figure><p>如果gdb能用了，但是因为什么原因导致调试无法进行，这就很难受。所以就放弃gdb了…</p><h2 id="折腾lldb"><a href="#折腾lldb" class="headerlink" title="折腾lldb"></a>折腾lldb</h2><p>重新给lldb签名之后，发现lldb能用，而且跑的很欢块，并且很开心的一点就是，无论是用gcc还是clang，还是g++或是clang++编译的文件，都可以使用lldb调试，这也在之后的编译工具的选择上给出了多个选项。</p><h2 id="怀疑二：vscode没有配置好"><a href="#怀疑二：vscode没有配置好" class="headerlink" title="怀疑二：vscode没有配置好"></a>怀疑二：vscode没有配置好</h2><p>其实到了这里，我就有点虚了，因为配置文件一直都是一套的，不应该存在以前能用但是现在不能用的情况，毕竟微软的东西不能说不向后兼容吧- -！</p><p>经过一番查找之后，发现最新的配置文件版本已经到了2.0.0，而我还在用0.2.0，哈哈，所以说还是过时了【手动捂脸。不过怎么说，就算是过时，那也不应该让编译和运行出错呀。</p><p>经过了一番修改，终于将vscode的运行配置更新了一遍。C和C++两套配置因为要调用不同的编译器，编译命令也不同，所以得分成两块，C用gcc或者clang或者llvm-gcc来编译，C++用g++或者clang++或者llvm-g++来编译。</p><h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>经过这顿折腾，我也理解了一些其中的参数的意义所在，就比如：</p><ul><li>preLaunchTask</li></ul><blockquote><p>运行调试任务前需要运行的任务，这个任务要在tasks.json中配置，而这里填写的就是名字，或者标签等标识这个task用的属性。</p></blockquote><ul><li>program</li></ul><blockquote><p>要运行的程序的名字，这个和tasks.json中编译选项中的文件路径是对应的，必须相同，不然vscode就无法找到这个文件来运行。</p></blockquote><ul><li>args</li></ul><blockquote><p>运行调试的参数，会直接传入lldb或者gdb的。</p></blockquote><ul><li>stopAtEntry</li></ul><blockquote><p>字面意思，在调试的时候会在入口处暂停，点击继续才会开始调试，例如C&#x2F;C++中的main函数，或者Python中的第一条语句，或者Golang中的 func main()</p></blockquote><ul><li>externalConsole</li></ul><blockquote><p>外部的控制台，这个我是启用的，因为如果不启用的话，在vscode自带的DEBUG CONSOLE中只能输出程序信息，不能输入（或许是有办法的，但是我不会而已哈哈哈）。在调试程序的时候肯定会需要一些交互，所以这个还是要打开的。</p></blockquote><ul><li>MIMode</li></ul><blockquote><p>调试模式，这里选择的就是调试器的种类，选择<code>lldb</code>或者是<code>gdb</code>，我这里选择的是lldb，因为编译已经可以用gcc的优化了，而在MacOS上用lldb会更加的的心应手一些，毕竟也算是系统级的“亲儿子”。</p></blockquote><h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc-9&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="comment">// &quot;-std=c++17&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span><span class="string">&quot;shared&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;showReuseMessage&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;clear&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;silent&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>command</li></ul><blockquote><p>编译使用的命令，也就是编译器，这里要根据需求改变编译器的选择，例如gcc，g++，clang，clang++，llvm-gcc，llvm-g++这些。</p></blockquote><ul><li>args</li></ul><blockquote><p>编译选项，这里头的选项要按照顺序来输入，例如编译一个c文件是要用到<code>gcc sleep.c -o sleep -g -std=c11</code>，那么args里面的顺序就是要按照这样来填写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;-std=c11&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span>```</span><br><span class="line"></span><br><span class="line">### c_cpp_properties.json</span><br><span class="line"></span><br><span class="line">虽然这个文件对编译调试不会造成什么影响，但是也放上来作为参考。这个c_cpp_properties是对vscode的自动补全有影响，它会根据系统类型去选择要引用的位置的文件，并检测联想出来的结果。</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mac&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/usr/local/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.1/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                   <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/usr/local/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.1/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include&quot;</span></span><br><span class="line">               <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;macFrameworkPath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;/System/Library/Frameworks&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/Library/Frameworks&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;/usr/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;/usr/local/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                   <span class="string">&quot;/usr/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;/usr/local/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">               <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="string">&quot;_UNICODE&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;msvc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                   <span class="string">&quot;C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">               <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>到了这一步还是不行，使用vscode运行调试的时候，调试控制器台能够显示调试信息，但是调用的Terminal.app终端却没有程序运行的信息，也无法输入变量。</p><h2 id="最终发现是终端模拟器程序的问题"><a href="#最终发现是终端模拟器程序的问题" class="headerlink" title="最终发现是终端模拟器程序的问题"></a>最终发现是终端模拟器程序的问题</h2><p>在某个偶然，我发现我把<strong>iTerm关了</strong>之后，Terminal就能够承载调试的程序了，并且在重新开启iTerm之后，还是一样可以调试。</p><p><img src="/../img/vscode-debug-c++.png" alt="debug success"></p><h3 id="解决办法v1-0"><a href="#解决办法v1-0" class="headerlink" title="解决办法v1.0"></a>解决办法v1.0</h3><p>（重要的事情说三遍）</p><blockquote><p>关闭iTerm等第三方终端<br>关闭iTerm等第三方终端<br>关闭iTerm等第三方终端</p></blockquote><p>虽然问题解决了（可以在vscode上愉快的调试了，并且可以输入输出变量和结果），但是让我还是有点匪夷所思，决定继续追查下去。</p><p>我在vscode中看到一个配置选项：<code>&quot;terminal.external.osxExec&quot;: &quot;iTerm.app&quot;</code>这里原先的值是Terminal.app，后来我发现之后，根据字面意思，意思就是外部终端调用的是哪个程序，索性我改成了iTerm.app。</p><p>改成iTerm.app之后，我把iTerm关了，准备让vscode自动调用打开iTerm运行程序的时候，我发现系统弹出了一个辅助控制的窗口显示“是否允许iTerm控制Terminal”，我选了“Not Allow”。选了之后，系统调用出来的还是Terminal.app，并且上面变成了什么都没有，和之前一模一样。</p><p>为了做个对比，我特意去装了个Hyper终端（后来莫名发现这东西颜值高又好用除了有点不稳定），然后将<code>terminal.external.osxExec</code>改为Hyper.app，同样的，在运行调试的时候，和之前一样弹出了窗口，我选择了Allow。这次和相同的是，弹出来的还是Terminal.app，但是不同的是可以输入输出了！这让我really开心。</p><p>于是乎，我来到辅助功能这里一探究竟：<br>System Preferences -&gt; Security &amp; Privacy -&gt; Privacy -&gt; Automation</p><p>终于让我“盲生”发现了“华点”：</p><p><img src="/../img/system-privacy.png" alt="Automation setting"></p><h3 id="解决办法v2-0"><a href="#解决办法v2-0" class="headerlink" title="解决办法v2.0"></a>解决办法v2.0</h3><p>在打开iTerm.app下面对Terminal.app的自动控制之后，再将<code>terminal.external.osxExec</code>改为iTerm的时候，同样的，也能进行正常的调试了。</p><p>我的理解是，系统没有允许iTerm去控制Terminal，但是vscode调用了iTerm并且权限下放的不够多，所以就没法使得Terminal“接住”这个调试任务（可能是被系统拦截了），所以就什么都看不到。</p><p>还想吐槽的是，微软的这个<code>terminal.external.osxExec</code>简直就是摆设，设置了也没法更换调试用的终端，并且还会导致这种玄妙的权限问题。</p><hr><p>有机会再说说Hyper的安装和设置，嘿嘿，还挺有意思的~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;调试，是每个Coder必须要具备的能力，然而具备了能力却没有环境和工具的支持，那岂不是“巧妇难为无米之炊”？&lt;br&gt;我就遇上了这样“操蛋”的事情，事情是这样的，且容我慢慢道来。&lt;/p&gt;</summary>
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="MacOSX" scheme="https://hexo.chensmallx.top/tags/MacOSX/"/>
    
    <category term="vscode" scheme="https://hexo.chensmallx.top/tags/vscode/"/>
    
    <category term="C/C++" scheme="https://hexo.chensmallx.top/tags/C-C/"/>
    
    <category term="debug" scheme="https://hexo.chensmallx.top/tags/debug/"/>
    
    <category term="gcc" scheme="https://hexo.chensmallx.top/tags/gcc/"/>
    
    <category term="clang" scheme="https://hexo.chensmallx.top/tags/clang/"/>
    
    <category term="gdb" scheme="https://hexo.chensmallx.top/tags/gdb/"/>
    
    <category term="lldb" scheme="https://hexo.chensmallx.top/tags/lldb/"/>
    
    <category term="code sign" scheme="https://hexo.chensmallx.top/tags/code-sign/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题记 33.搜索旋转排序数组</title>
    <link href="https://hexo.chensmallx.top/2019/08/01/leetcode-33-search/"/>
    <id>https://hexo.chensmallx.top/2019/08/01/leetcode-33-search/</id>
    <published>2019-08-01T11:10:32.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p>示例 1:</p><blockquote><p>输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0<br>输出: 4</p></blockquote><p>示例 2:</p><blockquote><p>输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3<br>输出: -1</p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题可以直接用二分法解决，但是这个二分法需要魔改左右边界迭代的判断。而这个魔改的思想，有点类似反证法。</p><p>在进行二分法的时候，数组的反转点或许在中点的左边或者右边，这让我们对数据位置的确定会产生一些困难。</p><p>这时候就需要换个思路，例如：<br>我们可以确定左边或者右边中的某一边是肯定按照顺序排列的，如果目标在这个按照顺序的个区间内，则将二分查找区域放到这边；<br>反之所有的情况都是在另一边，我们也将二分查找区域放到这另一边，这样不断进行下去，就会不断的无视这个翻转点进行二分查找了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; nums[right]) &#123; <span class="comment">// pivot in left</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) left = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> right = mid<span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// pivot in right</span></span><br><span class="line">                <span class="keyword">if</span> (target &lt; nums[mid] &amp;&amp; target &gt;= nums[left]) right = mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>执行用时 : 4 ms, 在所有 C++ 提交中击败了92.20%的用户<br>内存消耗 : 8.5 MB, 在所有 C++ 提交中击败了98.16%的用户</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="leetcode" scheme="https://hexo.chensmallx.top/tags/leetcode/"/>
    
    <category term="OJ" scheme="https://hexo.chensmallx.top/tags/OJ/"/>
    
    <category term="二分查找" scheme="https://hexo.chensmallx.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题记 26.删除排序数组中的重复项</title>
    <link href="https://hexo.chensmallx.top/2019/08/01/leetcode-26-removeDuplicates/"/>
    <id>https://hexo.chensmallx.top/2019/08/01/leetcode-26-removeDuplicates/</id>
    <published>2019-08-01T07:16:59.000Z</published>
    <updated>2022-11-22T01:28:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><p>示例 1:</p><blockquote><p>给定数组 nums &#x3D; [1,1,2],<br>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。<br>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>示例 2:</p><blockquote><p>给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],<br>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。<br>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><blockquote><p>&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br><code>int len = removeDuplicates(nums);</code></p></blockquote><blockquote><p>&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。<br>&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br><code>for (int i = 0; i &lt; len; i++) &#123; print(nums[i]); </code></p></blockquote><p>来源：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array">力扣（LeetCode）</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>做了这题才发现自己是naive。<br>一开始只想到了遍历，遍历到和之前一样的元素的时候直接将数组中的元素删除掉就完事儿了，结果出来之后的结果惨不忍睹。</p><blockquote><p>执行用时 :264 ms, 在所有 C++ 提交中击败了15.21%的用户<br>内存消耗 : 9.9 MB, 在所有 C++ 提交中击败了78.41%的用户</p></blockquote><p>遍历的代码如下，一开始还觉得自己用了迭代器，骚的一批，结果溢出来给自己骚断了腰【手动捂脸</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> length = <span class="number">1</span>, visited = *(nums.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> itor = nums.<span class="built_in">begin</span>() + <span class="number">1</span>; itor != nums.<span class="built_in">end</span>(); itor++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*itor == visited) &#123;</span><br><span class="line">                nums.<span class="built_in">erase</span>(itor);</span><br><span class="line">                itor--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited = *itor;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在看了题解之后，才发现题目中早就已经给出了明确的提示：</p><blockquote><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>基于这句话，也就是说并不需要将原数组中多余的元素真正的“删除”，而是只需要将后面的元素都放到前面来，令得返回的长度之内都不同和正确就可以了。</p><p>所以题解中给出的双指针的确是最优解了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> length = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, scan = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (scan &lt; length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[res] != nums[scan]) &#123;</span><br><span class="line">                nums[++res] = nums[scan++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            scan++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ++res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果:</p><blockquote><p>执行用时 : 24 ms, 在所有 C++ 提交中击败了98.03%的用户<br>内存消耗 : 10.1 MB, 在所有 C++ 提交中击败了73.17%的用户</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Programer Walk" scheme="https://hexo.chensmallx.top/categories/Programer-Walk/"/>
    
    
    <category term="leetcode" scheme="https://hexo.chensmallx.top/tags/leetcode/"/>
    
    <category term="OJ" scheme="https://hexo.chensmallx.top/tags/OJ/"/>
    
    <category term="去重" scheme="https://hexo.chensmallx.top/tags/%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
</feed>
